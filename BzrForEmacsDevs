== Bazaar for Emacs Developers ==

This is a quick-start guide to using [http://bazaar-vcs.org Bazaar] for Emacs development.  It assumes familiarity with the old CVS ways.  The focus at present is on /easing the transition/ from CVS to Bazaar, /not/ on providing the most powerful or efficient workflows.

=== What Version of Bazaar to Use ===

As Emacs needs some of the improvements provided by 1.17 release, this quick-start guide
assumes you use GNU Bazaar 1.17 or higher to develop Emacs.  Use of version 2.0 or
higher is /strongly/ recommended because a large number of performance improvements
have been made.

[:WhereIsEmacs]
=== Where is Emacs? ===

See [[EmacsBzrSwitchover#Where]].

=== Brief Description of Bzr Workflows for Emacs Developers ===

This guide describes a short list of workflows that can be used with Bzr for Emacs developers who have not used Bzr (and often, have not used any distributed version control system).  It's based on [http://bazaar-vcs.org/Scenarios/RepeatedContributions this scenario].  If you find the terminology in this guide confusing, read [http://bazaar-vcs.org/BzrForCVSUsers Bazaar for CVS Users] and come back.

The emphasis here is on /necessary/ and /simple/, not on "general", or on maximal efficiency.  Emacs developers will surely need various other workflows at times, and there are in most cases more highly performant ways of accomplishing most tasks.  However, those presented here are intended to be straightforward, effective, reasonably efficient, and relatively simple.

Most of this guide is oriented toward the "regular contributor," whether a "core" committer, a maintainer of a well-defined package (/e.g./, a major mode), or simply someone who enjoys occasionally hacking on Emacs and then contributing those improvements to the community.  Brief sections explaining workflows for one-time contributors and for beta testers are also included, but not the main focus.

Here is a list of tasks and corresponding workflows that will be useful to new users of the public Emacs Bazaar repository.  The mainline branch of this repository will be called the /master branch/, /master/ for short, or /upstream master branch/ for emphasis.  The mainline branch is the one containing the changes targeted for the next public release.

# Configure Bazaar with personal information.
# Initialize your local repository, including the trunk (mirror of the upstream master).
# Initialize a working branch.
# Using a "quickfix" branch for "one-off" changes, such as one-line bugfixes and documentation updates.
# Create a patch bundle for review.
# Push changes to the upstream master.
# Using a feature branch for longer-range changes that are expected to require multiple commits or to span multiple updates from the master.
# Using a stacked branch to build the latest upstream sources, or to create a patch just once.

Overview of life with Bazaar:

# Tell Bazaar your name and email address; these will be used as defaults to identify your commits.
# Bazaar doesn't provide extensive Unix-style man pages, or Info.  Instead, use ##bzr help##.
# Create a bzr repository locally.  It will hold all your branches.
# Create your first local branch: a mirror of the project trunk.
# Create a local development branch, based off your local trunk mirror.
# (Maybe create a feature branch for some specific task.)
# Do your work on one of your non-mirror local branches, committing locally as you go.
# From time to time, pull upstream newness into your mirror branch (this is like <tt>cvs update</tt>), and then merge the newness into your dev/task branches from there (also sort of like <tt>cvs update</tt>).
# When your local changes are ready, then either
## push them up to the master branch (if you're a maintainer and have the necessary access rights --- this is analogous to committing in CVS), /or/
## package up your changes and submit them as a "bundle" to the project mailing list (analogous to posting a patch).
# Receive feedback.
# Maybe make some more commits locally, in response to the feedback
# Push again (or submit a new bundle).
# Lather, rinse, repeat until the change is accepted.
# If you did all this on a local task branch, you can remove it now.  The change history will live upstream.

Now let's look at the specific bzr commands.  Throughout the examples, we'll assume you have some specific directory where you keep your sources.  For concreteness, imagine you have an environment variable:

      export DEVHOME=/usr/local/src/bzr-repos       # season to taste

Of course some people like to organize things differently.  However, there are very good reasons to keep all of your Emacs branches in one place when using Bazaar, so we recommend you use this kind of organization until you are familiar with Bazaar.

[:PersonalizingBzr]
=== Personalizing Bazaar ===

Unlike centralized VCSes where you are identified by an account in the repository, in Bazaar you can create branches in many places, and you may have permission to commit to many branches you don't control access to.  So Bazaar keeps the information used to identify you in the history locally, and includes it in every revision you commit.  This information is your name and email address.  To configure Bazaar to use them,

      bzr whoami 'J. Random Hacker <jrhacker@gnu.org.invalid>'

If you are integrating somebody else's work, you want to be identified as the committer (so you can handle technical issues with the commit), but not as the author.  In that case you can use the ##--author## option to ##bzr commit## to specify the author.

[:InitializingYourBzrRepo]
=== Initializing Your Local Bazaar Repository ===

This section describes how to set things up if you plan on making repeated contributions to Emacs (whether or not you're one of the Emacs maintainers).  

We'll assume Emacs's public master trunk lives at ##http://bzr.savannah.gnu.org/r/emacs/trunk##.  If you are a committer, you will want to use a ##sftp## URL instead: ##sftp://<membername>@bzr.savannah.gnu.org/srv/bzr/emacs/trunk##.  (Actually, you /want/ to use a ##bzr+ssh## URL, and /we/ want to run a smart server on Savannah.  But ##savannah-hackers## considers this a security risk that needs to be analyzed carefully.  Please update the URLs if it becomes possible to use ##bzr+ssh##.)

First, initialize a shared repository in which to store all your branches:

      cd $DEVHOME
      bzr init-repo --2a emacs/

(The ##--2a## is because we need the most modern, technically best format, even though for compatibility reasons Bazaar may not use it as the default yet.)  In Bazaar, a /repository/ contains the history of one or more branches.  It's possible to create a "standalone" branch, which contains its own repository under the ##./.bzr## directory.  But here we are using a /shared repository/, which never has its own working tree.  Creating a shared repository is very important for performance, because all branches created under ##$DEVHOME/emacs## will share history storage.  Not only does this save a lot of space, but it speeds up branch creation immensely because the history does not need to be copied.

Now, create a branch called ##trunk## that will just be a mirror of the mainline.  You'll never do any development in this branch; its job is just to reflect the upstream master:

      cd emacs/
      bzr branch --no-tree http://http://bzr.savannah.gnu.org/r/emacs/trunk/ trunk/

(Or use the ##bzr+ssh## URL if you are a committer.)

The ##--no-tree## option prevents an automatic checkout of the source tree.  This has two functions.  It saves some space.  More important, it reduces the temptation to edit sources in this branch to almost nothing --- so that you don't accidentally commit any local changes on it.  Next, further safeguard that mirror --- this is what makes it a "two-way" mirror as we'll see below.  (All your work will be done in other branches, which we'll create in a moment).  We "bind" the local branch to the upstream master:

      cd trunk/
      echo "public_branch = http://bzr.savannah.gnu.org/r/emacs/trunk" >> .bzr/branch/config
      bzr bind http://bzr.savannah.gnu.org/r/emacs/trunk/
      cd ..

The first ##bzr branch## operation in a new repository may take many minutes.  An alternative, faster, method based on a tarball containing the whole repository is being set up.  This will be documented here when the details are known.

If there are other branches you'd like to mirror, you can set them up in the same way.  Here you can efficiently branch them from the upstream branch, because very little history copying will be needed (as long as they themselves were branched from the upstream master).

[:InitializeBranch]
=== Initialize Your quickfixes Branch ===

We recommend you create one branch for quick, one-off work: for example, you spot a typo in the README file and want to fix it.  You can just keep reusing this branch for small, self-contained changes.  (For larger tasks, such as a complicated bug fix or new feature that might require multiple commits and rounds of feedback, we recommend that you create a "task branch" dedicated to that fix or feature, described in [[#FeatureBranch]].)

Since you can't edit files in the /trunk/ branch (they're nonexistent), you must create development branches where you can actually do your work.  Each will be based on the local trunk mirror we just created (another way to say it is that the new branch will be "branched from" the mirror):

      cd $DEVHOME/emacs
      bzr branch trunk/ quickfixes/

In a Bazaar shared repository, all the branches share history.  This means less spaced used and less time spent downloading history and file content, making Bazaar branches much more lightweight than CVS branches.   However, it still takes time to check out the source tree for a new branch, and bootstrapping a new tree takes an annoyingly long time.  That is why we recommend that for small changes you keep reusing the same ##quickfixes## branch.  This way, after you have bootstrapped the ##quickfixes## branch once, the subsequent update, build, and commit steps of the update-edit-build-test-commit cycle all are very fast, as long as you continue working in the same branch. 
 
[:QuickFix]
=== Workflow for a One-Off Change ===

First, refresh your mirror and then the working branch:

      cd $DEVHOME/emacs/trunk
      bzr pull                       # update from the upstream master (optional)
      cd ../quickfixes
      bzr merge                      # update from /trunk/ (optional)

The reason you use "##merge##" instead of "##pull##" in the task branch is that your task branch has local changes -- it has diverged (a bit) from the upstream master, and so any changes from upstream have to be merged with your changes.  A "pull", on the other hand, assumes that the destination is pristine, that is, that there are no local changes, and will error if it finds any.

The merge may fail due to a change that conflicts with your branch.  You'll need to fix the problem, then

      bzr resolve -m file-you-changed ...      # Mark these conflicts as resolved.
                                               # Bazaar keeps track of unresolved conflicts,
                                               # and won't let you commit until all are resolved.

Once you have achieved a clean merge, commit it:

      bzr commit -m "Merge from mainline."

Now you start editing.  When you are done:

      bzr commit -m "Fix bla bla bla (closes Bug #1)."

Note that ##bzr## assumes you want to commit all changes in your workspace relative to the most recent commit in the branch.  This is almost always what you want after making a "quick fix".  If you have an unusually long commit message, you can use the ##-F## option instead of ##-m## (see [[#FeatureBranch]]).

##bzr## will automatically identify you as the committer and author of these changes (see [[#PersonalizingBzr]]).  If you are integrating another developer's work, you can use ##--author 'J. Random Hacker <jrhacker@gnu.org.invalid>'## to identify JR Hacker as the author of the change.

[:SendABundle]
=== Creating Bundles for Review ===

If you want to send your change off for review, just create a "bundle", which is a file containing your change, in a special "merge directive" format that bzr understands but that also contains a human-readable diff:

      bzr send -o PATCHNAME.txt

where ##PATCHNAME## is some brief mnemonic name for the change.  Send a mail to the Emacs Devel list describing the change; attach ##PATCHNAME.txt## to that mail (please use MIME type ##text/plain##).  If the reviewers ask for further tweaks, repeat the cycle.  Edit the files, build and test as necessary, and 

      bzr commit -m "Address reviewer comments."

Now generate a new bundle:

      bzr send -o PATCHNAME-v2.txt

and send it off.

In the case of a revision, although nobody else knows about your first commit yet, it is simplest to just make another one.  It's not impossible to "uncommit", but it's not straightforward.  In any case, although in the ##quickfixes## branch a plain ##bzr log## will show you all your changes, when you do plain ##bzr log## after your changes have been merged in ##trunk##, you will see only a merge commit log, which describes the whole series of commits for this task.  It will typically look something like "Merge: fix bla bla bla (closes Bug #1)."

[:PushToUpstream]
=== Pushing To the Upstream Master ===

Alternatively, if you are a committer, you may want to push to the upstream master.

      cd $DEVHOME/emacs/trunk/
      bzr pull
      bzr merge ../quickfixes

and then commit

      bzr commit -m "Merge: fix bla bla bla (closes Bug #1)."

which automatically pushes all your new commits to the upstream master, because the mirror is set up as bound branch.  In this process, updating your ##trunk## with ##bzr pull## is not really optional.  There is a race condition here, just as in CVS: if your mirror is not up-to-date because another developer has committed since you last updated, your commit will fail.  In this case you should abort the merge

      bzr revert

do another ##bzr pull##, merge from ##quickfixes## again, and commit.  After you successfully commit, the changes work will appear grouped as a single merge in ##bzr log## on the mainline, but anyone can use ##bzr log -n0## to see the sub-commits (or "nested commits") within that merge.

It might occur to you to save some effort by just doing ##bzr push## directly to the upstream master from inside the ##quickfixes## branch:

      cd $DEVHOME/emacs/quickfixes
      bzr push sftp://<membername>@bzr.savannah.gnu.org/srv/bzr/emacs/trunk/

//Do not do this// --- it can cause history to be displayed in a strange way in the upstream master, any mirrors or branches of it, and your own branch later. Search for the word "hidden" in [http://lists.gnu.org/archive/html/emacs-devel/2009-11/msg01021.html this mail] for more details.)

[:FeatureBranch]
=== Workflow for a Feature Branch ===

When you are working on a task that touches many files, or requires a lot of thought and several stages, or for any reason may take a fair amount of time, it's a good idea to work on a separate branch to keep the changes from interfering with concurrent work (including your own!), and to keep the history separate from other work.  This makes review easier, too.  So we create a new branch, as described in [[#InitializeBranch]].

      cd $DEVHOME/emacs
      bzr branch trunk/ TASKNAME/
      cd TASKNAME

...where "TASKNAME" could be, e.g., the bug tracker ticket number of the bug you're trying to fix, or just a short, descriptive name for the task.

At this point, you're ready to do work.  You edit the source files, build and test as needed.  When you've accomplished a subtask, it's a good idea to stop and commit your work to the branch.  Here, you often have a larger ChangeLog than can comfortably be entered on the command line with ##-m##.  In this case, you put the log message in a file we'll call ##log-message.txt##.  Then

      bzr commit -F log-message.txt

You can also do ##bzr commit -m "blah blah blah"##, if your log message is short enough to fit on one line.  Remember, these commits are local: they just go to the task branch.  They don't affect the upstream master branch, and they don't even affect your local trunk mirror.  No one else sees them until later, when you send them upstream.

(Note: we'll continue to keep a versioned ChangeLog file.  See [http://lists.gnu.org/archive/html/emacs-devel/2009-08/msg00334.html this mail] for more.)

If the task isn't done yet, keep working.  Edit yet more source files, until you reach a good stopping point:

      bzr commit -F another-log-message.txt

etc.  You can commit any time you reach a good checkpoint.  We recommend committing much more frequently than you might with CVS or Subversion.

From time to time you may wish to refresh the local trunk mirror, by
pulling in changes from upstream:

      pushd $DEVHOME/trunk/
      bzr pull
      popd

Because the trunk mirror is bound to upstream, and never has any local changes, you don't have to commit what you just pulled --- all that upstream newness is now fully incorporated into your mirror.

And after refreshing the mirror, you'll want to get those changes into your task branch, by merging them:

      bzr merge
      bzr commit -m "Merge from mainline."

(As described in [[#QuickFix]], the merge may fail due to conflicts, which you must resolve before you can commit.)

Once you have completed the task, you'll want to send it upstream.  You do this just as you would for a quick fix, either by [[#SendABundle]] or by [[#PushToUpstream]].

At that point, you can delete your task branch...

      cd ..
      rm -rf TASKNAME/

...and update your mirror to receive your own changes:

      cd trunk/
      bzr pull
      cd ..

Note that you will still be able to see the entire history of your branch in the trunk by using ##bzr log -n0##, even though you've deleted the local copy.

When you decide to work on the next task, create a new task branch:

      cd $DEVHOME/emacs
      bzr branch trunk/ NEW_TASKNAME/

...and you know what to do from here.

[:BleedingEdgeBuilds]
=== How To Follow Bleeding-Edge Emacs ===

If you just want to run bleeding-edge code (perhaps so you can report bugs against the latest development sources), and do not expect to make code changes to Emacs, then you can save a little bit of time and space by using a /stacked branch/.  This workflow is very similar to CVS:

      cd /usr/local/src                         # or wherever
      bzr branch --stacked http://bzr.savannah.gnu.org/r/emacs/trunk emacs-trunk

Now you can build, test, install, and run Emacs in this directory in the usual way.  If you want to update the checkout, you just do

      cd /usr/local/src/emacs-trunk
      bzr pull

Note that ##bzr pull## /will fail/ if you have made /any/ changes to version-controlled files.

[:PatchContributors]
=== How One-Time Patch Contributors Should Use Bazaar ===

Oops --- ##bzr pull## failed because you "had an itch", and made some changes in Emacs.  You may as well send your improvement upstream.  

      cd /usr/local/src/emacs-trunk

Write up a ChangeLog entry for your change.  Now

      bzr commit -m "Describe my wonderful patch."

Then follow the instructions in [[#SendABundle]] to submit your changes for review.  From now on, until your code is merged, you cannot use ##bzr pull##.  You must merge, instead:

      bzr merge
      bzr commit -m "Merge from upstream master."

The merge may fail due to a change that conflicts with yours.  You'll need to fix the problem, then

      bzr resolve -m file-you-changed ...          # Mark these conflicts as resolved.
      bzr commit -m "Merge from upstream master."

You will have to continue merging in this way until you code is merged.

Alternatively, after committing your local changes, you can follow the workflows described for regular contributors (/i.e./, create a repository and mirror branch).  Then you can

      cd /$DEVHOME/emacs
      bzr branch /usr/local/src/emacs-trunk my-hacks
      cd my-hacks
      bzr merge --remember ../trunk
      rm -rf /usr/local/src/emacs-trunk             # optional

which updates your ##my-hacks## branch with changes from upstream, and sets the parent of the my-hacks branch to your ##trunk## mirror.  After that you can simply follow the workflows recommended above for regular contributors (including submitting your patch with [[#SendABundle]]!)  Happy hacking!

=== Other Resources ===

* [http://doc.bazaar-vcs.org/bzr.dev/en/user-guide/index.html Bzr Users Guide]
* BzrQuickStartForEmacsDevs provides an alternate, more CVS-like, simpler workflow. 
* [http://doc.bazaar-vcs.org/explorer/en/tutorials/open-source-dev-gnome.html Open Source Development Using Bazaar Explorer (GNOME)]  An excellent tutorial on using the Bazaar Explorer GUI.  Warning: the workflow advocated there is both more complex in some ways and slightly different from the one recommended in /Bazaar for Emacs Devs/.
* [http://doc.bazaar-vcs.org/migration/en/survival/bzr-for-git-users.html Bazaar for Git users]  A pretty complete overview of the differences between Git and Bazaar.  Contains a couple of glossaries of VCS terms, which are probably useful to those who don't know git, too.
* [http://doc.bazaar-vcs.org/migration/en/survival/bzr-for-cvs-users.html Bazaar for CVS users]  A brief stub.
