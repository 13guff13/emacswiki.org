[:Introduction]
== Introduction ==

This is a quick-start guide to using [http://bazaar-vcs.org Bazaar] for Emacs development.  It assumes familiarity with the old CVS ways.  The focus at present is on /easing the transition/ from CVS to Bazaar, /not/ on teaching you how to be a power Bazaar user.  However, once you have read this, you will have a basic understanding of distributed version control and Bazaar.

This guide mainly presents a Bazaar workflow recommended for use by Emacs developers.  It is oriented toward the "regular contributor," whether a "core" committer, a maintainer of a well-defined package (/e.g./, a major mode), or simply someone who enjoys occasionally hacking on Emacs and then contributing those improvements to the community.  The emphasis is on /necessary/ and /simple/, not on "general" nor on maximal efficiency.  Emacs developers will surely need various other workflows at times, and there are in most cases more highly performant ways of accomplishing most tasks.  However, the ways presented here are intended to be straightforward, effective, reasonably efficient, and relatively simple.

[:StopGap]
=== A Stopgap Measure for the Impatient ===

While we recommend the workflow documented on this page, it's possible that you just need to contribute a change to Emacs as quickly as you can, and don't have time to dive fully into the distributed way of working right now.

If that's the case, then see [[BzrQuickStartForEmacsDevs]], which provides an alternate, more CVS-like workflow that will feel simpler if you are coming from CVS, but will still allow you to contribute changes to Emacs.  (You may find the links in [[#OtherResources]] useful as well.)

Later, when you have a chance, come back here and learn the natively distributed workflow.  It is a superset of what is described at [[BzrQuickStartForEmacsDevs]], and hews more closely to what experienced Bazaar users are accustomed to, which will make it easier for you to get support online.

[:Terminology]
=== Terminology ===

If you find the terminology in this guide confusing, read [http://bazaar-vcs.org/BzrForCVSUsers Bazaar for CVS Users] and come back.  In particular, keep in mind that the main unit of currency in Bzr is the /branch/, and that /repository/ in Bzr does not mean the same thing as in CVS.  In Bzr, a repository is just a place to store multiple branches efficiently; you're as likely to have a repository locally as remotely.  In Bzr, you send and receive changes to/from an upstream /branch/, and whether that branch is in a repository upstream is irrelevant.  The mainline branch of the public Emacs repository will be called the /master branch/, /master/ for short, or /upstream master branch/ for emphasis.  (The mainline branch is the one containing the changes targeted for future public releases.)

The command examples are generally given in Unix command-line style, although we did try to use forms that would work on MS-Windows as well.  If you use Windows or some other system, please feel free to add examples appropriate for that system.

[:GettingStarted]
== Getting Started ==

[:BzrVersion]
=== What Version of Bazaar to Use ===

As Emacs needs some of the improvements provided by 1.17 release, this quick-start guide assumes you use GNU Bazaar 1.17 or higher to develop Emacs.  Use of version 2.0 or higher is /strongly/ recommended because a large number of performance improvements have been made.

[:WhereIsEmacs]
=== Where is Emacs? ===

You can browse Emacs in loggerhead (the Bazaar web front-end) here: http://bzr.savannah.gnu.org/lh/emacs/ .  (Note that loggerhead is broken sometimes; this is [[https://savannah.gnu.org/support/index.php?107142 sr #107142]].)

To make a local branch or branches based on upstream Emacs, start at [[#InitializingYourBzrRepo]] and follow instructions from there.  (This is the Bazaar equivalent of `cvs checkout`.)

[:Help]
=== Getting help on Bazaar ===

Bazaar doesn't provide extensive Unix-style man pages, or Info.  Instead, use ##bzr help##, and see [[#OtherResources]] for more documentation.

[:RegularContributors]
=== The Bazaar Work Routine ===

Overview of the Bazaar work routine:

# Tell Bazaar your name and email address; these will be used as defaults to identify your commits. (Usage: bzr whoami "Frank Chu <fchu@example.com>")
# Create a bzr shared repository locally, to hold all your branches.
# Create your first local branch: a mirror of the project trunk.
# Create a local development branch, based off your local trunk mirror.
# (Maybe create a feature branch for some specific task.)
# Do your work on one of your non-mirror local branches, committing locally as you go.
# From time to time, pull upstream newness into your mirror branch (this is like <tt>cvs update</tt>), and then merge the newness into your dev/task branches from there (also sort of like <tt>cvs update</tt>).
# When your local changes are ready, then either
## merge them into the master branch (if you're a maintainer and have the necessary access rights --- this is analogous to committing in CVS), /or/
## package up your changes and send them as a "bundle" to the project mailing list (analogous to posting a patch).
# Receive feedback.
# Maybe make some more commits locally, in response to the feedback
# Merge to master again (or submit a new bundle).
# Lather, rinse, repeat until the change is accepted.
# If you did all this on a local feature branch, you can remove it now.  The change history will live upstream.

Now let's look at the specific bzr commands.  Throughout the examples, we'll assume you have some specific directory where you keep your sources.  For concreteness, imagine you have an environment variable:

      export DEVHOME=/home/jrandom/projects       # season to taste

Of course some people like to organize things differently.  However, there are very good reasons to keep all of your Emacs branches in one place when using Bazaar, so we recommend you use this kind of organization until you are familiar with Bazaar.

[:PersonalizingBzr]
=== Personalizing Bazaar ===

Unlike centralized VCSes where you are identified by an account in the repository, in Bazaar you can create branches in many places, and you may be sending changes to many places (including, but not limited to, the upstream master branch).  So Bazaar stores your identity locally, and includes it as part of every revision you commit.  This information is your name and email address.  To configure Bazaar to use them, do

      bzr whoami "J. Random Hacker <jrandom@gnu.org.invalid>"

When you are integrating somebody else's work, you will want to be identified as the committer (so you can handle technical issues with the commit), but not as the author.  In that case you can use the ##--author## option to ##bzr commit## to specify the author.

[:InitializingYourBzrRepo]
=== Initializing Your Local Bazaar Repository ===

This section describes how to set things up if you plan on making contributions to Emacs (whether or not you're one of the Emacs maintainers).  You can also use this way just to track the Emacs sources, even if you never contribute changes.

For the general public, Emacs's public master trunk lives at ##http://bzr.savannah.gnu.org/r/emacs/trunk##.  But committers should use an ##sftp## URL instead: ##sftp://<membername>@bzr.savannah.gnu.org/srv/bzr/emacs/trunk##.  (Actually, you /want/ to use a ##bzr+ssh## URL, and we /want/ to run a smart server on Savannah to make that possible.  But ##savannah-hackers## considers this a security risk that needs to be analyzed carefully.  Please update this page if it becomes possible to use ##bzr+ssh##.  See [https://savannah.gnu.org/support/index.php?107143 sr 107143] for details.)

First, initialize a shared repository in which to store all your branches:

      cd $DEVHOME
      bzr init-repo --2a emacs/

(The ##--2a## option is not required if you are using Bazaar 2.0.0 or later.)  In Bazaar, a /repository/ contains the history of one or more branches.  It's possible to create a "standalone" branch, which contains its own repository under the ##./.bzr## directory.  But here we are using a /shared repository/, which is very important for performance: because all branches created under ##$DEVHOME/emacs## will share history storage.  Not only does this save a lot of space, but it speeds up branch creation immensely because the history does not need to be copied each time.

Now, create a branch called ##trunk## that will just be a mirror of the mainline.  You'll never do any development in this branch; its job is just to reflect the upstream master:

      cd emacs/
      bzr branch sftp://<membername>@bzr.savannah.gnu.org/srv/bzr/emacs/trunk trunk

(Use ##http://bzr.savannah.gnu.org/r/emacs/trunk/## instead if you are not a committer and just expect read-only access.)

This first ##bzr branch## operation in a new repository may take many minutes --- people have reported 20 to 55 minutes.  At the end of the long wait, the repository will contain the whole history of the trunk, and the ##trunk## directory will contain the working files -- that is, an Emacs tree.

Next, we'll further safeguard that mirror by making it a "two-way" mirror.  We do this by "binding" the local trunk to the upstream master:

      cd trunk/
      echo "public_branch = sftp://<membername>@bzr.savannah.gnu.org/srv/bzr/emacs/trunk" >> .bzr/branch/branch.conf
      bzr bind sftp://<membername>@bzr.savannah.gnu.org/srv/bzr/emacs/trunk
      cd ..

(Again, use ##http://bzr.savannah.gnu.org/r/emacs/trunk## as the URL, in both instances above, if you are not a committer and just expect read-only access.  Also, note that on MS-Windows you need either to remove the quotes around the arguments to the ##echo## command or use a ported GNU ##echo##.)

If there are other branches you'd like to mirror, you can set them up in the same way.  In your local repository, you can efficiently branch them from the upstream branch, because very little history copying will be needed (as long as they themselves were branched from the upstream master).

[:InitializeBranch]
=== Initialize Your quickfixes Branch ===

You shouldn't do development work in the local ##trunk## mirror, since it is meant to be a pristine mirror of the upstream trunk.  Instead, you should create local development branches, where you will actually do your work.  Each will be based on the local trunk mirror (another way to say it is that the new branch will be "branched from" the mirror).

We recommend you create one branch for quick, one-off work: for example, you spot a typo in the README file and want to fix it.  You can just keep reusing this branch for small, self-contained changes.  (For larger tasks, such as a complicated bug fix or new feature that might require multiple commits and rounds of feedback, we recommend that you create a "task branch" dedicated to that fix or feature, described in [[#FeatureBranch]].)

      cd $DEVHOME/emacs
      bzr branch trunk/ quickfixes/

This creates a directory ##quickfixes## and populates it with the Emacs source tree.  This operation should be much faster than the first ##bzr branch##.

Remember this is all happening inside a shared repository.  In a Bazaar shared repository, all the branches share history, which means less spaced used and less time spent downloading history and file content; this makes Bazaar branches much more lightweight than CVS branches.   However, it still takes time to check out the source tree for a new branch (which we just did), and bootstrapping a new tree takes an annoyingly long time.  That is why we recommend that for small changes you keep reusing the same ##quickfixes## branch.  This way, after you have bootstrapped the ##quickfixes## branch once, the subsequent update, build, and commit steps of the update-edit-build-test-commit cycle all are very fast, as long as you continue working in the same branch. 
 
[:QuickFix]
[:OneOffChange]
== Workflow for a One-Off Change ==

First, refresh your mirror and then the working branch:

      cd $DEVHOME/emacs/trunk
      bzr pull                       # update from the upstream master (optional)
      cd ../quickfixes
      bzr merge                      # update from /trunk/ (optional)

The reason you use "##merge##" instead of "##pull##" in the task branch is that your task branch has local changes -- it has diverged (a bit) from the upstream master, and so any changes from upstream have to be merged with your changes.  A "pull", on the other hand, assumes that the destination is pristine, that is, that there are no local changes, and will error if it finds any.

The merge may fail due to a change that conflicts with your branch.  You'll need to fix the problem (looking for conflict markers and editing, just as in CVS), then

      bzr resolve -m file-you-changed ...      # Mark these conflicts as resolved.
                                               # Bazaar keeps track of unresolved conflicts,
                                               # and won't let you commit until all are resolved.

Once you have achieved a clean merge, commit it:

      bzr commit -m "Merge from mainline."

Note that you will need this ##commit## command even if there no conflicts were detected during the merge.

Now you start editing.  When you are done:

      bzr commit -m "Fix bla bla bla (closes Bug #1)."

Note that ##bzr## assumes you want to commit all changes in your workspace relative to the most recent commit in the branch.  This is almost always what you want after making a "quick fix".  If you have an unusually long commit message, you can use the ##-F## option instead of ##-m## (see [[#FeatureBranch]]).

##bzr## will automatically identify you as the committer and author of these changes (see [[#PersonalizingBzr]]).  If you are integrating another developer's work, you can use ##--author 'J. Other Hacker <jhacker@gnu.org.invalid>'## to identify JO Hacker as the author of the change.

[:SendABundle]
=== Creating Bundles for Review ===

If you want to send your change off for review, just create a "bundle", which is a file containing your change, in a special "merge directive" format that bzr understands but that also contains a human-readable diff:

      bzr send -o PATCHNAME.txt

where ##PATCHNAME## is some brief mnemonic name for the change.  Send a mail to the Emacs Devel list describing the change; attach ##PATCHNAME.txt## to that mail (please use MIME type ##text/plain##).  If the reviewers ask for further tweaks, repeat the cycle.  Edit the files, build and test as necessary, and 

      bzr commit -m "Address reviewer comments."

Now generate a new bundle:

      bzr send -o PATCHNAME-v2.txt

and send it off.

When revising your change, even though nobody else knows about your first commit yet, it is simplest to just make more commits.  (It's possible to "uncommit" in Bazaar, but it's not straightforward, and there's no compelling reason to do it if you're just revising a change.)  Although in the ##quickfixes## branch a plain ##bzr log## will show you all your changes, when you do plain ##bzr log## after your changes have been merged in ##trunk##, you will see only a merge commit log, which describes the whole series of commits for this task.  It will typically look something like "Merge: fix bla bla bla (closes Bug #1)."

[:PushToUpstream]
[:MergeToUpstream]
=== Merging Into the Upstream Master ===

Alternatively, if you are a committer, you may want to merge to the upstream master.  To do this, first merge to your mirror:

      cd $DEVHOME/emacs/trunk/
      bzr pull
      bzr merge ../quickfixes

and then commit

      bzr commit -m "Merge: fix bla bla bla (closes Bug #1)."

which automatically merges all your new commits to the upstream master, because the mirror is set up as bound branch.  In this process, updating your ##trunk## with ##bzr pull## is not really optional.  There is a race condition here, just as in CVS: if your mirror is not up-to-date because another developer has committed since you last updated, your commit will fail.  In this case you should abort the merge

      bzr revert

do another ##bzr pull##, merge from ##quickfixes## again, and commit.  After you successfully commit, the changes will appear grouped as a single merge in ##bzr log## on the mainline, but anyone can use ##bzr log -n0## to see the sub-commits (or "nested commits") within that merge.

It might occur to you to save some effort by just doing ##bzr push## directly to the upstream master from inside the ##quickfixes## branch:

      cd $DEVHOME/emacs/quickfixes
      bzr push sftp://<membername>@bzr.savannah.gnu.org/srv/bzr/emacs/trunk/

//Do not do this// --- it can cause history to be displayed in a strange way in the upstream master, any mirrors or branches of it, and your own branch later. Search for the word "hidden" in [http://lists.gnu.org/archive/html/emacs-devel/2009-11/msg01021.html this mail] for more details.

[:FeatureBranch]
== Workflow for a Feature Branch ==

When you are working on a task that touches many files, or requires a lot of thought and several stages, or for any reason may take a fair amount of time, it's a good idea to work on a separate branch to keep the changes from interfering with concurrent work (including your own!), and to keep the history separate from other work.  This makes review easier, too.  So we create a new branch, as described in [[#InitializeBranch]].

      cd $DEVHOME/emacs
      bzr branch trunk/ TASKNAME/
      cd TASKNAME

...where "TASKNAME" could be, e.g., the bug tracker ticket number of the bug you're trying to fix, or just a short, descriptive name for the task.

At this point, you're ready to do work.  You edit the source files, build and test as needed.  When you've accomplished a subtask, it's a good idea to stop and commit your work to the branch.  Here, you often have a larger ChangeLog than can comfortably be entered on the command line with ##-m##.  In this case, you put the log message in a file we'll call ##log-message.txt##.  Then

      bzr commit -F log-message.txt

You can also do ##bzr commit -m "blah blah blah"##, if your log message is short enough to fit on one line.  Remember, these commits are local: they just go to the task branch.  They don't affect the upstream master branch, and they don't even affect your local trunk mirror.  No one else sees them until later, when you send them upstream.

(Note: the Emacs project will continue to keep versioned ChangeLog files.  See [http://lists.gnu.org/archive/html/emacs-devel/2009-08/msg00334.html this mail] for more.)

If the task isn't done yet, keep working.  Edit yet more source files, until you reach a good stopping point:

      bzr commit -F another-log-message.txt

etc.  You can commit any time you reach a good checkpoint.  We recommend committing much more frequently than you might with CVS or Subversion.

From time to time you may wish to refresh the local trunk mirror, by
pulling in changes from upstream:

      pushd $DEVHOME/trunk/
      bzr pull
      popd

Because the trunk mirror is bound to upstream, and never has any local changes, you don't have to then commit what you just pulled --- all that upstream newness is now fully incorporated into your mirror.

And after refreshing the mirror, you'll want to get those changes into your task branch, by merging them:

      # Back in the TASKNAME branch
      bzr merge
      bzr commit -m "Merge from mainline."

(As described in [[#QuickFix]], the merge may fail due to conflicts, which you must resolve before you can commit.)

Once you have completed the task, you'll want to send it upstream.  You do this just as you would for a quick fix, either by [[#SendABundle]] or by [[#MergeToUpstream]].

At that point, you can delete your task branch...

      cd ..
      rm -rf TASKNAME/

...and update your mirror to receive your own changes:

      cd trunk/
      bzr pull
      cd ..

Note that you will still be able to see the entire history of your branch in the trunk by using ##bzr log -n0##, even though you've deleted the local copy.

When you decide to work on the next task, create a new task branch:

      cd $DEVHOME/emacs
      bzr branch trunk/ NEW_TASKNAME/

...and you know what to do from here.

[:Resources]
== Resources ==

If you've read this far, you should have a basic understanding of Bazaar, and how develop Emacs using Bazaar.  Below are some more resources that you or people you work with might find useful.

[:CasualDevs]
=== Resources for Casual Developers ===

Ideally, one-time contributors, beta testers, and anyone else needing to follow bleeding-edge Emacs would use the same workflow as described above for regular contributors.  However, in case that workflow feels like too much trouble, then [[BzrForEmacsCasualDevs]] offers a couple of slightly simpler setups.  

Even if you use one of those simpler setups at first, we still encourage you to migrate to the [[#RegularContributors]] workflow as soon as you can -- not because you necessarily plan to become a regular contributor, but because then your setup will be the same as what most other people are using, so they can better help you if you have questions.

[:OtherResources]
=== Other Resources ===

* [http://bazaar.canonical.com/ Bazaar home site]
* [http://doc.bazaar-vcs.org/bzr.dev/en/user-guide/index.html Bzr Users Guide]
* BzrQuickStartForEmacsDevs provides an alternate, more CVS-like, simpler workflow.
* [http://doc.bazaar-vcs.org/explorer/en/tutorials/foss-contribute.html Contributing to Free Software Projects Made Easy]  An excellent tutorial on using the Bazaar Explorer GUI.  Warning: the workflow advocated there is both more complex in some ways and slightly different from the one recommended in /Bazaar for Emacs Devs/.
* [http://doc.bazaar-vcs.org/migration/en/survival/bzr-for-git-users.html Bazaar for Git users]  A pretty complete overview of the differences between Git and Bazaar.  Contains a couple of glossaries of VCS terms, which are probably useful to those who don't know git, too.
* [http://doc.bazaar-vcs.org/migration/en/survival/bzr-for-cvs-users.html Bazaar for CVS users]  A whirlwind introduction to the features and command-line UI of Bazaar.  The workflow described is very similar to that of BzrQuickStartForEmacsDevs, and the latter document may be easier to understand because it concentrates on introducing the workflow rather than the wider field of distributed version control.
