;; -*- Emacs-Lisp -*-

;; Time-stamp: <10/25/2009 22:53:50 星期日 by ahei>

;;; dired-lis.el --- Letter isearch in dired-mode

;; Copyright (C) 2009 ahei

;; Author: ahei <ahei0802@126.com>
;; Keywords: dired letter isearch

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 3, or (at your option)
;; any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Commentary:

;; Letter isearch in dired-mode. Copy dired-lis.el to your
;; load-path and add to your .emacs:

;; (require 'dired-lis)

;; Then toggle letter isearch with M-x dired-lcs-mode. To enable
;; letter isearch in all dired-mode buffers, use M-x global-dired-lcs-mode.

;;; Code:

(require 'dired-isearch)

(defgroup dired-lis nil "Minor mode for making letter isearch in `dired-mode'.")

(defvar dired-lis-isearch-command 'dired-isearch-forward "Default isearch command.")
(defvar dired-lis-letter-list nil "Letter list which bind to `dired-lis-isearch-command'.")
(defvar dired-lis-last-isearch-command nil "Last isearch command in `dired-mode'.")
(defvar dired-lis-isearch-always nil "ISearch always in `dired-mode'.")
(defvar dired-lis-find-file-command 'diredp-find-file-reuse-dir-buffer "Command when press return in `dired-mode'.")
(defvar dired-lis-isearch-up-directory-command 'c-electric-delete "Command in `isearch-mode' when press C-h.")

(defvar dired-lis-mode-map (make-keymap) "keymap for letter isearch in `dired-mode'.")

(defcustom dired-lis-mode-hook nil
  "*Hook called when dired-lis minor mode is activated."
  :type 'hook
  :group 'dired-lis)

(defun dired-lis-get-letter-list()
  "Get letter list to bind to `isearch-command' in `dired-mode'."
  (let (i)
    (setq i ?0)
    (while (<= i ?9)
      (setq dired-lis-letter-list (append dired-lis-letter-list (list i)))
      (setq i (1+ i)))
    (setq i ?A)
    (while (<= i ?Z)
      (setq dired-lis-letter-list (append dired-lis-letter-list (list i)))
      (setq i (1+ i)))
    (setq i ?a)
    (while (<= i ?z)
      (setq dired-lis-letter-list (append dired-lis-letter-list (list i)))
      (setq i (1+ i)))))
(defun dired-lis-bind-letter()
  "Bind letter to `isearch-command' in `dired-mode'."
  (let ((map dired-lis-mode-map))
    (dolist (i dired-lis-letter-list)
      (define-key map (vector i) dired-lis-isearch-command))))

(dired-lis-get-letter-list)
(dired-lis-bind-letter)

(defun dired-lis-yank-char ()
  (let ((letter last-command-event))
    (if (and (equal major-mode 'dired-mode) (memq letter dired-lis-letter-list))
        (isearch-yank-string (char-to-string letter)))))

;;;###autoload
(define-minor-mode dired-lis-mode
  "Toggle letter isearch in `dired-mode'."
  :lighter " LIS"
  (unless (equal major-mode 'dired-mode)
    (error "Current major-mode is not dired-mode"))
  (if dired-lis-mode
      (setq hook-action 'add-hook)
    (setq hook-action 'remove-hook))
  (funcall hook-action 'isearch-mode-hook 'dired-lis-yank-char)
  (dired-lis-bind-letter)
  (if dired-lis-mode
      (run-hooks 'dired-lis-mode-hook)))

(defun dired-lis-on ()
  (if (equal major-mode 'dired-mode)
      (dired-lis-mode 1)))

;;;###autoload
(define-globalized-minor-mode global-dired-lis-mode dired-lis-mode dired-lis-on)

(defmacro def-dired-isearch-command (fun-name isearch-command search-always)
  "Make definition dired-lis-isearch command."
  `(defun ,fun-name ()
     (interactive)
     (setq dired-lis-last-isearch-command ,isearch-command)
     (setq dired-lis-isearch-always ,search-always)
     (call-interactively ,isearch-command)))

(defmacro def-dired-isearch-command-with-arg (fun-name isearch-command)
  "Make definition dired-lis-isearch command."
  `(defun ,fun-name (&optional search-always)
     (interactive "P")
     (setq dired-lis-last-isearch-command ,isearch-command)
     (setq dired-lis-isearch-always search-always)
     (call-interactively ,isearch-command)))

(def-dired-isearch-command-with-arg dired-isearch-forward-always? 'dired-isearch-forward)
(def-dired-isearch-command-with-arg dired-isearch-backward-always? 'dired-isearch-backward)
(def-dired-isearch-command-with-arg dired-isearch-forward-regexp-always? 'dired-isearch-forward-regexp)
(def-dired-isearch-command-with-arg dired-isearch-backward-regexp-always? 'dired-isearch-backward-regexp)
(def-dired-isearch-command dired-isearch-forward-temp 'dired-isearch-forward nil)
(def-dired-isearch-command dired-isearch-forward-always 'dired-isearch-forward t)
(def-dired-isearch-command dired-isearch-backward-temp 'dired-isearch-backward nil)
(def-dired-isearch-command dired-isearch-backward-always 'dired-isearch-backward t)

(defun dired-isearch-abort-or-find-file ()
  "According to current `major-mode' and `dired-lis-isearch-always',
execute `isearch-abort' or `diredp-find-file-reuse-dir-buffer'."
  (interactive)
  (let ((file (dired-get-file-for-visit)))
    (if (equal major-mode 'dired-mode)
        (if dired-lis-isearch-always
            (call-interactively dired-lis-find-file-command)
          (ignore-errors
            (call-interactively dired-lis-find-file-command))))
    (if dired-lis-isearch-always
        (if (file-directory-p file)
            (progn
              ;; TODO: when add following statement commented,
              ;; this command will not work well, why?
              ;; (isearch-abort)
              (call-interactively dired-lis-last-isearch-command))
          (isearch-abort))
      (isearch-abort))))

(defun isearch-done-del-or-up-directory ()
  "According to current `major-mode' and `dired-lis-isearch-always',
execute `isearch-done' or `dired-up-directory-same-buffer'."
  (interactive)
  (if (equal major-mode 'dired-mode)
      (progn
        (dired-up-directory-same-buffer)
        (if dired-lis-isearch-always
            (call-interactively dired-lis-last-isearch-command)
          (isearch-done)))
    (isearch-done)
    (call-interactively dired-lis-isearch-up-directory-command)))

(define-key isearch-mode-map (kbd "RET") 'dired-isearch-abort-or-find-file)
(define-key isearch-mode-map (kbd "C-h") 'isearch-done-del-or-up-directory)

(provide 'dired-lis)
