: [[image:iciclesimage]]

|| *Previous:*  IciclesIssues || '''[[Icicles]]''' || IciclesIssuesStale || IciclesIssuesClosed || 

----

== Open Icicles Issues ==

This page is for discussion of open issues you might have with library '''<tt>[[icicles.el]]</tt>''' ('''[[Icicles]]'''), including bugs.

See also:

* IciclesIssuesStale -- Issues that users did not follow up on -- never heard back from them. Could mean that the problem is not a problem; could mean that they gave up ;-).

* IciclesIssuesClosed -- Issues that were resolved. Bugs that were fixed. Explanations of non-bugs. Issues from this page (IciclesIssuesOpen) and IciclesIssuesStale are moved there when they are resolved.

* IciclesDiscussion -- General discussion about the library, feedback, possible uses, and possible enhancements.




=== How To Report an Icicles Issue ===

You can report an '''Icicles''' issue (bug) on this page -- please follow the formatting suggestion provided below ([[#HowToUseThisPage]]).

Alternatively, you can report an '''Icicles''' issue by email, by doing 
one of the following:

* Choose item '''Send Bug Report''' from MenuBar menu '''Icicles'''
* `##M-x icicle-send-bug-report##'
* (1) `C-h' from the minibuffer; (2) click button '''Icicles Options and Faces''' in buffer `*Help*'; (3) click link `##Send Bug Report##' in buffer `##*Customize Group: icicles*##'

Always mention your Emacs version and platform (e.g. Windows, GNU/Linux). If you aren't using the latest '''Icicles''' files, let me know which you are using. '''Icicles''' files each have an <code>Update #</code> field in the header, which identifies the file exactly.

The advantage of reporting a bug here is that others can share in the discussion. The advantage of reporting a bug by email is that I will see it immediately. Sometimes I don't notice a bug report on this page for a while.




=== Debugging Tips ===

1. If you use the debugger to report a backtrace, first delete all '''Icicles''' byte-compiled files, so that you use only the source files (##icicles*.el##) for debugging.

2. By default, in ''Icicle'' mode, `M-x' is bound to command '''`icicle-execute-extended-command''''. This is a multi-command, which presents certain advantages over the standard command bound to `M-x' in Emacs, `execute-extended-command' -- see [[Icicles - Multi M-x]] for details.

However, `icicle-execute-extended-command' has one disadvantage: an error backtrace is less informative, which can make debugging more difficult. If you want to see a normal backtrace at the point of error, then do what I do:

  M-: (define-key icicle-mode-map "\M-x" 'execute-extended-command)
  M-x set-variable debug-on-error t




[:HowToUseThisPage]
=== How To Use This Page ===

For readability, please separate each issue thread with `----' (horizontal line), and introduce each entry within a thread with `<code>[new]</code>'. 

Better yet, use this to separate threads (puts space before and after the horizontal line):

 <pre>

 </pre>
 ----
 <pre>

 </pre>






== (Open) Issues ==


''Enter your report below''




<pre>

</pre>
----
<pre>

</pre>

[new:]

Dear Drew,

I noticed a weird behavior of my Icy completion in e-lisp mode. When I invoke (lisp-complete-symbol), the prompt jumps to minibuffer and nothing happens. So I need to press additional TAB even if there is a sole completion.

In short, can I have the default completion behavior:
* first invocation of lisp-complete-symbol (`M-TAB') completes the symbol *in place* to a common root.
* second invocation jumps to minibufer and *completions* are automatically shown ( if I pressed `M-tab' twice I already want to see all available candidates and additional `TAB' is somewhat time consuming and disturbing).

Thanks. -- SpinuVit

[new:DrewAdams:2009-09-09 17:48 UTC]
I'm not sure what you mean. If I hit `M-TAB' with the cursor after the text `forward-para', then I see this in the minibuffer:

 Complete Lisp symbol: forward-para

If I then hit `TAB' (or `RET') once, the text in the buffer is completed to `forward-paragraph', since that is the sole completion. IOW, what you describe as wanting is pretty much what I see in this regard.

However, completion takes place in the minibuffer, so, as you say, completing to a common prefix among several completions is not done in the buffer -- you see it in the minibuffer instead.

I don't see a bug here, unless I'm missing something. But the '''Icicles''' behavior is different from the vanilla behavior. If you prefer the vanilla behavior, these are your options:

* quit ''Icicle'' mode, at least temporarily
* customize `icicle-redefine-standard-commands-flag' to `nil'

In the latter case, however, you will lose '''Icicles''' completion also for other things -- see the definition of function `icicle-redefine-standard-commands' for the list.

HTH -- DrewAdams


[new:]

My post was deleted :(  Accidentally probably.

There is clear inconsistency between `icicle-comint-dynamic-complete` and `icicle-lisp-complete-symbol`. 
The latest jumps directly to minibufer even if there is a sole completion or common root. Say I have icy-mod in my buffer, then `icicle-lisp-complete-symbol' will just jump to minibuf for one single letter!! 

My second part of the question was about popping \*completion\* buffer immediately after entering the minibuf (i.e. after second M-Tab). That for obviuous reasons - once one pressed M-TAB twice he defenitelly wants to see available completions.

I really hope the point above could be sorted out. Iciles offers an unique feature for completion and it would be a pity if these minor inconsistencies spoiled the story.

Many thanks. -- SpinuVit


[new:DrewAdams:2009-09-10 16:45 UTC]
1. No, your post was simply moved here, as the log said -- check RecentChanges to see changes.

2. Yes, `icicle-comint-dynamic-complete' and `icicle-lisp-complete-symbol' act differently.

3. Yes, if you hit `M-TAB' after `icy-mod', completion is done in the minibuffer. Just hist `TAB' or `RET' to complete to `icy-mode'. 

4. There is no pressing of `M-TAB' twice. That simply doesn't exist. In vanilla Emacs, repeating `M-TAB' scrolls `*Completions*'. In '''Icicles''' it does not -- use `C-v' or `M-v' to scroll `*Completions*'.

5. If you are asking why `M-TAB' doesn't show `*Completions*' initially, the answer is that that was the design choice. If you want to always show `*Completions*' initially, customize option `icicle-show-Completions-initially-flag'. You might also consider using <tt>[[icomplete+.el]]</tt>, to see the possible prefix completions in the minibuffer.

6. As I said, you can return to the vanilla Lisp-symbol completion, if you prefer that, by simply customizing ‘icicle-redefine-standard-commands-flag’ to ‘nil’.

HTH -- DrewAdams



[new:] 
(#4) In vanilla Emacs, first M-Tab completes the symbol in place, second (if any) opens the `*Completion*' buffer. 

In Icy-mode first M-Tab jumps to minibufer (without completing to common match). Next, `TAB' or `RET' will complete to common match, next RET (TAB) will place the candidate in original buffer,( will open the `*Completions*' and only next `TAB` will start cycling).

So Icicles adds 2-3 additional key strokes even in a trivial case when there is obvious one completion candidate.

wouldn't it be nicer if when there is only one completion candidate or common root just to insert it in place (as vanilla Emacs does), then next `M-TAB' will jump to minibuf and activate `*Completions*'? Looks like a reasonable and very efficient behavior to me.

(#5) Thanks for the tip of <tt>[[icomplete+.el]]</tt>. Setting `icicle-show-Completions-initially-flag' does not work for me. I remember it worked some time back, and it was rather annoying for M-x, buffer and file completion, so no way can usefully use it. For in-buffer completion, instead, it would be really useful to have a separate configuration flag. Don't you think? 

For in-buffer completion the number of candidates is usually small, and as I already said when you press second M-Tab you probably don't know that to type next and expect to see all available completions.

(#6) This is not an option. I like icicle `*completion*'  and not willing to abandon it because of a couple of additional keys (however annoying they can be). -- SpinuVit


[new:DrewAdams:2009-09-14 14:58 UTC]
(#4) Yes, it would be nicer, but it is not feasible, given the current design. When there are multiple candidates, I just call `completing-read'. There is no way to tell `completing-read' to also complete: it just opens the minibuffer to read with completion. Yes, it could be done, using `try-completion', as I did for `icicle-dabbrev-completion', but I probably won't do it, at least not anytime soon. This is just not my priority, sorry. But I will add it to my maybe-to-do list. As you say, there are typically few candidates, so the use of '''Icicles''' completion here is not that big an advantage -- vanilla `M-TAB' is a reasonable alternative, which you might prefer.

(#5) No, I don't think so. See #4.

(#6) You don't need to abandon '''Icicles''' completion in general, just because you forego it for in-buffer symbol completion. In addition, you might find `##C-M-/##' (`icicle-dabbrev-completion') useful in this context. It generally behaves more like what you want, I think. Its domain of candidates is not the same as `M-TAB', but it often DTRT. -- DrewAdams







<pre>

</pre>
----
<pre>

</pre>


----

|| *Previous:*  IciclesIssues || '''[[Icicles]]''' || IciclesIssuesStale || IciclesIssuesClosed || 


CategoryCompletion
