== TN ==
Gnu-emacs user.

I use Emacs from within Debian, Ubuntu, and Cygwin.

=== Using Emacs from within cygwin ===

<b>Problem:</b> aspell crashes with messages like:

    "^M.cset" could not be opened for reading or does not exist.lib/aspell/
    Aborted

Characteristic in this kind of error messages is the carry return character &quot;^M&quot;. Maybe, it is not even printed. Then the error messages often look like there is a file name missing. 

<b>Error description:</b> One cause of this error may be that the personal word list file or other configuration files of aspell in the user's home directory have DOS-line ends (CR-LF &quot;carry return&quot;+&quot;line feed&quot;).

The &quot;carry return&quot; is wrongly interpreted by aspell as configuration information. Often it is mistaken as a file name and the corresponding file can naturally not be found.

For example, this error occurs when you switch off the low-level CR-LF conversion of Cygwin. This may cause some trouble in finding the error since at a first glance it has nothing to do with emacs or aspell.

<b>Fix:</b> For each of the configuration files of aspell in your home directory (matching the file pattern .aspell*)

# load it into emacs
# change End-of-line style to unix by clicking onto &quot;(DOS)&quot; until it changes into &quot;:&quot;; This should mark the file as modified.
# save the file.


== Code-snippets ==
=== How does the element order of two lists differ? ===
<pre>
(defun get-permutation (l1 l2)
"Given two lists l1 and l2 return a list of integers li such that (`nth' i li)
is the index of element (nth i l1) in l2. Thereby, the elements of l1 and l2 are identified with `equal' and numbering of indices starts with zero (as for `nth')."
(let* ((i 0)
 (dict (mapcar '(lambda (x) (prog1 (cons x i) (setq i (1+ i)))) l1)))
  (mapcar
   '(lambda (x) (cdr (assoc x dict))) l2)))
</pre>

=== Add a filter function to dired ===
; Just the opposite of dired-omit:
<pre>
(add-hook 'dired-after-readin-hook 'dired-file-name-filter-handler)

(defvar dired-file-name-filter nil
  "*File name filter. Only files with name matching the regexp dired-file-name-filter are shown in the dired buffer.")

(make-variable-buffer-local 'dired-file-name-filter)

(defvar dired-filter-name-marker 16)

(defun dired-file-name-filter (filter)
  "Set variable `dired-file-name-filter' to filter."
  (interactive "sFile name filter regexp (or empty string for no filter):")
  (setq dired-file-name-filter (if (= (length filter) 0) nil filter))
  (dired-revert))

(define-key dired-mode-map [menu-bar regexp filter] '(menu-item "Filter" dired-file-name-filter :help "Set file name filter."))

(define-key dired-mode-map (kbd "% f") 'dired-file-name-filter)

(defun dired-file-name-filter-handler ()
  "To be hooked into `dired-after-readin-hook'."
  (when dired-file-name-filter
    (goto-char (point-min))
    (insert "Dired Filter Name Filter:" dired-file-name-filter)
    (let ((dired-marker-char dired-filter-name-marker))
      (dired-map-dired-file-lines
       '(lambda (name)
	  (unless (string-match dired-file-name-filter name)
	    (dired-mark 1)
	    )))
      (dired-do-kill-lines nil (concat "Filter" dired-file-name-filter " omitted %d line%s")))))
</pre>

[new:DrewAdams:2010-07-30 14:23 UTC]
Welcome to the wiki. -- DrewAdams


Thank you. Especially, for adding CategoryHomepage! Didn't find the [[CategoryHomepage|hints for homepage creation]] before. -- [[TN]]




----
CategoryHomepage
