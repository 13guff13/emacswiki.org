== TN ==
Gnu-emacs user.

I use Emacs from within Debian, Ubuntu, and Cygwin.

=== Using Emacs from within cygwin ===

<b>Problem:</b> aspell crashes with messages like:

    "^M.cset" could not be opened for reading or does not exist.lib/aspell/
    Aborted

Characteristic in this kind of error messages is the carry return character &quot;^M&quot;. Maybe, it is not even printed. Then the error messages often look like there is a file name missing. 

<b>Error description:</b> One cause of this error may be that the personal word list file or other configuration files of aspell in the user's home directory have DOS-line ends (CR-LF &quot;carry return&quot;+&quot;line feed&quot;).

The &quot;carry return&quot; is wrongly interpreted by aspell as configuration information. Often it is mistaken as a file name and the corresponding file can naturally not be found.

For example, this error occurs when you switch off the low-level CR-LF conversion of Cygwin. This may cause some trouble in finding the error since at a first glance it has nothing to do with emacs or aspell.

<b>Fix:</b> For each of the configuration files of aspell in your home directory (matching the file pattern .aspell*)

# load it into emacs
# change End-of-line style to unix by clicking onto &quot;(DOS)&quot; until it changes into &quot;:&quot;; This should mark the file as modified.
# save the file.


== Code-snippets ==
=== How does the element order of two lists differ? ===
<pre>
(defun get-permutation (l1 l2)
"Given two lists l1 and l2 return a list of integers li such that (`nth' i li)
is the index of element (nth i l1) in l2. Thereby, the elements of l1 and l2 are identified with `equal' and numbering of indices starts with zero (as for `nth')."
(let* ((i 0)
 (dict (mapcar '(lambda (x) (prog1 (cons x i) (setq i (1+ i)))) l1)))
  (mapcar
   '(lambda (x) (cdr (assoc x dict))) l2)))
</pre>

=== Add a filter function to dired ===
; Just the opposite of dired-omit:
<pre>
(add-hook 'dired-after-readin-hook 'dired-file-name-filter-handler)

(defvar dired-file-name-filter nil
  "*File name filter. Only files with name matching the regexp dired-file-name-filter are shown in the dired buffer.")

(make-variable-buffer-local 'dired-file-name-filter)

(defvar dired-filter-name-marker 16)

(defun dired-file-name-filter (filter)
  "Set variable `dired-file-name-filter' to filter."
  (interactive "sFile name filter regexp (or empty string for no filter):")
  (setq dired-file-name-filter (if (= (length filter) 0) nil filter))
  (dired-revert))

(define-key dired-mode-map [menu-bar regexp filter] '(menu-item "Filter" dired-file-name-filter :help "Set file name filter."))

(define-key dired-mode-map (kbd "% f") 'dired-file-name-filter)

(defun dired-file-name-filter-handler ()
  "To be hooked into `dired-after-readin-hook'."
  (when dired-file-name-filter
    (goto-char (point-min))
    (insert "Dired Filter Name Filter:" dired-file-name-filter)
    (let ((dired-marker-char dired-filter-name-marker))
      (dired-map-dired-file-lines
       '(lambda (name)
	  (unless (string-match dired-file-name-filter name)
	    (dired-mark 1)
	    )))
      (dired-do-kill-lines nil (concat "Filter" dired-file-name-filter " omitted %d line%s")))))
</pre>
=== List distinct matches of a regular expression ===
<pre>
(defun unique-matches (re &optional n b e)
  "Return a list of all distinct occurences of the regular expression RE within region from B to E. If B and E are nil then search from point to end of buffer. If called interactively the list goes to the kill-ring. The optional argument N is the parenthesized expression of RE which should be listed. It defaults to 0."
  (interactive "sRegular expression:\nMNumber of subexpression (default: 0):")
  (if (stringp n) (setq n (string-to-number n)))
  (if (and (called-interactively-p) (use-region-p))
      (progn
	(setq b (region-beginning))
	(setq e (region-end))))
  (let (ret)
    (save-excursion
      (unless n (setq n 0))
      (unless b (setq b (point)))
      (unless e (setq e (point-max)))
      (goto-char b)
      (while (search-forward-regexp re e 'noErr)
	(add-to-list 'ret (match-string-no-properties n)))
      (setq ret (nreverse ret))
      (message "Matches found: %s" ret)
      (if (called-interactively-p)
	  (progn
	    (kill-new (format "%s" ret))))
      ret)))
</pre>

== Load files from bash into emacs ==
Put the lines below into your <tt>.bashrc</tt>-file. After that you can load files from the bash command line with

<pre>
e FILENAME
</pre>

and pipe text into emacs via

<pre>
echo "Hello world" | e -
</pre>

Lines to be put into <tt>.bashrc</tt>:
<pre>
e() {
    local TMP="`mktemp /tmp/emacsstdinXXX`";
    if [[ "$1" == "-" ]]; then
	cat >"$TMP";
	emacsclient -a /usr/bin/emacs --eval "(let ((b (create-file-buffer \"*stdin*\"))) (switch-to-buffer b) (insert-file-contents \"${TMP}\"))";
	rm "$TMP";
    else
	emacsclient --no-wait -a /usr/bin/emacs "$@" &
    fi;
}
</pre>

== TeX-texify: Get everything done for a LaTeX-file ==
In AUCTeX-mode one uses <tt>`!TeX-command´</tt> to invoke the next compilation step for the current LaTeX-document.
Note, that this command is bound to the key-sequence <tt>C-c C-c</tt>.

If one has some citations and references in the document one needs to call <tt>`!TeX-command´</tt> multiple times.
Within the following code the command <tt>`!TeX-texify´</tt> is defined which runs as often as it is suggested by <tt>`!TeX-command´</tt>.

<pre>
(defun TeX-command-default (name)
  "Next TeX command to use. Most of the code is stolen from `TeX-command-query'."
  (cond ((if (string-equal name TeX-region)
			     (TeX-check-files (concat name "." (TeX-output-extension))
					      (list name)
					      TeX-file-extensions)
			   (TeX-save-document (TeX-master-file)))
			 TeX-command-default)
			((and (memq major-mode '(doctex-mode latex-mode))
			      (TeX-check-files (concat name ".bbl")
					       (mapcar 'car
						       (LaTeX-bibliography-list))
					       BibTeX-file-extensions))
			 ;; We should check for bst files here as well.
			 TeX-command-BibTeX)
			((TeX-process-get-variable name
						   'TeX-command-next
						   TeX-command-Show))
			(TeX-command-Show)))


(defvar TeX-texify-sentinel)
(make-variable-buffer-local 'TeX-texify-sentinel)
(defcustom TeX-texify-Show t "Start view-command at end of TeX-texify?" :type 'boolean :group 'TeX-command)

(defun TeX-texify-sentinel (&optional proc sentinel)
  "Non-interactive! Call the standard-sentinel of the current LaTeX-process.
If there is still something left do do start the next latex-command."
  (set-buffer (process-buffer proc))
  (funcall TeX-texify-sentinel proc sentinel)
  (let ((case-fold-search nil))
    (when (string-match "\\(finished\\|exited\\)" sentinel)
      (set-buffer TeX-command-buffer)
      (unless (plist-get TeX-error-report-switches (intern (TeX-master-file)))
	(TeX-texify)))))

(defun TeX-texify ()
  "Get everything done."
  (interactive)
  (let ((nextCmd (TeX-command-default (TeX-master-file)))
	proc)
    (if (and (null TeX-texify-Show)
	     (equal nextCmd TeX-command-Show))
	(when  (called-interactively-p 'any)
	  (message "TeX-texify: Nothing to be done."))
      (TeX-command nextCmd 'TeX-master-file)
      (and (null (equal nextCmd TeX-command-Show))
	   (setq proc (get-buffer-process (current-buffer)))
	   (setq TeX-texify-sentinel (process-sentinel proc))
	   (set-process-sentinel proc 'TeX-texify-sentinel)))))

(add-hook 'LaTeX-mode-hook '(lambda () (local-set-key (kbd "C-c C-a") 'TeX-texify)))
</pre>


[new:DrewAdams:2010-07-30 14:23 UTC]
Welcome to the wiki. -- DrewAdams


Thank you. Especially, for adding CategoryHomepage! Didn't find the [[CategoryHomepage|hints for homepage creation]] before. -- [[TN]]




----
CategoryHomepage
