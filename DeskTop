Saving session information in Emacs is made possible with GIT:desktop.el. More information is available from [[Manual:Saving Emacs Sessions]].

== Loading a Desktop Saved from a Previous Session at Startup ==

Desktop will load, at startup, the buffers you were editing when you last quit Emacs.

In Emacs 22+, add the following to your .emacs file:

    (desktop-save-mode 1)

You can add any extra variables you want saved across sessions to the list `desktop-globals-to-save'. For example:

    (setq history-length 250)
    (add-to-list 'desktop-globals-to-save 'file-name-history)

In Emacs 20 and 21, use code like the following, instead:

    (desktop-load-default)

    ;; Customization goes between desktop-load-default and desktop-read
    (setq history-length 250)
    (add-to-list 'desktop-globals-to-save 'file-name-history)

    (desktop-read)
    (setq desktop-enable t)



=== Specifying Files Not to be Opened ===

You can specify buffers which should not be saved, by name or by mode, e.g.:

   (setq desktop-buffers-not-to-save
        (concat "\\("
                "^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|^tags\\|^TAGS"
                "\\|\\.emacs.*\\|\\.diary\\|\\.newsrc-dribble\\|\\.bbdb"
	        "\\)$"))
   (add-to-list 'desktop-modes-not-to-save 'dired-mode)
   (add-to-list 'desktop-modes-not-to-save 'Info-mode)
   (add-to-list 'desktop-modes-not-to-save 'info-lookup-mode)
   (add-to-list 'desktop-modes-not-to-save 'fundamental-mode)

Since all lists will be truncated when saved, it is important to have
a high default history length, for example.  If that is not enough,
follow the suggestions in the doc-string of `desktop-globals-to-save':

: An element may be variable name (a symbol) or a cons cell of the form (VAR . MAX-SIZE), which means to truncate VAR's value to at most MAX-SIZE elements (if the value is a list) before saving the value.



== Automatically Saving the Desktop Periodically ==

I (PaulTipper) got hacked off with having Xorg lock up on me during an Emacs session, thus losing all the changes to my desktop, so I knocked up the following config (neatened a bit from my messy .emacs, hopefully without breaking it).  This gives you a persistent single desktop, as opposed to multiple ones, and saves it every 5 minutes, which hopefully means you don't lose too much when something less reliable flakes out further up the chain.

  (setq *foo-desktop-dir* (expand-file-name "~/.emacs.d/desktop"))
  (setq desktop-dir *foo-desktop-dir*)
  (setq desktop-path (list *foo-desktop-dir*))
  (desktop-save-mode 1) ;; Switch on desktop.el
  (setq *foo-desktop-file* (concatenate 'string desktop-dir
                                        "/" desktop-base-file-name))
  (setq *foo-desktop-lock* (concatenate 'string desktop-dir
                                        "/" desktop-base-lock-name))
  (defun desktop-in-use-p ()
    (and (file-exists-p *foo-desktop-file*) (file-exists-p *foo-desktop-lock*)))
  (defun autosave-desktop ()
    (if (desktop-in-use-p) (desktop-save-in-desktop-dir)))
  ;; Can be switched off with (cancel-timer *foo-desktop-saver-timer*)
  (add-hook 'after-init-hook
             (lambda ()
                     (setq *foo-desktop-saver-timer*
                           (run-with-timer 5 300 'autosave-desktop))))



== Auto-Saving the Desktop ==

I prefer autosaving the desktop whenever Emacs is idle. Tying it to `auto-save-hook' works pretty well for that.  I'm starting to work on a new package called [[DesktopRecover|desktop-recover.el]] with some improvements like this. Alternatively, you can just add something like this to your [[init file]]:  -- [[Doom]]

  (require 'desktop)
  (desktop-save-mode 1)
  (add-hook 'auto-save-hook (lambda () (desktop-save-in-desktop-dir)))




== Automatically Overriding Stale Locks ==

If you are using desktop-mode and your emacs crashes (or more likely,
your system crashes), then your desktop file will not be released, and
emacs will bother you about using it next time you start it up. To
avoid this, I wrote the following code to override the lock on a
desktop file if the indicated process is not still running.

{{{
;;; desktop-override-stale-locks.el begins here
(defun emacs-process-p (pid)
  "If pid is the process ID of an emacs process, return t, else nil.
Also returns nil if pid is nil."
  (when pid
    (let* ((cmdline-file (concat "/proc/" (int-to-string pid) "/cmdline")))
      (when (file-exists-p cmdline-file)
        (with-temp-buffer
          (insert-file-contents-literally cmdline-file)
          (goto-char (point-min))
          (search-forward "emacs" nil t)
          pid)))))

(defadvice desktop-owner (after pry-from-cold-dead-hands activate)
  "Don't allow dead emacsen to own the desktop file."
  (when (not (emacs-process-p ad-return-value))
    (setq ad-return-value nil)))
;;; desktop-override-stale-locks.el ends here
}}}

If anyone has a more robust implementation of `emacs-process-p,' feel free to provide it.

== Minimal Setup ==

This is for people who only want minimal session management functionality,
and don't want their previous sessions automatically restored at start-up.
Note that you need desktop-save-mode NOT ENABLED for this to work as
intended.

It works for me with one desktop, with more than one may need some tweaking.

{{{
;; use only one desktop
(setq desktop-path '("~/.emacs.d/"))
(setq desktop-dirname "~/.emacs.d/")
(setq desktop-base-file-name "emacs-desktop")

;; remove desktop after it's been read
(add-hook 'desktop-after-read-hook
	  '(lambda ()
	     ;; desktop-remove clears desktop-dirname
	     (setq desktop-dirname-tmp desktop-dirname)
	     (desktop-remove)
	     (setq desktop-dirname desktop-dirname-tmp)))

(defun saved-session ()
  (file-exists-p (concat desktop-dirname "/" desktop-base-file-name)))

;; use session-restore to restore the desktop manually
(defun session-restore ()
  "Restore a saved emacs session."
  (interactive)
  (if (saved-session)
      (desktop-read)
    (message "No desktop found.")))

;; use session-save to save the desktop manually
(defun session-save ()
  "Save an emacs session."
  (interactive)
  (if (saved-session)
      (if (y-or-n-p "Overwrite existing desktop? ")
	  (desktop-save-in-desktop-dir)
	(message "Session not saved."))
  (desktop-save-in-desktop-dir)))

;; ask user whether to restore desktop at start-up
(add-hook 'after-init-hook
	  '(lambda ()
	     (if (saved-session)
		 (if (y-or-n-p "Restore desktop? ")
		     (session-restore)))))
}}}

Then type `M-x session-save', or `M-x session-restore' whenever you want to
save or restore a desktop. Restored desktops are deleted from disk.




== Desktops as Bookmarks ==

The usual way to use a desktop is to (1) define (i.e., save) it as your final Emacs state, when you exit, and (2) restore it at the beginning of a new Emacs session. Library ##desktop.el ## provides for the possibility of having multiple saved desktops, but only one per directory. It searches your `desktop-path' to find a desktop file to load.

If you use '''[[BookmarkPlus|Bookmark+]]''', then you can have any number of desktops and use them as bookmarks, jumping from one to another at any time. You create a desktop bookmark using '''`C-x r K'''' (command '''`bookmarkp-set-desktop-bookmark'''').

Ordinary desktop files are used to record the information.
The bookmark itself records only the location of the desktop file. Bookmarked desktops are intended to be used only as bookmarks, not in the ordinary way (e.g. at Emacs startup), so the locations of the desktop files used are unimportant. In particular, you can have any number of (bookmark) desktop files per directory.




== Open Desktop Questions ==

[new]
I'm having trouble with desktop loading lazy loading, as my final line in .emacs is

   (plan)

So it loads planner, but then the planner buffer gets lost when desktop starts restoring the other buffers.
I tried to set desktop-restore-eager to 't, without any success. Any idea?

[new]
Yup, I've been able to solve this problem just using

  (add-hook 'desktop-after-read-hook 'plan)

[new]
When I try to add an array of strings to desktop-globals-to-save it saves it with (setq name-of-array "Unprintable entity"). Has anyone an idea of how to save an array in desktop?
[new]

[new]
I could set up desktop-files-not-to-save var for any buffer opening remote file not to be saved into .emacs.desktop file while invoking (desktop-save)
with its default value %%("^/[^/:]*:")%%.

In the same time, I also want save dired-mode buffers except buffers that show remote directories.
I found that desktop package only check its (buffer-file-name) and (buffer-name) whether he save a ceratain buffer or not, and unfortunately (buffer-file-name) has no meaning in dired-mode buffer(it just returns nil) so finally... dired-mode buffer displaying remote directory is saved in .emacs.desktop file.
How can I exclude those kind of dired-mode buffers?
--JoonhwanLee
----

Great entry! Thanks. I had been using recentf, but desktop is more up my alley -- TerrenceBrannon

----

On Emacs 21.4 (from Debian Etch) the desktop does not work as expected. The only way I could make it work
was with

  (load-library "/usr/share/emacs/21.4/lisp/desktop.elc")
  (setq desktop-enable t)

in my .emacs. -- Randolf Schultz

----

A simple example of moving the desktop file save locations ~/.emacs.desktop(.lock) to ~/.emacs.d/desktop/emacs.desktop(.lock) would be very helpful.

----
[new]
Is there any way of stopping the infuriating "Desktop saved in XYZ" messages? They almost always show up while I am trying to do something in the minibuffer. Saving is, after all, the expected result. By all means notify me if it all goes **** up, but there's no need otherwise.
----
[new]
Look, let's just be honest. It doesn't work, does it?

/usr/bin/emacs --no-desktop eventually results in
<pre>
Debugger entered--Lisp error: (error "Desktop file conflict")
  signal(error ("Desktop file conflict"))
  error("Desktop file conflict")
  desktop-save("/home/jg/.desktop/")
  desktop-save-in-desktop-dir()
  (lambda nil (desktop-save-in-desktop-dir))()
  run-hooks(auto-save-hook)
</pre>
and the request
<pre>
Current desktop was not loaded from a file.  Overwrite this desktop file? (y or n)
</pre>
which is is *impossible* to say 'n' to! (Pressing 'n' simply repeats the message.)

Let's just dump this in a sack in the local canal.
----

See SessionManagement for other similar packages.

----
CategoryDotEmacs CategoryPersistence
