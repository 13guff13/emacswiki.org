* Compact buffers after GC. (Perhaps using [http://permalink.gmane.org/gmane.emacs.diffs/115317])
* Undo list truncation
* Shrink regexp cache after GC
* GC messages
* Automatic deletion of undo list elements updating freed markers
* '''DONE''' Guile 2.0.0 compatibility
* '''DONE''' Fix backtraces ''(fixed Vlexical_binding bug)''
* '''DONE''' Use Guile facilities for control flow
* QUIT at each SCM_TICK
* '''DONE''' Use guile-snarf for subr definition
* Installation instructions
* Debugging instructions
* Eliminate forwarded variables (either use normal variables or implement symbol macros)
* '''DONE''' Remove unnecessary signal handlers (notably SIGXCPU, SIGPWR which bdw-gc uses)
* '''DONE''' Fix EMACS_INT formatting
* Find beta testers for non-GNU platforms
* Fix XSETSUBR syntax error for guile 2.0.x
* Determine required libgc and guile versions
* Test gdb configuration

Bug-reports, last updated 2013-03-24:

wip-bdw-gc branch:
# Start-up takes long because dumping doesn't work anymore. (Tip: During compilation, use another Emacs to byte-compile .el files, or it will take hours because each guilemacs instance takes so long to start.)
# When from my init file (cannot reproduce interactively) I do <code>(load "flymake")</code>, add my popup.el and AutoComplete (see https://github.com/auto-complete for both) directories to `load-path', and <code>(load "auto-complete-config") (ac-config-default)</code>, an invalid entry with a non-string car ends up in `load-history' and makes several things error. (Tip: Run <code>(delete-if (lambda (elt) (not (stringp (car elt)))) load-history)</code> to delete that entry.)
# Certain heavy operations (namely displaying a big e-mail in Gnus) cause a lock-up (or take very long, I waited several minutes before having to send SIGKILL).

wip-guile branch:
# <code>(let ((table (make-hash-table :test 'equal))) (puthash "1234567890" "foo" table) (gethash "1234567890" table)) => nil</code>. Some other (most?) keys work; I couldn't see a pattern in what does and doesn't work. If you use the same object for both keys (i.e. they're `eq') then it seems to always work, so don't let-bind keys if you want to test this.

Other than the above 4 issues, I could say I can't distinguish my Guile-Emacs build from a normal Emacs build, apart from the fact that it can run Scheme! <code>M-: (eval-scheme "(call-with-current-continuation (lambda (k) (k 42)))") RET => 42</code> (The return-value is an Elisp datum.) -- TaylanUB
