* Compact buffers after GC. (Perhaps using [http://permalink.gmane.org/gmane.emacs.diffs/115317])
* Undo list truncation
* Shrink regexp cache after GC
* GC messages
* Automatic deletion of undo list elements updating freed markers
* '''DONE''' Guile 2.0.0 compatibility
* '''DONE''' Fix backtraces ''(fixed Vlexical_binding bug)''
* '''DONE''' Use Guile facilities for control flow
* QUIT at each SCM_TICK
* '''DONE''' Use guile-snarf for subr definition
* Installation instructions
* Debugging instructions
* Eliminate forwarded variables (either use normal variables or implement symbol macros)
* '''DONE''' Remove unnecessary signal handlers (notably SIGXCPU, SIGPWR which bdw-gc uses)
* '''DONE''' Fix EMACS_INT formatting
* Find beta testers for non-GNU platforms
* Fix XSETSUBR syntax error for guile 2.0.x
* Determine required libgc and guile versions
* Test gdb configuration

Bug-reports from TaylanUB on 2013-03-10:

# Start-up takes long. (Tip: During compilation, use another Emacs to byte-compile .el files, or it will take hours because each guilemacs instance takes so long to start.)
# An invalid entry with a non-string car ends up in `load-history' and makes several things error. (Tip: Run <code>(delete-if (lambda (elt) (not (stringp (car elt)))) load-history)</code> to work around it.)
# Some hash-tables created with <code>:test 'equal</code> misbehave, not really using `equal' for their equality test. Test-cases like <code>(let ((table (make-hash-table :test 'equal))) (puthash "foo" "bar" table) (gethash "foo" table))</code> in M-: seem to work, and re-creating the problematic hash-tables via `setq' from M-: seems to fix some of them.
# Certain heavy operations (namely displaying a big e-mail in Gnus) cause a lock-up (or take very long, I waited several minutes before having to send SIGKILL).

Other than the above 4 issues, I could say I can't distinguish my Guile-Emacs build from a normal Emacs build, apart from the fact that it can run Scheme! <code>M-: (eval-scheme "(call-with-current-continuation (lambda (k) (k 42)))") RET => 42</code> (The return-value is an Elisp datum.)

2013-03-17: Points 1, 2, and 4 are re-producable on the wip-bdw-gc branch; 3 is unique to the wip-guile branch.
