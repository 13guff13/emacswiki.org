XML related implementations:

* [http://www.doxapest.co.id/index.php/pest-control-dan-anti-rayap Anti Rayap]
* [http://www.rumahparfum.com Parfum]
* [http://littletods.com/en/content/4-perlengkapan-bayi Perlengkapan Bayi]

XML editing environments:

* NxmlMode -- full xml parsing, highlighting, and schema validations within emacs.
* XmlMode -- including xml-lite
* PsgmlMode -- for any SGML document
== xml.el ==

This parser by EmmanuelBriot is part of Gnus and part of Emacs 21.

Here's a link to the file in Emacs's sources:

* GIT:xml.el

See also XmlParserExamples.

== xml-parse.el ==

This parser by JohnWiegley is available from his homepage.  It is
probably deprecated.  The data structure returned looks very much like
the one returned by xml.el, but element names are strings instead of
symbols.  On the other hand, it contains additional code to
pretty-print the xml data structures such that it can be used as an
XML indentation fix.

You can get the source from here:

* Lisp:xml-parse.el

== dom.el ==

The XML parsers will create a lisp data structure for you and they
both provide access methods to the structure.  Neither of the two
provides the DOM interface, however.  Here comes the DOM implementation
in dom.el -- you feed it the result of xml.el and then you can use
the DOM interface functions.

You can get the source from here:

* Lisp:dom.el

== xpath.el ==

If you work with a DOM, a lot of the work you will be doing involves
finding nodes in the document tree.  Instead of looping through it
yourself, writing lots of awkward and brittle code, you could use
XPATH to do this for you.  XPATH allows you to use path-like strings
to specify nodes.

The following code, for example, reads an XML file, creates a DOM, and
uses an XPATH to find chapter titles.

    (let* ((data (car (xml-parse-file "sample.xml")))
           (doc (dom-make-document-from-xml data)))
      (xpath-resolve (dom-document-element doc)
                     "descendant::chapter/child::title"))

You can get the source from here:

* Lisp:xpath.el
* Lisp:xpath-parser.el

This requires partial (or full) installation of CEDET (see below), as well as:

* Lisp:dom.el (same as above)


To use xpath.el you need Wisent, a Bison-like parser generator in Elisp. Wisent is part of the Semantic package (see: SemanticBovinator), but as far as I can see it is not in the released version of Semantic. You can get it along with the entire [[CEDET]] beta tar-ball: http://sourceforge.net/project/showfiles.php?group_id=17886&release_id=192965

Note that most of the xpath-parser is generated by a BNF file:

* [[XPath BNF]]

The xpath-parser requires wisent, which is part of the
SemanticBovinator (CVS only, at the end of 2001).

: Uh, oh! I modified the s-expr grammar in xpath-parser.el without being aware of this ... :-/  -- OliverScholz

== xslt.el ==

XSLT and XPATH together make an XSL engine.  I'm planning to write an
XSLT implementation for elisp based on the DOM implementation.  --
AlexSchroeder

: Alex, are you aware of http://adrian-fh98.web.unair.ac.id which may be relevant in this context -- AdrianAichner

Related links:

* http://www.w3.org/TR/xslt -- the standard

----
CategoryCode
CategoryXML
CategoryExtensions
CategoryData
