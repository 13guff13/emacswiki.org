'''Unit tests''' are supplementary programs and/or source code that you create that will automatically test the functionality and correctness of your code modules. They are a way of formalizing the assumptions you have about the behavior of your code. You can then validate your code and code changes at any time, and know exactly when a code change breaks existing code.

This page discusses unit-testing of EmacsLisp scripts and programs.

== Testing frameworks ==

Frameworks are good for making unit test writing and execution easier. The following unit test frameworks exist for Emacs Lisp:

'''[http://github.com/masatake/ert/blob/master/ert.el ert.el]''' ([ErtTestLibrary Elisp Regression Testing]) by Christian M. Ohler provides facilities for defining and running test cases, reporting the results, and debugging test failures interactively.

'''[[EmacsLispExpectations|el-expectations.el]]''' by rubikitch is a small framework focused on simplicity and readability. It is modeled after [http://expectations.rubyforge.org Ruby expectations] and works with '''[[EmacsLispMock|el-mock.el]]''', a DSL based mock/stub framework.

'''[[ETest]]''' (Emacs Testing Framework) by Phil Jackson also works with [[EmacsLispMock|el-mock.el]]. [http://www.shellarchive.co.uk/content/etest.html Manual].

'''ElkTest''' by Nikolaj Schumacher is a framework for testing your Emacs Lisp code like your Java code with JUnit.

'''[[EmacsLispForRuby|El4r]]''' (Emacs Lisp for Ruby) leverages Ruby's ##Test::Unit## framework by using the EmacsRuby extension language. You write unit tests in EmacsRuby, while the code is in EmacsLisp. In other words, you can treat the EmacsLisp code as a black box and feed it inputs and check the outputs using EmacsRuby.

'''ElUnit''' is an experimental framework by PhilHagelberg. Its output mimics Ruby's ##Test::Unit##, and test writing requires typing ##(assert ...)##. Tests are divided up into suites for logical grouping and sharing setup hooks. It is deprecated in favor of ##ert.el##.[http://article.gmane.org/gmane.emacs.devel/122304]

'''[http://panix.com/~tehom/my-code/regress.el regress.el]''' by [TomBreton Tom Breton]'s is a "regression test harness for Emacs Lisp code". In this framework, test comparisions can be done by equal (default) and user defined test conditions. The last developed version is from 1999.

'''[http://www.wanglianghome.org/svn/test/test.el test.el]''' is developed for testing operations on a buffer (but can be used to test operations unrelated to buffers). [http://www.wanglianghome.org/images/test.png Screenshot].

'''[[Lisp:unit-test.el|unit-test.el]]''' by MarkTriggs reports the pass/fail status of your unit tests (in any language). You need to define a function that runs your unit tests and returns non-##nil## if they pass. Depending on the output, it will display green or red "light" graphic icon (##xpm##) on the Emacs window mode line.

== Manually testing (without a framework) ==

'''Where do you put your unit tests?''' In EmacsLisp, you can sprinkle your code with tests. Here is an example:

    (defvar my-unit-testing nil)
    (eval-when-compile
     (setq my-unit-testing t))

Thus, when your code is being compiled, the test variable is set to ##t##. When a user loads a compiled ##.elc## file, the ##my-unit-testing## variable will remain set to ##nil##.

Then define your functions, and '''add tests right after the ##defun##''':

    (defun my--get-category (char)
      "Return category for CHAR."
      (let ((categories my--categories)
        (set (char-category-set char))
        result)
        (while (and (not result) categories)
          (let ((category (symbol-value (car categories))))
        (if (aref set category)
            (setq result category)
          (setq categories (cdr categories)))))
        result))

    (when my-unit-testing
      (assert (eq my--category-l (my--get-category ?a)))
      (assert (eq my--category-r (my--get-category ?A))))

(##assert## is a macro from <tt>[CommonLispForEmacs cl.el]</tt>. You can load it with ##(require 'cl)##.)

Thus, the tests will still be compiled into your ##.elc## files, and ##my-unit-testing## will be evaluated a lot while you load the file, but since no other code gets executed, loading the ##.elc## files is still much faster than the ##.el## files -- all the tests are skipped. Still, the ##.elc## will contain the unit test code.

'''Instead of using a variable, you can wrap all tests in a macro, of course.''' The simplest solution is to do away with the ##my-unit-testing## variable and wrap all tests in an ##eval-when-compile## macro. This will save a bit of time while loading the compiled files, because the ##.elc## will no longer contain the unit test code.

== Discussion ==

That there is so much interest in this looks great, but could please someone start making a comparision of the different approaches? What does they support? How easy are they to use? Could more simple packages be built upon more general packages? Etc.

[new]
One question: do any of these packages support TAP (the [http://testanything.org/wiki/index.php/Main_Page Test Anything Protocol])? I don't see a single reference to it.

[new]
Does anybody know any mock or stub frameworks in Emacs Lisp? Because many Emacs Lisp functions have side-effects, a mock / stub framework is essential to unittest in Emacs Lisp. -- [[rubikitch]]

[new]
I intended to create ##mock.el##, but I didn't yet ... [[Matsuyama]]

----
CategoryCode
