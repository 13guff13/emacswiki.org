[[zh:全屏模式]]
== Emacs Frame Properties ==

The following should work in Emacs 23:

    (defun toggle-fullscreen (&optional f)
      (interactive)
      (let ((current-value (frame-parameter nil 'fullscreen)))
           (set-frame-parameter nil 'fullscreen
                                (if (equal 'fullboth current-value)
                                    (if (boundp 'old-fullscreen) old-fullscreen nil)
                                    (progn (setq old-fullscreen current-value)
                                           'fullboth)))))

    (global-set-key [f11] 'toggle-fullscreen)

    ; Make new frames fullscreen by default. Note: this hook doesn't do
    ; anything to the initial frame if it's in your .emacs, since that file is
    ; read _after_ the initial frame is created.
    (add-hook 'after-make-frame-functions 'toggle-fullscreen)

It does not work on MS Windows, see below for that.

== Platform-specific methods ==

These methods may be useful with older versions of Emacs, or ports where the 'fullscreen' frame parameter is not supported.

=== Fullscreen on MS Windows ===

If you're using MS Windows, and want to use "real fullscreen", i.e, getting rid of the top titlebar and all, see
w32-fullscreen at the site for [http://www.martyn.se/code/emacs/darkroom-mode/ darkroom-mode]

Alternatively, a patch is available [https://github.com/erikcharlebois/patches/blob/master/emacs/w32_set_fullscreen.patch here] 
that makes the fullscreen frame parameter really fullscreen on Windows.

To get a maximized window you can use: (w32-send-sys-command #xf030)

Attention!
If you want that emacs starts maximized, you have to put this code into your .emacs file:
{{{
(defun jbr-init ()
  "Called from term-setup-hook after the default
terminal setup is
done or directly from startup if term-setup-hook not
used.  The value
0xF030 is the command for maximizing a window."
  (interactive)
  (w32-send-sys-command #xf030)
  (ecb-redraw-layout)
  (calendar)
)
(setq term-setup-hook 'jbr-init)
(setq window-setup-hook 'jbr-init)
}}}

=== X Windows ===
==== Send X Messages to the Window Manager ====

     (defun fullscreen ()
       (interactive)
       (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
	    		 '(2 "_NET_WM_STATE_FULLSCREEN" 0)))

Or to only maximize window:

     (defun fullscreen (&optional f)
       (interactive)
       (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
	    		 '(2 "_NET_WM_STATE_MAXIMIZED_VERT" 0))
       (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
	    		 '(2 "_NET_WM_STATE_MAXIMIZED_HORZ" 0)))


==== External program: wmctrl ====

If you want to bind F11 to toggle full-screen, here is what you need:

* install wmctrl (sudo apt-get install wmctrl)

* edit your .emacs and add:

    (defun switch-full-screen ()
      (interactive)
      (shell-command "wmctrl -r :ACTIVE: -btoggle,fullscreen"))

    (global-set-key [f11] 'switch-full-screen)

That does the trick, 
and now you are GNOME HIG compliant :)

* Alternate definition, which mimics the 'maximize' button:

    (defun switch-full-screen ()
      (interactive)
      (shell-command "wmctrl -r :ACTIVE: -btoggle,maximize_vert,maximize_horz"))

* Rather than using :ACTIVE: which can do the wrong thing when you start Emacs and other programs at the same time:

    (defun switch-full-screen ()
      (interactive)
      (shell-command (concat "wmctrl -i -r " (frame-parameter nil 'outer-window-id) " -btoggle,maximize_vert,maximize_horz"))


==== External program: devilspie ====

http://patrick.wagstrom.net/weblog/linux/full-screen-emacs.xml

    ;;
    ;; ~/.devilspie/emacs.ds
    ;;
    (if (or (contains (window_class) "emacs") (contains (window_class) "Emacs"))
        (undecorate fullscreen))

==== Gnome Keyboard Shortcuts====

If you use GNOME you can assign a Keyboard Shortcut to toggle Full Screen or not. Just go to 

System => Preferences => Keyboard Shortcuts

And bind the option "Toggle fullscreen mode" to a key which can be used when using Emacs to toggle full screen or not.

The disadvantage of this is that if you bind F11 so that emacs matches other programs, then the window manager handles the resize/de-chroming and the application does not get a chance to modify it's appearance. For example, Mozilla Firefox will not set its toolbars to auto-hide.

=== Fullscreen on OS X ===
[http://citizen428.net/archives/432-Fullscreen-Emacs-on-MacOS-X.html A step by step guide] on patching Cocoa Emacs (based on the 2 links directly below), including a download link to a version of Emacs 24.0.50 with fullscreen support.

The procedure described at http://www.stratospark.com/blog/2010/fullscreen_emacs_on_osx.html is working as of late June 2010. 

http://www.sanityinc.com/full-screen-support-for-cocoa-emacs-on-osx (Jan 2010) has details of a patch which works well with Emacs 23.1.95 pretest.

The function at the top of the page should work with CarbonEmacs and Aquamacs but fullscreen functionality has not made it into Emacs-23 as of early 2009.

The following line can be added to your .emacs
{{{
(set-frame-parameter nil 'fullscreen 'fullboth)
}}}

The current CVS version of Emacs-23 does not support the above technique.

Use [ftp://ftp.math.s.chiba-u.ac.jp/emacs/ Emacs 23 Mac Port Patch].

The following line can be added to your .emacs
{{{
(set-frame-parameter nil 'fullscreen 'fullboth)
}}}

Use [http://github.com/jmjeong/my-dot-emacs/blob/master/maxframe.el patched maxframe.el]. You can see the original version from [http://files.emacsblog.org/ryan/elisp/maxframe.el maxframe.el].

{{{
(defvar my-fullscreen-p t "Check if fullscreen is on or off")

(defun my-toggle-fullscreen ()
  (interactive)
  (setq my-fullscreen-p (not my-fullscreen-p))
  (if my-fullscreen-p
	  (restore-frame)
	(maximize-frame)))

(global-set-key (kbd "M-RET") 'my-toggle-fullscreen)
}}}

=== Toggle fullscreen - linux and windows ===

{{{
(defvar my-fullscreen-p t "Check if fullscreen is on or off")

(defun my-non-fullscreen ()
  (interactive)
  (if (fboundp 'w32-send-sys-command)
	  ;; WM_SYSCOMMAND restore #xf120
	  (w32-send-sys-command 61728)
	(progn (set-frame-parameter nil 'width 82)
		   (set-frame-parameter nil 'fullscreen 'fullheight))))

(defun my-fullscreen ()
  (interactive)
  (if (fboundp 'w32-send-sys-command)
	  ;; WM_SYSCOMMAND maximaze #xf030
	  (w32-send-sys-command 61488)
	(set-frame-parameter nil 'fullscreen 'fullboth)))

(defun my-toggle-fullscreen ()
  (interactive)
  (setq my-fullscreen-p (not my-fullscreen-p))
  (if my-fullscreen-p
	  (my-non-fullscreen)
	(my-fullscreen)))
}}}

== Starting in fullscreen mode ==

[new]
At least on my Ubuntu installation, directly calling (toggle-fullscreen) from the .emacs gives weird layout behaviour.
It seems that window resizes have to take place after something which is evaluated after the .emacs, so this did the job for me:
{{{
(run-with-idle-timer 0.1 nil 'toggle-fullscreen)
}}}

Note that an after-init-hook didn't work for me.

[new:TimRetout:2010-07-09 16:50 UTC]
There is also the --fullscreen command line option. -- TimRetout

== Q&A ==

** Under Fvwm 2.5.23 I get a little band of background at the bottom
   of the screen --- any solution for that?  I have yet to try it with
   another WM.

** The solution is to add Style "*" <nowiki>ResizeHintOverride</nowiki> to your config
** This also occurs under Fluxbox 1.0; the current git repository
fixes this problem
** Not a problem under KDE 3.5.7
** Echo area cannot be displayed after fullscreen call,for windows, maybe ”(w32-send-sys-command 61488)“ should be used to maximize emacs window

==See also==
See also [[Fullscreen]].
