In Emacs, sorting can mean two things: sorting text in a [[buffer]] or sorting any [[list]] of EmacsLisp objects.


[:SortingText]
== Sorting as Text Editing ==

You can sort lines, paragraphs, pages.  You can sort by fields, columns or even [[regexp]]. There are predefined Emacs commands to all of these things.

; `M-x sort-lines': Sort lines in the region.
; `C-x h M-x sort-lines': Sort all lines in the buffer.
; `C-u M-x sort-lines': Sort lines in the region in reverse order.
; `M-x sort-numeric-fields': Sort lines in the region numerically.
; `M-x sort-numeric-fields M-x reverse-region': Sort lines numerically in reverse.
; `M-x sort-paragraphs': Sort by paragraph in region.
; `C-u M-x sort-paragraphs': Sort paragraphs in reverse.
; `M-x sort-pages': Sort by page in region.
; `C-u M-x sort-pages': Sort pages in reverse.
; `C-u 2 M-x sort-field': Sort lines by second field in region, where fields are separated by any whitespace.
; `C-u 2 M-x sort-field M-x reverse-region': Sort lines by second field in reverse.
; `M-x sort-columns': Sort the lines the region "covers" using the columns between region beginning and end.
; `C-u M-x sort-columns': Sort lines the region "covers" in reverse using the columns in the region.

In addition to these [[command]]s, there are other EmacsLisp functions available for sorting text.

See nodes `Sorting' in the EmacsManual and `Sorting' in the Elisp manual, for details: Manual:Sorting.



[:SortFunction]
== The Emacs-Lisp `sort' Function ==

The function `sort' is very general.  You can use it to sort any [[list]]. You simply pass it the list and a binary predicate, and it returns the list sorted. Be aware, however, that this is a destructive function: it operates by side effect, modifying the input list.

See node `Rearrangement' in the Elisp manual for details: Manual:Rearrangement.

See also: ApplesAndOranges for a way to combine simple predicates for sorting.


----


----
CategoryEditing
