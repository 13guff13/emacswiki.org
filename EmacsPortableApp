

== EmacsPortable.App Introduction  ==
!EmacsPortable.App attempts to make a portable version of Emacs that
runs off a USB drive under either Windows, or Mac OSX.  

To install before a release, please follow [[*Using%20!EmacsPortable.App%20before%20a%20release][the directions for using
!EmacsPortable.App before a release]]. 
== EmacsPortable.App Idiosyncrasies ==
=== Home Directory configuration ===
The <tt>HOME</tt> Directory is where Emacs stores the <tt>.emacs</tt> file;  Other
emacs programs also store information here. !EmacsPortable.App has a
few options for home directories
==== USB home directory ====
If the <tt>Data/ini/!EmacsPortableApp.ini</tt> file contains an ini Home Entry 
<pre>
  [EmacsPortableApp]
  Home=USB:/Documents/
</pre>
The USB directory is changed for what !EmacsPortableApp deems is the
usb directory.  This setting uses the !PortableApps Documents Directory
as the home-directory.  This is slightly different depending on the
platform. 

The advantage of this methodology is that under windows, Emacs can be
copied to the hard-drive to speed up the run-time, and the
initialization from the hard drive 

==== EXEDIR home directory ====
If the <tt>Data/ini/!EmacsPortableApp.ini</tt> file contains an ini Home Entry 
<pre>
  [EmacsPortableApp]
  Home=EXEDIR:/Data/Home
</pre>
The EXEDIR directory is changed for the base directory that
!EmacsPortable.App is run from.

The advantage to this methodology is that you can drag and drop Emacs
and all your customizations will be dragged with it.
==== Home if Exists ====
If the <tt>Data/ini/!EmacsPortableApp.ini</tt> file contains a full path, then
the home is set when that file exists.  For example:
<pre>
  [EmacsPortableApp]
  Home=c:\
</pre>

will set the home directory to <tt>c:\</tt> on Windows computers.  Currently,
this is supported only on windows.
==== System home directory ====
If the <tt>Data/ini/!EmacsPortableApp.ini</tt> file contains an ini Home Entry
that doesn't start with either <tt>EXEDIR:/</tt> or <tt>USB:/</tt>, and doesn't
exist then the
original home directory is maintained.
<pre>
  [EmacsPortableApp]
  Home=Set as original
</pre>
==== Selecting the Home directory with !EmacsOptions.exe ====
When using !EmacsOptions.exe, you do not have to worry about selecting
which type of file is used.  If you select a directory on the USB
drive, the !EmacsPortableApp is updated accordingly.  If you select
location within the portable app directory, the <tt>EXEDIR</tt> is replaced.
Note that any where else may change depending on the computer you use.
=== Emacs-only directory aliases ===
Emacs has a list of aliases that are convinces, but do not correspond
with an actual directory.  
|| Alias       || True Directory          || Directory Purpose                   ||
|| <tt>/tmp/</tt>     || Temporary Directory     || Temporary Directory.                ||
|| ~ahk/       || Other/source/ahk        || AHK Sources Directory               ||
|| ~app/       || App/                    || !EmacsPortable.App Application Files ||
|| ~doc/       || USB Drive:/Documents    || Documents Directory                 ||
|| ~el-get     || Data/lisp/el-get        || El Git package Repository           ||
|| ~elpa/      || Data/lisp/elpa          || Elpa Package Repository             ||
|| ~ep/        || .                       || !EmacsPortable.App Directory         ||
|| ~h/         || System Home Directory   || System Home Directory               ||
|| ~ini/       || Data/ini                || !EmacsPortable.App ini files         ||
|| ~kick/      || Data/lisp/kicker        || Kicker Directory                    ||
|| ~nsi/       || Other/source/nsi        || NSIS Sources Directory              ||
|| ~pa/        || USB Drive:/!PortableApps || Portable Apps                       ||
|| ~rcp/       || Data/lisp/kicker/rcp    || extra el-get recipies Directory     ||
|| ~saves/     || Data/saves              || !EmacsPortable.App Saves             ||
|| ~shared/    || Data/start/shared       || Shared Customizations               ||
|| ~site-lisp/ || App/site-lisp           || Site Lisp Directory                 ||
|| ~snips/     || Data/snippets           || !YaSnippets                          ||
|| ~src/       || Data/src                || !EmacsPortable.App lisp source files ||
|| ~start/     || Data/start              || !EmacsPortable.App Customizations    ||
|| ~system/    || Data/start/system       || System-based Customizations         ||
|| ~themes/    || Data/themes             || Emacs 24 Theme Directory            ||
|| ~usb/       || USB Drive               || USB Drive                           ||
|| ~user/      || Data/start/user         || User-based Customizations           ||

Other aliases are added ~el-get/package/elpa is changed to ~elpa, as
if it were a symbolic link.  Since symbolic links are not supported in
windows, this is handled by emacs only.


=== Font installation, if needed ===
Will install specific fonts, if needed.
==== STARTED Allow Mac to install specific fonts. ====
== Running !EmacsPortable.App ==
=== Running Debug under windows ===
Under windows, debug mode starts <tt>gdb</tt> if found.  Additionally, if
<tt>App/gdbinit</tt> is found, gdb sources this before running emacs.  You
can download an appropriate gdbinit for emacs [http://bzr.savannah.gnu.org/lh/emacs/trunk/annotate/head:/src/.gdbinit here].

== Customizing and using your own packages ==
The settings in !EmacsPortable.app were originally fork of the literate
starter kit by [https://github.com/eschulte Eric Schulte] (some of my documentation text is probably
reminiscent of . Now my philosophy is a little more
liberal in providing a customized emacs that does not include too much
startup customizations, but allow you to pull your own startup
customizations if you wish, or test out other people's startup
settings.  

The defaults built into the !EmacsPortable.App are only the beginning
of most users customization of Emacs to suite their needs.
!EmacsPortable.App provides provides a number of places for additional
user and system specific customization.  These are designed in such a
way that it will be easy for you to continue tracking your own
personal customization inside !EmacsPortable.App while retaining your
ability to pull down general updates to !EmacsPortable.App without conflict.
=== Startup Customization ===
The <tt>!EmacsOptions.exe</tt> allows you to set Emacs startup options via a
GUI.  This is mirrored in the <tt>Data/ini/!EmacsPortable.ini</tt> file.
==== Emacs Version ====
This selects the version of Emacs that !EmacsPortable.App will be
running.  This is useful if you run different versions of Emacs to
possibly test lisp code, or use features not previously used.
==== Register Org-protocol ====
This registers Org-protocol and also associates org-protocol actions
with adobe acrobat/adobe acrobat reader.
==== Startup Font, Color, Geometry ====
This allows the initial font/color and gemoetry options to be
specified so that emacs will startup with these options enabled.
These are called from the command line and do not affect the
registry.
==== Proxy ====
This allows proxy settings to be dynamically determined based on your
location.  Your password is encrypted based on the location as well.
This works on windows only.
==== Setting Startup Environment variables ====
By creating or editing an environment ini file at
<tt>Data/ini/Environment.ini</tt>, startup environmental variables may be set.
For example, if you use the <tt>colemak</tt> keyboard with the ergoemacs
package, the following ini-file will set the
<tt>ERGOEMACS_KEYBOARD_LAYOUT</tt> to the proper value

<pre>
[Environment]
ERGOEMACS_KEYBOARD_LAYOUT=colemak
</pre>
==== Determining if Emacs Binaries should be zipped ====
Emacs binaries can be zipped to save space.  This requires that the
emacs binaries are extracted to the temporary directory before
running.  I have found that running emacs in this manner is faster
than running it on the USB stick alone.  If not selected the binaries
will run from the usb drive.  If you are running !EmacsPortable.App locally
==== LiberKey Support ====
!EmacsPortable.App will add !LiberKey File associations when it locates
!LiberKey, and the !LiberKey support is checked.  Note that you should
restart !LiberKey and make sure that the associations actually
installed correctly.
==== Associations Support ====
!EmacsPortable.App handles file associations in the following ways:
* Associations through !LiberKey
* !PortableApps.com specifictaion (when !PortableApps supports association)
* Registering Associations when running.
When changing associations under windows, the Mac <tt>Info.plist</tt> xml
file is also updated.
=== General Customization ===

* <b>git branch </b> --  The first step to user-specific customization is (like
in any git project) to MAKE A BRANCH FOR YOUR LOCAL
CHANGES.  Save the master branch for pulling down new
versions of the starter kit, and save all of your
personal information in a personal branch.  That way
you never have to worry about accidentally =git
push='ing up a patch with all of your gnus email
passwords.

* <b>Overall !EmacsPortable.App configuration </b> --  Your personal
!EmacsPortable.App configuration can be placed in the <tt>Data/init</tt>
directory.  This directory will be added to the load-path it any
elisp or org-mode w/embedded elisp files in it will be loaded.

* <b>User specific config </b> --  Your personal configuration information can
be stored in a user-specific-config file in
<tt>Data/init/user/$USER.org</tt> or <tt>Data/init/user/$USER.el</tt>.  This is
the file named after your user with the extensions <tt>.el</tt> or
<tt>.org</tt> [2].  This should be your windows log-in name, or under a
mac if you're unsure of your user name evaluate the
following code block to find out.

<pre>
echo $USER
</pre>

If your configuration starts to feel cramped in a single file
(although with the nested headlines of an Org-mode file, that
could take a while) and you want to stretch your config's legs,
you can also create a directory named after your system user
name, like <tt>Data/init/user/$USER</tt>.  If a such a directory exists,
it will be added to the load-path, and any elisp or org-mode
w/embedded elisp files in it will be loaded.

* <b>System specific config </b> --  Finally, you may want to configure
different settings for different machines.  The Starter Kit will
look for a file named after the current hostname ending in <tt>.el</tt>
or <tt>.org</tt> in the <tt>Data/init/system/</tt> folder which will allow
host-specific configuration.  If you're unsure of your hostname
the following can be executed to find out.
<pre>
hostname
</pre>
In windows, the hostname is found by right-clicking on
my-computer and clicking on <tt>Properties</tt>.  After that, click on
the <tt>Computer Name</tt> tab.  This should have two properties:

== Full computer name:* bob.gnu.org ==

== Domain:* gnu.org ==

When the domain is removed from the Full computer name, the
hostname is found.  In this case, the host-name is bob.

If a specific setup for a host gets too cramped, you can also
create a directory named after your system user name, like
<tt>Data/init/user/$USER</tt>.  If a such a directory exists, it will be
added to the load-path, and any elisp or org-mode w/embedded
elisp files in it will be loaded.
* <b>Overall config </b> --  If you wish to add literate/non-literate startup
files, you may also put them in
<tt>Data/init/shared/</tt>.  This should be loaded
regardless of the user or system.
=== Installing Additional Libraries ===
* <b>Installing more elisp libraries </b> --  The easiest way to install new
libraries is through the Emacs Lisp Package Archive (see [[#emacs-lisp-package-archive][Emacs
Lisp Package Archive]] below).  When a library is not available
through ELPA, or the library is outdated for your tastes you have two
options:
# You can grab it's source and place it directly in the <tt>/Data/src</tt>
directory.  Any packages found there will automatically be added
to your load-path when Emacs starts up, and are guaranteed not to
conflict with future updates.
# You can use el-get to install the package.

Note that el-get allows you to be more up-to-date since it usually
syncs with the software developer's repository.  This is good and bad,
so beware the bleeding edge. As a consequence, this requires command
line versions of <tt>git</tt> and other package managers to be available to
el-get.  
=== Using Pre-installed libraries ===
* <b>Making use of the two pre-installed libraries </b> --  By default the
starter kit downloads and installs two generally helpful elisp
libraries.
* <b>color-themes </b> --  The starter-kit comes pre-bundled with a variety
of color themes.  See Color Themes for instructions on how to
change the colors used by Emacs.

* <b>Misc </b> --  Some additional miscellaneous configuration and getting
started suggestions
* First see the [http://www.gnu.org/software/emacs/manual/html_node/emacs/Customization.html#Customization Customization] node in the Emacs manual.  Available
online or through the <tt>info</tt> command (run with <tt>C-h i</tt>).
* <tt>grep</tt>'ing through the <tt>starter-kit-*</tt> files in this directory
can provide useful examples for how to do things like install
major modes, define keybindings, etc..
* read the following [http://www.gnu.org/software/emacs/elisp/html_node/Key-Binding-Conventions.html Key-Binding-Conventions] before defining too
many personal key bindings

=== Load Path ===
Load Path for source directory is in <tt>Data/src</tt>.
=== Literate Initialization ===
When using !EmacsPortable.App's startup mechanism, t
# Any <tt>.org</tt>, <tt>.el</tt> or <tt>.elc</tt> files in <tt>Data/init</tt> and loads them
# User-based <tt>.org</tt>, <tt>.el</tt>, or <tt>.elc</tt> files in <tt>Data/init/user</tt>.

# System based <tt>.org</tt>, <tt>.el</tt> or <tt>.elc</tt> files in <tt>Data/init/system</tt>.
=== Home Directory ===

== How !EmacsPortable.App Works ==
=== EmacsPortable.App Startup (Windows Only) ===
The Pseudo-Daemon Start-up script among other things:
* Opens Emacs
* Renames the current Frame
* Creates a New frame
* Calls an external program (ahk) that hides the frame & puts an
Emacs icon in the task bar to allow this frame to be shown or
closed
* Once Emacs has started up, subsequent calls to the Emacs start-up script open a new frame.

This allows you to "close" out of Emacs while maintaining a running Emacs.

The startup script also sets the environment variable
EMACS_SERVER_FILE to the temporary directory

<tt>$TEMP\ep\!EmacsPortable.App-Server-$EMACS_VERSION\server</tt>

Subsequent calls to emacsclient.exe specify this server location.
Therefore an emacs server can be run for each distinct emacs version

More information about the startup is found in site-start.org

=== Proxy Configuration (Windows Only) ===
!EmacsPortable.App will setup the <tt>HTTPS_PROXY</tt>, <tt>HTTP_PROXY</tt> and
<tt>FTP_PROXY</tt> based on the connection specific setup.
To use a proxy, set it up with <tt>!EmacsOptions.exe</tt>.

This is sufficient for some packages, but not for <tt>gnus</tt>.

The information is stored by the blowfish encryption algorithm.
However the <tt>HTTP_PROXY</tt> environment variable will contain the
password in clear text.
=== Fonts ===
==== Windows ====
Under windows the fonts in the <tt>App/fonts/</tt> directory are temporarily
installed by opening them using <tt>fontview</tt> (if they are not already
installed on the base system).  This is done by a autohotkey script.
Once Emacs Exits, the fonts are "uninstalled" by closing the fontview
window.  Currently this is done by showing the window and then closing
it.
==== Mac OS X ====
Currently unsupported.
=== DOS Version ===
The dos version starts up emacs in a dos command prompt window. When
trying to do anything with the <tt>!EmacsPortableDOS</tt> command, it will
attempt to do that command in the initial <tt>DOS</tt> box.  This is just a
test environment, and is likely not very reasonable to use.
== Using Specific Applications ==
=== Adding Paths (Windows Only) ===
Most of the specific applications work by adding paths and changing
environmental variables.  This is controlled by <tt>App/ini/paths.ini</tt>.
!EmacsPortableApp looks at the following sections
==== General Paths ====
==== Local Paths [local] ====
Local paths are paths that emacs checks that are locally available.
They are specified by NAME=Local Path Snippet.  An example of this is:
<pre>
[local]
git=msysgit\msysgit\bin
git2=msysgit\bin
gitmsys=msysgit\msysgit\mingw\bin
gitmsys2=msysgit\mingw\bin
</pre>

In this example <tt>git</tt> The following paths are checked:
# <tt>c:\msysgit\msysgit\bin</tt>
* The root is set to <tt>c:\</tt>
# <tt>%!ProgramFiles%\msysgit\msysgit\bin</tt>
* The root is set to <tt>%!ProgramFiles%</tt>

If they exist they are added to the path environment before starting
emacs.  If the directory in fact /exists/, then two additional ini
sections are checked, <tt>[local.git.path]</tt> and <tt>[local.git.set]</tt>.  

For the <tt>git</tt> local setup, there are two sections.  The first
<tt>local.git.path</tt> is specified as follows:

<pre>
[local.git.path]
git_install_root=msysgit\msysgit
</pre>

Then each key is added to the environment putting the root location
before the right handed value.  In this case, the environmental
variable is set to <tt>c:\msysgit\msysgit</tt> or
<tt>%!ProgramFiles%\msysgit\msysgit</tt> depending on which path was found.   

The other type of section that is used is the <tt>[local.git.set]</tt>.  In
the case of <tt>git</tt> this section is defined as:

<pre>
[local.git.set]
PLINK_PROTOCOL=ssh
</pre>

Therefore, if <tt>git</tt> is found then the environmental variable
<tt>PLINK_PROTOCOL</tt> is set to <tt>ssh</tt>.

==== Portable Paths [portable] ====
The portable paths are set in the same way as the local paths with the
exception of the places they check for the existence of paths.  The
<tt>portable</tt> section checks for paths in <tt>USB:\</tt>, and <tt>USB:\!PortableApps\</tt>.
==== Relative Paths [exedir] ====
The <tt>exedir</tt> section checks for paths relative to the portable
application. 
==== Info Paths ====
Emacs uses Info for most everything.  You can add <tt>info</tt> paths that
Emacs doesn't know about by a similar manner as the general paths,
above. 
==== Unix Manual Paths ====
=== Java-based Apps ===
!EmacsPortable supports [http://plantuml.sourceforge.net/download.html PlantUML] and [http://ditaa.sourceforge.net/ ditaa] for [http://orgmode.org org-mode] assuming that
[http://portableapps.com/apps/utilities/java_portable_launcher JavaPortable] is installed. 

[http://plantuml.sourceforge.net/download.html PlantUML] requires <tt>dot</tt> from !GraphViz.  Therefore, !GraphVizPortable
would need to be installed for [http://plantuml.sourceforge.net/download.html PlantUML] to work. 

=== Python based Apps ===
By installing [http://www.portablepython.com Python Portable] into your <tt>!PortableApps</tt> Directory,
python is available to Emacs.  This is useful for installing Bazaar,
which Emacs uses as its version control.
=== Version control Software ===
==== Bazaar ====
I have created a portable Bazaar.  There are some reports of troubling
errors. 
==== Subversion in Windows ====
Not quite portable, but you can get the binaries [http://www.visualsvn.com/downloads/ here].

Running in subversion from within !EmacsPortable.App /is/ portable,
though.  Emacs will set the <tt>%!AppData%</tt> Environment variable to
<tt>Data/!AppData</tt> and set <tt>%ALLUSERSPROFILE%</tt> to <tt>Data/!AppData</tt>





=== SumatraPDF Portable ===
Using AUC!TeX inverse-search and forward search is supported with
[http://portableapps.com/apps/office/sumatra_pdf_portable SumatraPDFPortable].  There should be no set-up, !EmacsPortable.App with
setup both Emacs and [http://portableapps.com/apps/office/sumatra_pdf_portable SumatraPDFPortable].  
=== GPG for encryption ===
!EmacsPortableApp looks for the gpg package that is installed with
Mozilla Thunderbird.  First install Thunderbird Portable:

http://portableapps.com/support/thunderbird_portable

Then install gpg from here

http://portableapps.com/support/thunderbird_portable#encryption

=== MikTeX Portable ===
If you extract !MikTeX portable to <tt>!PortableApps/!MikTexPortable/</tt>,
!EmacsPortable.App will be recognized and used.
=== Unix Ports ===
==== Cygwin ====
==== MSYS ====
Supports MSYS portable.
==== GnuWin32 ====
==== EzWin ====
=== PuTTY ===
==== PuTTY and magit ====
Since magit and !OpenSSH does not work correctly in windows, you can
use !PuTTY to connect to your host via plink.  Note that you must
connect to the host first via !PuTTY or you will get one of the
following error messages:

<pre>
The server's host key is not cached in the registry. You
 have no guarantee that the server is the computer you
 think it is.
 The server's rsa2 key fingerprint is:
 ssh-rsa 2048 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
 Connection abandoned.
 fatal: The remote end hung up unexpectedly
</pre>

or

<pre>
WARNING - POTENTIAL SECURITY BREACH!
 The server's host key does not match the one PuTTY has
 cached in the registry. This means that either the
 server administrator has changed the host key, or you
 have actually connected to another computer pretending
 to be the server.
 The new rsa2 key fingerprint is:
 ssh-rsa 2048 00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00
 Connection abandoned.
 fatal: The remote end hung up unexpectedly
</pre>


The information about setting up GIT to use putty are located here.

http://sitaramc.github.com/gitolite/contrib_putty.html

This is done automatically when running TRAMP.

Therefore, if you want to use magit for github, you need open
puttyportable and attempt to open <tt>git@github.com</tt> so it can cache the
host id.
==== PuTTY and Tramp ====
From Jeremy Engilsh there is a tutorial on how to get TRAMP to work
with windows 2K.  This is adapted from [http://www.jeremyenglish.org/docs/tramp_ntmacs.pdf that tutorial].

!EmacsPortable.App will download and setup the appropriate files for
!PuTTY portable, if you need them.  In addition to putty.exe, you will
need:
* puttygen.exe
* pageant.exe
* plink.exe


# Generate a Key

Use Puttygen to generate a key.  Puttygen should be in the
!PuttyPortable application.

[[./Other/img/!PuTTYKeyGenerator0.png]]
[[./Other/img/!PuTTYKeyGenerator1.png]]

# Save the public key

This is under File->Save Private Key

# Export the key to an open ssh key.

This is under Conversions->Export !OpenSSH Key

# Copy the key to the server.

This can be done with a secure file transfer like !FileZilla.

Or, if ssh is working for you, you can use the following shell
command

<pre>
scp key user@host:~/
</pre>

# Log into the host and add to authorized keys

<pre>
ssh example.server.com
mkdir ~./ssh
chmod 700 ~/.ssh
cat ~/key >> ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys
rm ~/key
</pre>

# Let !EmacsPortable.App know about the key

Use !EmacsOptions.exe to select the !PuTTy key.  If you want it to be
portable keep the key on the USB drive *OR* in the executable
directory.

# Run !EmacsPortable.App. 

!EmacsPortable.App will start <tt>pageant.exe</tt> if it is not already
running and set up tramp to use plink.  This is done by the
site-start.


==== PuTTYPortable ====
To use the settings of !PuTTYPortable, you have to have a !PuTTYPortable
session open.
==== PuTTY and Proxy settings ====
!PuTTY currently stores proxy settings in the registry. If
!EmacsPortable.App is started up AND !PuTTY Pageant has not started up,
then:
* !EmacsPortable.App will run Paegeant Portable
* Just after launching emacs, !EmacsPortable.App will write the Proxy
settings to the registry
* When you exit !PuttyPortable, these settings will be saved.

Therefore, you do not need to always manually edit proxy settings, and
plink should work most of the time.
== Icons ==
Icons came from various places:
* [http://findicons.com/icon/93514/new_go_down?id=344599# Download Icon]
* USB Icon
* http://www.clker.com/clipart-10031.html
* Modified Lady Bug http://www.clker.com/clipart-23283.html
* Modified Uninstall Icon (original at
http://findicons.com/icon/127390/trash_empty)
* Dos Box/Terminal http://www.clker.com/clipart-3716.html
* Wrench http://www.clker.com/clipart-3716.html
* Screw Driver http://www.clker.com/clipart-14895.html
== Bleeding edge emacs ==
These are notes to use the bleeding edge emacs.

Goto the App directory, and under a command prompt that has bzr
installed, type

<pre>
bzr branch --stacked bzr://bzr.savannah.gnu.org/emacs/trunk emacs-bzr
</pre>

== EmacsPortable.App Wish List/TODO list ==
=== TODO Add Mac Support of Daemon Mode ===
[2011-12-14 Wed 21:48]
=== TODO Add Mac Support of Portable Dictionaries  ===
(should be the same between platforms)
=== TODO Make the proxy settings a little less finicky. ===
=== TODO Add XML to the NSIS downloads ===
=== TODO Add Large String support to the NSIS compiler. ===
=== TODO Add md5 to the NSIS downloads ===
=== TODO Add !NotifyPlugin to the downloads. ===
