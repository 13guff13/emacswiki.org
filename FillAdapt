Filladapt by KyleJones enhances Emacs' fill functions by guessing a fill prefix, such as a comment sequence in program code, and handling bullet points like "1." or "*".  Get it from the author at

: http://www.wonderworks.com/
: http://www.wonderworks.com/download/filladapt.el

Emacs has a builtin <code>adaptive-fill-mode</code> (see [[Manual:adaptive-fill-mode]]), but filladapt does a much better job, and is easier to customize.

Filladapt works by matching prefix patterns from <code>filladapt-token-table</code>.  That table has for example <code>//</code> for C++ comments.  Lines with the same prefix, or same multiple prefixes, are considered a paragraph.  You can see this process in action dynamically with <code>filladapt-debug</code>.

    M-: (filladapt-debug)

The default setups suit most comment styles and bullet point styles.  They don't look at the major mode, so a mixture of styles in one buffer works fine.  If you need to restrict styles to a particular major mode the easiest way is to make a buffer-local change to <code>filladapt-token-table</code> from the mode hook.

It's worth noting filladapt still goes through <code>fill-paragraph-function</code>, so if it doesn't seem to be working (even when the debug above shows a correct line/paragraph analysis), then perhaps a major mode function in that variable is to blame.  (An example of that is <code>makefile-mode</code> on indented comments in Emacs 21 and 22; see the MakefileMode page for a fix.)


Here are some things adding to filladapt (in addition to the sections below),

* HaskellMode -- recognising haskell style comments
* HtmlMode -- <nowiki><li></nowiki> and <nowiki><p></nowiki> bullet points
* [Geocities:user42_kevin/nroff-filladapt nroff-filladapt] â€“ setup nroff comment prefixes for [[NroffMode]]


== C/C++/Java and javadoc/doxygen comments ==
Filladapt is very cool, but to if you want it to be useful while editing C/C++/Java comments and javadoc/doxygen documentation, you need fix the token table.  Here is what I use:

<pre>
(custom-set-variables
  ;; custom-set-variables was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(filladapt-token-table
   (quote (("^" beginning-of-line)
           (">+" citation->)
           ("\\(\\w\\|[0-9]\\)[^'`\"< \t\n]*>[ \t]*" supercite-citation)
           (";+" lisp-comment)
           ("#+" sh-comment)
           ("%+" postscript-comment)
           ("^[ \t]*\\(//\\|\\*\\)[^ \t]*" c++-comment)
           ("@c[ \\t]" texinfo-comment)
           ("@comment[ \t]" texinfo-comment)
           ("\\\\item[ \t]" bullet)
           ("[0-9]+\\.[ \t]" bullet)
           ("[0-9]+\\(\\.[0-9]+\\)+[ \t]" bullet)
           ("[A-Za-z]\\.[ \t]" bullet)
           ("(?[0-9]+)[ \t]" bullet)
           ("(?[A-Za-z])[ \t]" bullet)
           ("[0-9]+[A-Za-z]\\.[ \t]" bullet)
           ("(?[0-9]+[A-Za-z])[ \t]" bullet)
           ("[-~*+]+[ \t]" bullet)
           ("o[ \t]" bullet)
           ("[\\@]\\(param\\|throw\\|exception\\|addtogroup\\|defgroup\\)[ \t]*[A-Za-z_][A-Za-z_0-9]*[ \t]+" bullet)
           ("[\\@][A-Za-z_]+[ \t]*" bullet)
           ("[ \t]+" space)
           ("$" end-of-line)))))
</pre>

This is the same as the default token table, but I have modified the c++-comment regular expression and I added the last two bullet regular expressions.  It would be nice if I could just modify the token table for C/C++/Java source files (since my change affects the interpretation of the "*" bullet, overriding it by interpreting it as a c++-comment if this is the beginning of the line) instead of globally, but the customize feature boggles my mind. -- JonathanBaccash

----
CategoryFilling
