This page contains some information for Mac users wanting to setup [[Gmail, Gnus and GPG]].

I tried this using my Mac and a Guest account. A Guest account has all its files deleted when you log out.
It's as "clean" as I could get.

== Installing Emacs ==

You can install Emacs in various ways. You could use [http://emacsformacosx.com/ Emacs For Mac OS X]. "Pure Emacs! No Extras! No Nonsense!" This is what I used to run. I've also built Emacs from source many times. Just remember to ##./configure --with-ns## before you start. You can install it from [http://brew.sh/ Homebrew]: You could ##brew install emacs## or you could install Yamamoto Mitsuharu's [https://github.com/railwaycat/emacs-mac-port/blob/master/README-mac Emacs Mac Port]. This last variant is what I'm using right now.

{{{
brew tap railwaycat/emacsmacport
brew install emacs-mac --with-gnutls --with-imagemagick --with-official-icon --with-xml2
brew linkapps emacs-mac
}}}

== Installing GPG and Pinentry for a Mac ==

As for GPG, you have two options. You can install GPG via [https://gpgtools.org/ GPG Suite]. This is what I used at first.  ##gpg --version## said ##gpg (GnuPG/MacGPG2) 2.0.27## (the current, stable version is 2.0.28). But I wanted to install GPG via [http://brew.sh/ Homebrew]. If you want to try it as well, make sure you [http://support.gpgtools.org/kb/faq/uninstall-gpg-suite uninstall the GPG Suite] if you had it installed.

If you just install ##gpg2##, you won't be able to enter your passphrase from within Emacs with a GUI.
You'll see a simple, cut off message saying ##epa-file--find-file-not-found-function: Opening input file: Decryption failed,##.
If you only use Emacs within terminal windows, no problem. No need to do anything.
But if you like to use Emacs with fonts and colors, menus and scrollbars, then
you need to install a special variant of pinentry in order to get a separate pinentry window:

{{{
brew install gpg2
brew install pinentry-mac
}}}

== Setting Up Pinentry ==

We also need to make sure that the agent uses pinentry for a Mac. This is what I have in my ##~/.gnupg/gpg-agent.conf##.

{{{
pinentry-program /usr/local/bin/pinentry-mac
enable-ssh-support
}}}

If you don't do that, the default ##pinentry## is linked to ##pinentry-curses## which will work in a terminal but it won't work in Emacs!

{{{
┌────────────────────────────────────────────────────────────────────────────────────┐
│ Please enter the passphrase to unlock the secret key for the OpenPGP certificate:  │
│ "Alex Schroeder <kensanata@keybase.io>"                                            │
│ 8192-bit RSA key, ID 4529A45C,                                                     │
│ created 2015-03-01 (main key ID ACECFEAE).                                         │
│                                                                                    │
│                                                                                    │
│ Passphrase *****************************************************************______ │
│                                                                                    │
│            <OK>                                                  <Cancel>          │
└────────────────────────────────────────────────────────────────────────────────────┘
}}}

== Starting and Restarting the Agent from Emacs ==

I want to use the GPG Agent. It will remember my passphrase for a while, allowing me to use Gnus like a sane person.
If you don't, Gnus will ask you for your passphrase for every backend it uses (because it needs to decrypt the ##.authinfo.gpg## file) and for every encrypted mail you read and for every encrypted mail you send. You'll be typing your passphrase a lot.

I also find that sometimes the agent doesn't work as expected. Perhaps the agent died after a while, or Emacs was started before the agent was launched, whatever. I need some functions to help me out:

{{{
(defun gpg-restart-agent ()
  "This kills and restarts the gpg-agent.

To kill gpg-agent, we use killall. If you know that the agent is
OK, you should just reload the environment file using
`gpg-reload-agent-info'."
  (interactive)
  (shell-command "killall gpg-agent")
  (shell-command "gpg-agent --daemon --enable-ssh-support --write-env-file")
  ;; read the environment file instead of parsing the output
  (gpg-reload-agent-info))

(defun gpg-reload-agent-info ()
  "Reload the ~/.gpg-agent-info file."
  (interactive)
  (with-temp-buffer
    (insert-file (expand-file-name "~/.gpg-agent-info"))
    (goto-char (point-min))
    (while (re-search-forward "\\([A-Z_]+\\)=\\(.*\\)" nil t)
      (setenv (match-string 1) (match-string 2)))))

(defun gpg-agent-startup ()
  "Initialize the gpg-agent if necessary.

Note that sometimes the gpg-agent can be up and running and still
be useless, in which case you should restart it using
`gpg-restart-agent'."
  (gpg-reload-agent-info)
  (let ((id (string-to-number (getenv "SSH_AGENT_PID"))))
    (unless (member id (list-system-processes))
      (gpg-restart-agent))))

(gpg-agent-startup)
}}}

Given this setup, the `gpg-agent-startup' function above will detect a running agent and just parse the environment file it created. This is important if you want to use Emacs outside a terminal. In a terminal, Emacs is started from the shell and inherits its environment (which we'll set up in the next section). If Emacs is started by a window manager, it does not inherit an environment from a shell. That's why the above is necessary.

== Launching GPG Agent for Other Programs ==

You want to launch the GPG agent as soon as you log on. When it starts, it should write its contact info into a /file/ which we can then read from every shell. The environment variables will then get inherited by child processes and so every program you call from the command line will also be able to use the same agent.

Create the file ##~/Library/LaunchAgents/org.gnupg.gpg-agent.plist## with the following content. Make sure you change my username ("alex") to something else!

{{{
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" 
   "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>Label</key>
    <string>org.gnupg.gpg-agent</string>
    <key>ProgramArguments</key>
    <array>
      <string>/Users/alex/bin/start-gpg-agent.sh</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
  </dict>
</plist>
}}}

Now create the shell script ##~/bin/startup-gpg-agent.sh## -- create the ##~/bin## directory if you need to. This shell script must be executable (##chmod 700 ~/bin/startup-gpg-agent.sh##). It examines the default environment file, and if it finds the file, it [http://stackoverflow.com/questions/11012527/what-does-kill-0-pid-in-a-shell-script-do checks whether the agent is usable]. If so, we use the file. If not, we start a new agent and tell it to write an environment file.

{{{
# ${HOME}/.gpg-agent-info is the default filename
if test -f $HOME/.gpg-agent-info && \
	kill -0 `grep GPG_AGENT_INFO $HOME/.gpg-agent-info | cut -d: -f2` 2>/dev/null; then
    # do this in case we were called from the shell
    . "${HOME}/.gpg-agent-info"
    export GPG_AGENT_INFO
    export SSH_AUTH_SOCK
    export SSH_AGENT_PID
else
    eval `/usr/local/bin/gpg-agent --daemon --write-env-file`
fi
}}}

Wherever you run ##gpg##, you need to set the ##GPG_AGENT_INFO## environment variable. Here's what I have in my ##~/.bashrc## because I use ##bash##. And ##~/.bash_profile## sources the same file, so this code runs no matter what.

{{{
# GPG
if [ -f "${HOME}/.gpg-agent-info" ]; then
    . "${HOME}/.gpg-agent-info"
    export GPG_AGENT_INFO
    export SSH_AUTH_SOCK
    export SSH_AGENT_PID
fi
GPG_TTY=$(tty)
export GPG_TTY
}}}
