http://flymake.sourceforge.net/

    Title:       Flymake -- an on-the-fly syntax checker for Emacs
    Environment: GNU emacs, GNU make
    Description: Performs on-the-fly syntax checks on the files being edited
                 using the external syntax check tool (usually the compiler).
                 Highlights erroneous lines and displays associated
                 error messages.

Taken from the home page:

Flymake is implemented as an Emacs minor mode. It runs the syntax check tool in the background, passing it a temporary copy of the current buffer, and parses the output for known error/warning message patterns. Flymake then highlights erroneous lines (that is, lines for which at least one error or warning has been reported), and displays an overall buffer status in the mode line.

Flymake's author is Pavel Kobiakov

[new]
Flymake is part of Emacs 23 and some of the tips below works OTB there.

== Language Support ==

||**Language**||||Link||
||PHP||||[http://sachachua.com/wp/2008/07/emacs-and-php-on-the-fly-syntax-checking-with-flymake/ PHP syntax checking for Flymake]||
||Ruby||||FlymakeRuby for Ruby||
||Fortran G95||||[[Flymake Fortran G95]]||
||JavaScript||||FlymakeJavaScript for JavaScript||
||Actionscript 3||||FlymakeActionscriptThree for Actionscript 3, more than just syntax checking; full incremental compilation||
||Haskell||||FlymakeHaskell for Haskell||
||Erlang ||||FlymakeErlang for Erlang||
||Lua ||||FlymakeLua for Lua||
||*nix Shell ||||FlymakeShell for shell programming. Default it uses Bash.||
||Elisp ||||FlymakeElisp for EmacsLisp||
||CSS ||||FlymakeCSS for Cascading Style Sheets||
||Java ||||FlymakeJava with Make or JDEE||
||C# ||||[FlymakeCsharp C# syntax checking with Flymake]||
||python-mode ||||Is it possible to use pychecker with flymake? -- Anon.
You can use it with pylint. See PythonMode||
||D||||FlyMakeD for the [http://www.digitalmars.com/d/index.html D programming language].||

== Hints And Questions ==

=== LaTeX ===
Note: If your latex file has digits immediately before the dot (e.g. <code>design2.tex</code>), flymake will assume it is a portion of a larger work and try to find another file that <code>\include</code>s it!

Is it possible to use latex with flymake on linux machines? I try it today and it seems that the mode works only under miktex.

This mode works on linux machines with customization. The default program (texify) is incorrect, so I used [http://baruch.ev-en.org/proj/chktex/ chktex]:

  (defun flymake-get-tex-args (file-name)
    (list "chktex" (list "-q" "-v0" file-name)))

If you use a recent version of LaTeX having the option "-file-line-error-style",
you can use:

  (defun flymake-get-tex-args (file-name)
    (list "latex" (list "-file-line-error-style" file-name)))

----
Another setting to use [http://baruch.ev-en.org/proj/chktex/ ChkTeX]:
After installing the checking tool, you can put the following .chktexrc on your home direcotry:

<pre>
# ~/.chktexrc
OutFormat
{
 
# -v0; silent mode : change the default setting of -v0 as follows:
"%f%b%l%b%c%b%k: %m!n"
 
</pre>

Then, write .emacs for flymake as follows:

<pre>
;; Flymake for LaTeX
(defun flymake-get-tex-args (file-name)
  (list "chktex" (list "-g0" "-r" "-l" (expand-file-name "~/.chktexrc") "-I" "-q" "-v0" file-name)))
(push
  '("^\\(\.+\.tex\\):\\([0-9]+\\):\\([0-9]+\\):\\(.+\\)"
   1 2 3 4) flymake-err-line-patterns)
</pre>
-- ike
----
For Japanese, unfortunately, chktex doesn't understand 2byte code e.g. Japanese character.
Trick: we can pass the tex file to the kakasi filter, then check it.

Here is another solution for Japanese TeX users:

<pre>
;; Flymake for LaTeX
(defun flymake-get-tex-args (file-name)
  (list (expand-file-name "~/bin/flycheck_latex.sh") (list file-name)))
(push
  '("^\\(\.+\.tex\\):\\([0-9]+\\):\\([0-9]+\\):\\(.+\\)"
   nil 2 3 4) flymake-err-line-patterns)
</pre>

<pre>
#!/bin/sh

real_file_name=$@
file_name=`basename "$real_file_name"`
tmp_file=`mktemp`
tmp_dir=`mktemp -d`
fake_name="$tmp_dir/$file_name"

# assumed that the source code has EUC-JP encoding                                                                                             
cat "$real_file_name" | kakasi -ieuc -Ha -Ka -Ja -Ea -ka -s > "$tmp_file"

mkdir -p $tmp_dir
cp $tmp_file $fake_name
chktex -g0 -r -l ~/.chktexrc -I -q -v0 $fake_name

# clean up                                                                                                                                     
rm -fr "$tmp_file"
rm -fr "$tmp_dir"
</pre>

--ike 

----

To use flymake with latex or pdflatex from the texlive distribution 
on linux (as e.g., included in OpenSuse):

  (defun flymake-get-tex-args (file-name)
    (list "pdflatex" (list "-file-line-error" "-draftmode" "-interaction=nonstopmode" file-name)))

--Lars
----

=== Ada ===

The following works with Gnat:

  ;; Flymake for Ada
  (require 'flymake)
  (defun flymake-ada-init ()
      (flymake-simple-make-init-impl
        'flymake-create-temp-with-folder-structure nil nil
        buffer-file-name
        'flymake-get-ada-cmdline))

  (defun flymake-get-ada-cmdline (source base-dir)
    `("gnatmake" ("-gnatc" "-gnatwa",(concat "-I" base-dir) ,source)))

  (push '(".+\\.adb$" flymake-ada-init) flymake-allowed-file-name-masks)
  (push '(".+\\.ads$" flymake-ada-init) flymake-allowed-file-name-masks)

  (push '("\\([^:]*\\):\\([0-9]+\\):[0-9]+: \\(.*\\)"
	  1 2 nil 3)
        flymake-err-line-patterns)
----

=== SCons/bjam ===

- Can Flymake work if SCons/bjam is used instead of make? -- Tennis

By providing a makefile which invokes SCons/bjam. Not perfect but a viable alternative until Flymake has more configuration options

Here is how I customized flymake to compile with scons :


	(defun flymake-get-make-cmdline (source base-dir)
	  (string-match "src/\\(.*\\)\\." source)
	  (list "scons"
	    (list "-u" 
	          (concat "#obj/" 
	                  (match-string 1 source)
	                  ".o"))))

This is the case if you put VariantDir(obj,src) in your SConstruct. 

--Ounim

----

=== CMake ===

Using flymake for CMake is not difficult, the trick is to generate Makefiles using information provided by cmake. This [http://www.opencog.org/wiki/Flymake_help|page] contains explanation and scripts to do that. It is possible the provided scripts would work immediately for your CMake project,  if not you will surely get the idea.

-- Nil Geisweiller

=== Mozart/Oz ===

Here are instructions how to make flymake work with Mozart/Oz: 
http://code.google.com/p/oz-code/downloads/list

- WolfgangMeyer

----

=== HTML ===

Here are instructions how to make flymake work with HTML:

	(defun flymake-html-init ()
	  (let* ((temp-file (flymake-init-create-temp-buffer-copy
	                     'flymake-create-temp-inplace))
	         (local-file (file-relative-name
	                      temp-file
	                      (file-name-directory buffer-file-name))))
	    (list "tidy" (list local-file))))
	
	(add-to-list 'flymake-allowed-file-name-masks
	             '("\\.html$\\|\\.ctp" flymake-html-init))
	
	(add-to-list 'flymake-err-line-patterns
	             '("line \\([0-9]+\\) column \\([0-9]+\\) - \\(Warning\\|Error\\): \\(.*\\)"
	               nil 1 2 4))


----

=== XSL-Mode ===

Use Flymake's XML syntax-checking on files with a .xsl extension.

    (require 'flymake)
    (push '(".+\\.xsl$" flymake-xml-init) flymake-allowed-file-name-masks)
    (add-hook 'xsl-mode-hook
	      (lambda () (flymake-mode t)))

----

=== C# ===

I was able to implement a monkey-patch to the popup menu presented by flymake-display-err-menu -for-current-line , that presents a list of "quick fixes", as with visual studio.  For example if your code has a CS0246 error (unknown type), then the menu presents a list of fixes including "add a using statement" and "use the fully qualified type".  

Example:

http://i40.tinypic.com/mwryw0.jpg

This works on emacs v22.2.1 on Windows, but requires:

 - changes to flymake.el so that flymake-goto-next-error goes to the *column* as well as the line of the error
 - CSDEShell - the C# development environment shell - to lookup fully-qualified typenames on short names. 

see [http://stackoverflow.com/questions/2601120/do-overlays-tooltips-work-correctly-in-emacs-for-windows/2604843#2604843 this post] for more.

----

== More Tips and Questions ==

=== Flymake on GNU/Linux ==

Flymake as shipped doesn't quite work right on Linux yet, but I sent a patch to the author so hopefully soon it'll work fine (it's just a buglet in the relative path handling). It works really well! You need some makefile magic though, this is what I used for the Wine build system:

<pre>
check-syntax:
	$(MAKE) syntax-target SYNTAX="-fsyntax-only"

syntax-target: $(SOURCES:.c=.o)
</pre>

-MikeHearn

----

In my simple project I use the following target in the Makefile:

<pre>
.PHONY: check-syntax
check-syntax:
	$(CXX) -Wall -Wextra -pedantic -fsyntax-only $(CHK_SOURCES)
</pre>

This works out-of-the-box with GNU Emacs 22.0.90.

----
=== Using temp dir ===
Does anybody know how to change flymake so that it sticks all of its junk files (*_flymake.*) in /tmp? 

For example, you're editing the source to a folder which you do not have write permissions on. Flymake breaks because it cannot save the _flymake file to the same directory as the source. Plus this leads to ugly _flymake files all over the place if it fails to delete them.

----
=== Resource consumption? ===
What about resource consumption ? Does it eat all the CPU or RAM ?
How Emacs is running when this is activated ? Except these questions,
it really seems a killer-app :) -- XavierMaillard

----
=== When is flymake run? ===
I've tried it (linux, stock emacs).. GREAT.. but.. I found that the buffer is only updated after I save the buffer, even if flymake is running gcc very often... is it normal?

: No, it is supposed to run automatically -- VagnJohansen

----

=== Using CEDET tools for unsupported modes ===
If you have a mode that flymake does not support (and you can't/won't add flymake support for it), then you can use lmcompile.el/linemark.el from the CEDET tools (CollectionOfEmacsDevelopmentEnvironmentTools) to at least get automatic highlighting after compiles.

Assuming that cedet is properly configured you can use

<pre>
  (require 'lmcompile)
  (add-hook 'compilation-finish-functions 'vj-compilation-finish-highlight)
  (defun vj-compilation-finish-highlight (buffer result-str)
    (interactive)
    (lmcompile-do-highlight))
</pre>


On my system the lmcompile-do-highligth call changes point to the last highlight entry (bug?). I had to use a delayed call:

<pre>
(defun vj-compilation-finish-highlight (buffer result-str)
  (interactive)
  (run-at-time "1 sec" nil 'lmcompile-do-highlight))
</pre>

- VagnJohansen

----

=== Showing error messages in without a mouse ===

If you do not want to use mouse hover to check out the error messages, I've made a small modification that puts them in as overlays
[http://graphics.tudelft.nl/~jorik/css/flymake.html]. You may need to patch it a bit to get it to run though.

- JorikBlaas

----

Quickly show next err-menu:

  ;; flymake
  (defun my-flymake-show-next-error()
    (interactive)
    (flymake-goto-next-error)
    (flymake-display-err-menu-for-current-line)
    )

  (local-set-key "\C-c\C-v" 'my-flymake-show-next-error)

----
Similarly, I like to have M-n and M-p move the point to the next and previous flymake error and then echo the error message at that point to the mini buffer. The following is a minor mode to achieve that. -- MatthewKennedy

<pre>
(defvar my-flymake-minor-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map "\M-p" 'flymake-goto-prev-error)
    (define-key map "\M-n" 'flymake-goto-next-error)
    map)
  "Keymap for my flymake minor mode.")

(defun my-flymake-err-at (pos)
  (let ((overlays (overlays-at pos)))
    (remove nil
            (mapcar (lambda (overlay)
                      (and (overlay-get overlay 'flymake-overlay)
                           (overlay-get overlay 'help-echo)))
                    overlays))))

(defun my-flymake-err-echo ()
  (message "%s" (mapconcat 'identity (my-flymake-err-at (point)) "\n")))

(defadvice flymake-goto-next-error (after display-message activate compile)
  (my-flymake-err-echo))

(defadvice flymake-goto-prev-error (after display-message activate compile)
  (my-flymake-err-echo))

(define-minor-mode my-flymake-minor-mode
  "Simple minor mode which adds some key bindings for moving to the next and previous errors.

Key bindings:

\\{my-flymake-minor-mode-map}"
  nil
  nil
  :keymap my-flymake-minor-mode-map)
</pre>
----
To use in console/tty emacs you could try the following:

    (defun next-flymake-error ()
      (interactive)
      (let ((err-buf nil))
        (condition-case err
            (setq err-buf (next-error-find-buffer))
          (error))
        (if err-buf
            (next-error)
            (progn
              (flymake-goto-next-error)
              (let ((err (get-char-property (point) 'help-echo)))
                (when err
                  (message err)))))))

I bind to C-` (for cperl only at the moment) which suits the way I work. If you don't care about the whole next-error thing then something like:

    (flymake-goto-next-error)
    (let ((err (get-char-property (point) 'help-echo)))
      (when err
        (message err)))

might be all you need. - PhilJackson

Another solution worth mentioning made by Nafai can be found at [http://paste.lisp.org/display/60617].
From the comment to this code:
: Additional functionality that makes flymake error messages appear
: in the minibuffer when point is on a line containing a flymake
: error. This saves having to mouse over the error, which is a
: keyboard user's annoyance

RichardRiley: The solution below was from Dave Love on gnu.emacs.help:-

<pre>

 (defun my-flymake-show-help ()
   (when (get-char-property (point) 'flymake-overlay)
     (let ((help (get-char-property (point) 'help-echo)))
       (if help (message "%s" help)))))

 (add-hook 'post-command-hook 'my-flymake-show-help)


</pre>

[new]
Something rather similar is used in [NxhtmlMode nXhtml] where (colored) flymake errors are shown in the echo area by default when point enters the flymake error marking.
nXhtml also adds support for some of the above that are not part of Emacs 23 (like CSS, Javascript and an enhanced version for Java).

[new]
Has anyone got this to work with tramp (i.e. for remote files)? I've seen something on a mailing list (for example at http://groups.google.com/group/gnu.emacs.help/browse_thread/thread/dda14275ce2b8b02/d58b601f2b3be223) that says "In `flymake-start-syntax-check-process' of flymake.el, `start-process' is called. This does not work on remote hosts. Instead of, `start-file-process' shall be used." but there's no indication a bug report was ever made (AFAICT), what version the problem occured in, or anything useful like that. 

----
CategoryProgrammerUtils CategoryModes
