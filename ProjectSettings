ProjectSettings are settings for Emacs that apply to all files in a directory (``project'') and are distributed along with said directory. This is a very useful feature for working in a team of people who have to agree on coding standards for source code, character coding systems for text documents (see SelectingTheRightCodingSystem), and so on.

The information on this page started with a thread on one of the
EmacsNewsgroups:

 Subject: Has anybody implemented project settings files?
 Newsgroups: comp.emacs
 Date: Tue, 08 Jan 2002 13:01:10 -070

== Built In ==

EmacsFromCVS has built-in support for directory-local variables.  Settings are stored as a specially formatted list in a file named .dir-locals.el.  See the manual in CVS to see how to use this.

There is also the function locate-dominating-file:

  (locate-dominating-file file regexp)

  Look up the directory hierarchy from file for a file matching regexp.


== Project Settings in Lisp ==

KimStorm suggested to store the stuff in a function.

<pre>
(setq c-style-variables-are-local-p t)

(defun my-c-mode-hooks ()
  (let ((bname (buffer-file-name)))
    (cond
     ((string-match "tools_src/" bname) (c-set-style "gnu"))
     ((string-match "uClinux/" bname) (c-set-style "linux"))
     ((string-match "pump/" bname) (c-set-style "gnu"))
     ((string-match "dhcp-" bname) (c-set-style "gnu"))
     ((string-match "ipconfd/" bname) (c-set-style "gnu"))
     ((string-match "gnu/emacs/" bname) (gnu-tabs))
     ((string-match "nn-tk/" bname) (tab8))
     ((string-match "gnu" bname) t)
     ((string-match "\\.[ch]$" bname) (c-set-style "gnu"))
     )))

(add-hook 'c-mode-hook 'my-c-mode-hooks)
</pre>

Note how the function executes everytime C mode runs.

=== project-root.el ===

[http://www.shellarchive.co.uk/content/emacs.html project-root.el]

Project-root is a very simple module that allows you to define
projects like this:

<pre>
  (setq project-roots
        '(("Blog" :root-contains-files ("index.muse" "images" "content"))
          ("Generic Perl Project" :root-contains-files ("t" "lib"))))
</pre>

With this configuration, anytime you are in a project with t and lib
at the root level you will have access to the project-root functions
like:

When ever you are in a project you will have access to
`project-details' that will look look like this:

<pre>
("Generic Perl Project" . "/home/phil/projects/something")
</pre>

and you get a handy macro called `with-project-root' that lets you do
stuff like this:

<pre>
(with-project-root (call-interactively 'grep))
</pre>

Which will run grep as if it had been called from the root directory.

There are several helpers already defined in the module and the option
to use the provided anything.el integration should one wish.

==== tips ====

===== Open a shell at current root =====

<pre>
(global-set-key (kbd "C-c p s")
                (lambda ()
                  (interactive)
                  (with-project-root
                      (ansi-term
                       (getenv "SHELL")
                       (concat (car project-details) "-shell")))
</pre>

===== Start a vc interface at root =====


<pre>
(global-set-key (Kbd "C-c p v")
                (lambda ()
                  (interactive)
                  (with-project-root
                      (let ((root (cdr project-details)))
                        (cond
                          ((file-exists-p ".svn")
                           (svn-status root))
                          ((file-exists-p ".git")
                           (magit-status root))
                          (t
                           (vc-directory root nil)))))))
</pre>


=== eproject.el ===

[http://github.com/jrockway/eproject eproject.el]

eproject is similar to project-root.el, but less invasive and more customizable.  The docs
in the file are pretty descriptive, as is [http://blog.jrock.us/articles/eproject.pod this blog post].

Basically, you can declare project types like:

<pre>
(define-project-type perl (generic)
  (or (look-for "Makefile.PL") (look-for "Build.PL"))
  :relevant-files ("\\.pm$" "\\.t$" "\\.pl$" "\\.PL$"))
</pre>

then you get a hook and minor mode that you can customize further.

== Project Settings in Files ==

In order to save settings in a file per project, try the following by
KaiGrossjohann.

<pre>
 (defvar kai-project-file ".emacs-prj-"
   "Name prefix for project files.
 Emacs appends name of major mode and looks for such a file in the current
 directory and its parents.")

 (defun kai-find-project-file (dir mode-name)
   (let ((f (expand-file-name (concat kai-project-file mode-name) dir))
	 (parent (file-truename (expand-file-name ".." dir))))
     (cond ((string= dir parent) nil)
	   ((file-exists-p f) f)
	   (t (kai-find-project-file parent mode-name)))))

 (defun kai-eval-project-file ()
   (let* ((mfull (symbol-name major-mode))
	  (mode-name (if (string-match "\\`\\(.*\\)-mode\\'" mfull)
			 (match-string 1 mfull)
		       mfull))
	  (pfile (kai-find-project-file default-directory mode-name)))
     (when pfile
       (load pfile))))
</pre>

You can then do things like (add-hook 'c-mode-hook
'kai-eval-project-file) to do it for C mode.  Everytime you enter C
mode, ie. every time you open a C file, the project file will be
loaded and evaluated.

This is, of course, a potential security risk, since that project file
is just plain elisp and could contain malicious code.  Thus, use with
care on a multi-user system!  People have suggested changes which test
for UID before loading the files.

== Project Settings in Files (another option) ==

See DirVarsPackage.

There is an alternative: dir-locals.el, http://thread.gmane.org/gmane.emacs.devel/56027

== Yet Another Separate File Option ==

See ProjectLocalVariables.

== EDE ===

The EDE tool EricLudlam wrote tries to do project management.  It has
a concept of project local variables which it will set for you in your
source files when you edit them.  This innocuous feature comes along
with a lot of baggage, however, in that EDE has a big project
configuration file, tracks all related source files, and will also try
to build Makefiles for you, and nifty stuff like that.

* http://cedet.sourceforge.net/ede.shtml

== pgrok ==

pgrok is a simple package based on Kai Grossjohan's code above for loading project setting files (both generic and mode specific) and containing a couple of functions for operating on projects (wrappers for find-dired and rgrep at the moment.)

* http://launchpad.net/pgrok/

== Desktop ==

You can also create a little project-management tool out of DeskTop. Provided that you've got
a directory with a subdirectory for every single project you work on (it doesn't have to contain
the project's source code), you can switch between desktops ("workspaces" or "projects" in other
IDEs' terminology). DeskTop will remember paths of open files and values of variables (you can
customize which variables you want).

----
CategoryDotEmacs
CategoryProgrammerUtils
