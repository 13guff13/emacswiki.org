This page is about making particular whitespace more evident.

== Vanilla GNU Emacs ==

Starting with Emacs 21, you can set variable `show-trailing-whitespace' to
highlight trailing whitespace in face `trailing-whitespace'. To disable showing trailing white space, set the variable to `nil' in your [[init file]]. For CPerl, you can also specify the face to use.  The default face is `underline'.  You can use face `default' for invisible whitespace:

    (setq cperl-invalid-face 'default)

Starting with Emacs 22, library <tt>[[whitespace.el]]</tt> is part of GnuEmacs. It provides various ways to visualize spaces, hard spaces, and TABs. See WhiteSpace. 

[[blank-mode.el]] (BlankMode) was a precursor to [[whitespace.el]] (WhiteSpace) and has been replaced by it. When <code>blank-mode</code> is on, it looks like this:

[[image:BlankModeOn]]
 
%%BlankMode%% saves and restores the font-lock state when it is turned on and off. So, if %%BlankMode%% is turned on and font-lock is off, %%BlankMode%% also turns on the font-lock to highlight blanks, but font-lock is turned off when %%BlankMode%% is turned off. So turn on font-lock before %%BlankMode%%, if you want font-lock to stay on after %%BlankMode%% is turned off.






[:ShowWspace]
== show-wspace.el ==

Library <tt>[[show-wspace.el]]</tt> lets you easily highlight any sets of characters that you choose.  There are toggle commands and functions to use on hooks.

These highlight whitespace and confusing characters such as spaces, tabs, hard spaces, hard hyphens, and trailing whitespace.  But you can also highlight a customized set of characters.  You define that set using any number of entries of any of these kinds:

* string of chars
* range of successive chars (Emacs characters are integers)
* character class (e.g. ##[:nonascii:]##, ##[:space:]##)

For example, you can use command `ws-toggle-highlight-tabs' to turn on/off highlighting of tab chars.  Or you can turn on tab highlighting by default by adding function `ws-highlight-tabs' to `font-lock-mode-hook' in your [[init file]]:

   (add-hook 'font-lock-mode-hook 'ws-highlight-tabs)






== Visible Whitespace Mode ==
[[visws.el]] - Simple and very easy to use.  Shows you tabs, spaces and newlines:

[[image:VisWS]]






== Red Space ==

Library <tt>[[redspace.el]]</tt> detects and highlights trailing whitespace.






== 80-Column Rule ==

EightyColumnRule provides highlighting of trailing spaces, TABs, and lines past column 80.





== Show Whitespace Minor Mode ==

ShowWhitespaceMode shows whitespace in either of two ways:

* using faces (highlighting)
* using typographical symbols (pilcrow for return, middle dot for space, guillmet for tab)







== Show Tabs in Modes ==

This code uses font-lock to highlight TABs with face `extra-whitespace-face' in `emacs-lisp-mode' and
in `text-mode'.  You can add an add-hook statement for every other mode
you want this for. Put the following in your init file:

 (defface extra-whitespace-face
   '((t (:background "pale green")))
   "Used for tabs and such.")

 (defvar my-extra-keywords
   '(("\t" . 'extra-whitespace-face)))

 (add-hook 'emacs-lisp-mode-hook
	   (lambda () (font-lock-add-keywords nil my-extra-keywords)))

 (add-hook 'text-mode-hook
	   (lambda () (font-lock-add-keywords nil my-extra-keywords)))

[new]
To show tabs in the same color as trailing whitespace:

    ;; Draw tabs with the same color as trailing whitespace  
    (add-hook 'font-lock-mode-hook  
              (lambda ()  
                (font-lock-add-keywords  
                  nil  
                  '(("\t" 0 'trailing-whitespace prepend)))))






== Show TABs Using a String (^I) ==

To make TAB display as ##^I##, you can do this:

 (standard-display-ascii ?\t "^I")




== Show TAB with Wide Cursor ==

Customize `x-stretch-cursor' to non-`nil' to make the cursor as wide as the character it is over.



== Get Rid of Tabs ==

If you want to change spaces into TABs or the other way around, use
`M-x tabify' or `M-x untabify'.  See also NoTabs.

----
CategoryDotEmacs
CategoryFaces
CategoryDisplay
