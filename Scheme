Scheme is a dialect of the LispLanguage concentrating on the "functional" subset of Lisp that introduced lexical scoping, closures, first class continuations (to Lisp).  Originally developed by GeraldSussman and GuySteele, the language has a very concise and clear standard
(see [http://www.schemers.org/Documents/Standards/R5RS/ R5RS].  Many schemers are proud of the fact that the R5RS Scheme standard is about 50 pages, shorter than the index table of the CommonLisp specification (see [Groups:scheme+standard&selm=sfwwvh5hxxh.fsf%40world.std.com KentPitman's post] for another opinion.)

* http://www.schemers.org/

It is widely used for teaching and research of programming language semantics, and was influential on the design of CommonLisp.

[[Guile]] is one of the GNU implementations of Scheme which may one day lurk in the bowels of a future release of Emacs instead of EmacsLisp -- GuileEmacs.

An existing implementation of [[Emacsen]] in Scheme is called EdWin and exists as part of the MitSlashGnuScheme implementation. 

== Interpreting Scheme in EmacsLisp ==

There is a Scheme interpreter written in EmacsLisp by NoahFriedman:

* http://www.splode.com/~friedman/software/emacs-lisp/src/czscm.el

A simpler interpeter written in EmacsLisp that supports a smaller ''core'' set of Scheme was written by KalleOlaviNiemitalo.

* Lisp:sie.el

== Running Scheme within Emacs ==

`M-x run-scheme' will run an external Scheme program for you. It is provided by CmuScheme. 

The default program name is `scheme'.  If your copy of scheme is called `guile' or something other, customize the variable `scheme-program-name'.

For a really good interface, check ILispMode. 

For a really nice mode for PLT Scheme (<nowiki>MzScheme, MrEd and
DrScheme</nowiki>) and other Schemes ([[Guile]]), see QuackMode.

There is also a hacked up completion mode for Plt Scheme which does
what the plt help desk does: PltCompletions

For Scheme documentation lookup, see InfoLook and SchemeLookup.

SchemeComplete provides R5Rs and some SRFI symbols completion and ElDoc support.

For running R6RS scripts with [[Ikarus]] and jumping to source locations displayed as part of a error message from Ikarus, there is [http://github.com/rotty/dotfiles/tree/master/.emacs.d/lisp/ikarus-script.el|ikarus-script.el].

For PLT Scheme/Racket, a new Emacs mode is available: [http://www.nongnu.org/geiser/ Geiser] (also supports Guile). On Debian or Ubuntu, it can be installed with ##sudo apt-get install geiser##.

[:SICP]
== SICP ==

A great textbook that uses Scheme is "Structure and Interpretation of
Computer Programs" (SICP) by HaroldAbelson, GeraldSussman and JulieSussman.  It is available online:

* http://www-mitpress.mit.edu/sicp/

and in Texinfo format:

* http://www.neilvandyke.org/sicp-texi/

Improved PDF with source:

* http://sicpebook.wordpress.com/

Some of the code has been implemented in EmacsLisp:

* Lisp:constraint.el
* Lisp:stream.el

----
CategoryProgramming
