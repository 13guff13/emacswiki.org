'''ParEdit''' (##paredit.el##) is a minor mode for performing structured editing of S-expression data. The typical example of this would be Lisp or Scheme source code.

%%ParEdit%% helps keep parentheses balanced and adds many keys for moving S-expressions and moving around in S-expressions.

'''The latest stable version is available at <tt>[http://mumble.net/~campbell/emacs/paredit.el paredit.el]</tt>.''' See also the [http://mumble.net/~campbell/emacs/paredit.html Reference Table], the [http://mumble.net/~campbell/emacs/paredit.release Release Notes] and the PareditCheatsheet.

The latest ''development'' version is available at <tt>[http://mumble.net/~campbell/emacs/paredit-beta.el paredit-beta.el]</tt> ([http://mumble.net/~campbell/emacs/paredit-beta.html Reference Table]).

A spinoff of %%ParEdit%% (by the same author) is also now available in the current CVS version of EdWin, MIT Scheme's Emacs clone. Type ##M-x paredit-mode RET## to enable it, or add the following code to your ##.edwin## file to enable it automatically in the Scheme mode:

    (add-event-receiver! (ref-variable scheme-mode-hook)
      (lambda (buffer)
        (enable-buffer-minor-mode! buffer (ref-mode-object paredit))))

(You can substitute other modes for ##scheme-mode## also.)

== Activate it automatically ==

To use %%ParEdit%% with Emacs' Lisp modes, add the following to <tt>[InitFile .emacs]</tt>:

    (autoload 'paredit-mode "paredit"
      "Minor mode for pseudo-structurally editing Lisp code." t)
    (add-hook 'emacs-lisp-mode-hook       (lambda () (paredit-mode +1)))
    (add-hook 'lisp-mode-hook             (lambda () (paredit-mode +1)))
    (add-hook 'lisp-interaction-mode-hook (lambda () (paredit-mode +1)))

== ParEdit and ElDoc ==

To use %%ParEdit%% with ElDoc, you should make !ElDoc aware of %%ParEdit%%'s most used commands:

    (require 'eldoc) ; if not already loaded
    (eldoc-add-command
     'paredit-backward-delete
     'paredit-close-round)

Whenever the listed commands are used, !ElDoc will automatically refresh the minibuffer.

== ParEdit and "Electric RET" ==

As a complement to ##paredit-close-round##'s behavior of "collecting closing parentheses", we may bind the ##RET## key to a command which temporarily pushes them onto the next line. This makes linewise editing easier.

: '''[http://img8.imageshack.us/img8/9479/openparen.gif Short video demonstration]'''

The following code (from the AutoPairs page) accomplishes this:

    (setq skeleton-pair t)
    (setq skeleton-pair-alist
          '((?\( _ ?\))
            (?[  _ ?])
            (?{  _ ?})
            (?\" _ ?\")))
    (defun autopairs-ret (arg)
      (interactive "P")
      (let (pair)
        (dolist (pair skeleton-pair-alist)
          (when (eq (char-after) (car (last pair)))
            (save-excursion (newline-and-indent))))
        (newline arg)
        (indent-according-to-mode)))
    (eldoc-add-command 'autopairs-ret) ; if using ElDoc
    (global-set-key (kbd "RET") 'autopairs-ret)

== Discussion ==

I downloaded %%ParEdit%% a long time ago, but I did not succeed in using it daily. I have two questions here:

1. What is really ''useful'' with %%ParEdit%% that we can't get with standard skeletons?

[new]

: Check out the %%ParEdit%% reference table mentioned above, especially the parts "Depth-Changing Commands" and "Barfage & Slurpage". Skeletons are like templates, they're static. %%ParEdit%% can modify the structure of Lisp code. So basically, they have different purposes. -- PeterBarabas

[new]

2. How do you delete a parenthesis? I often end up with unbalanced parentheses when coding something (without paredit), and activating %%ParEdit%% prevents me from deleting the leading parenthesis.

[new]

: It takes a bit of getting used to, but after that you'll never end up with unbalanced parentheses. Just use %%ParEdit%%'s commands, e.g., ##paredit-open-parenthesis##, ##paredit-wrap-sexp## instead of manually typing/editing parentheses. %%ParEdit%% really makes transforming Lisp code easy. -- PeterBarabas

[new]

: Expression validity isn't enforced with ##C-w##; I find that's the easiest way to make a quick fix that %%ParEdit%% won't like.

[new]

: ##C-u DEL## falls back to `backward-delete-char'. Similarly, you can insert single parentheses with ##C-q (## and ##C-q )##. -- YannHodique

[new]

: Works like a charm! -- XavierMaillard

[new]
I'm working on a mode for a syntax where m#foo is a legal symbol but otherwise, # comments out the line (like in shell scripts). For some reason, putting (paredit-mode 1) in a run-hook for this mode, or in sh-mode-hook, makes it complain on a line like (foo m#bar) with ''condition-case: Unmatched bracket or quote''. But, if I turn on paredit-mode _after_ doing ##M-x sh-mode##, it works fine, and I can edit around parens just as if they said (foo bar). Anyone know why this happens?

[new]

I'll bite.  Can anyone tell me what's going on in the "Short video demonstration" video above?  I turn on %%ParEdit%% and I don't get
newlines after my parens and I don't get it showing me what comes next after typing "defun".  If these are other major/minor modes
then the caption should be replaced with "Here's a demonstration of %%ParEdit%% playing nice with secret-mode.el and fun-minor-mode-that-were-keeping-secret-from-dale.el.

: -- Dale 

----
CategoryCode CategoryEditing CategoryParentheses.
