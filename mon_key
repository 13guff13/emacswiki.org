[:MON-PACKAGES]
= :MON-PACKAGES =

Following is organized roughly according to the load order whilst trying to convey how MON contextualizes packages. For a more detailed outline w/re load order :SEE [[#MON-LOAD-ORDER]] below.

[:MON-STARTUP-FILES]
== :MON-STARTUP-FILES ==

* Lisp:monDOTemacs.el -- Points to a local directory and load mon-site-local-defaults.
* Lisp:mon-site-local-defaults.el -- An example configuration of MON's `site-local-private.el' which acts as a bootstrap for mon-default-loads and helps to obfuscate information which needn't be revealed other packages.mon-drive-transfer-utils.el
* Lisp:mon-default-loads.el -- Setup the globals and base system portability.
* Lisp:mon-default-start-loads.el -- Setup any Emacs and Third party packages required.
* Lisp:mon-w32-load.el -- w32 specific features which must be present or are better left segregated.
* Lisp mon-GNU-load.el -- GNU/Linux specific features. Mostly for quick reconfiguration of Slime related stuff prior to slime-loads.el
* Lisp slime-loads.el -- Slime is a moving target with multiple backends for multiple languages. This is for sanity.
* Lisp:mon-keybindings.el -- Set global keybindings and mode specific stuff.
* Lisp:mon-post-load-hooks.el -- functions to evaluate after initializing MON Emacsen

[:MON-UTILS]
== :MON-UTILS ==
The package mon-utils is the entry point which loads the rest of the system and specifically any mon-*.el and naf-mode-*.el packages.

* Lisp:mon-utils.el -- (MonUtils) This package is the entry point that loads everything else below.
* Lisp:mon-dir-locals-alist.el -- MON global vars bound to commonly used local-site paths.
* Lisp:mon-dir-utils.el -- Provides a collection of handy functions and interactive commands for working with directories and files.
* Lisp:mon-insertion-utils.el -- Provides insertion related utilities, templates and string building/manipulation procedures that ease routine chores and interactive command invocation.
* Lisp:mon-replacement-utils.el -- Provides a collection of routines and commands and abstracts some commonly encountered procedures for processing regexps with their replacements.
* Lisp:mon-regexp-symbols.el -- Provides a collection of Symbols bound to lisp lists of regexp/replacement pairs. Allows simple easy interactive command invocation using symbols as arguments to containing lists of regexps.
* Lisp:mon-time-utils.el (EbayTime) --
* Lisp:mon-testme-utils.el --

[:MON-STANDARDS]
=== :MON-STANDARDS ===

* Lisp:mon-cl-compat.el -- This is intendeed to be used as a drop-in replacement for the cl-seq.el When compiling your packages: (eval-when-compile (require 'mon-cl-compat))
* Lisp:mon-cl-compat-regexps.el -- Provides regular expressions for replacing the symbol-names from the cl-seq.el package with a `cl::' prefix
* Lisp:mon-empty-registers.el (EmptyRegisters) -- Provides utilities for filling/emptying register locations en masse. Also provides interactive tools for register centric coercion, manipulation, round-tripping of chars, strings, etc.
* Lisp:mon-hash-utils.el -- Provides a collection of procedures to extend Emacs lisp hash table functionality.
* Lisp:mon-name-utils.el -- procedures to rotate, combine, and permute string-like name forms
* Lisp:mon-rename-image-utils.el (RenameImageUtils) -- Provides utility functions for working with images and EmacsImageManipulation.
* Lisp:mon-tramp-utils.el -- Provides cross platform utilities for working with tramp. This package should be compatible with both GNU/LINUX and w32 systems and helps MON with Emacs portability across environments.

[:MON-EXTRAS]
=== :MON-EXTRAS ===

* Lisp:mon-boxcutter.el -- For initializing w32 screen captures from Emacs using Matthew D. Rasmussen's Boxcutter screen-capture executables: boxcutter-fs.exe and boxcutter.exe
* Lisp:mon-color-utils.el -- Provides an assembled set of routines for manipulations/examinations of 'color'.
* Lisp:mon-mysql-utils.el (MySqlHelp) -- Provides interactive procedures for stripping content from MySQL query result tables.  Also, provides an alist of MySQL help categories and topics and a rudimentary completion functionality for accessing MySQL's `mysql' client help facility.
* Lisp:mon-url-utils.el -- Provides utilities for interactively calling URL data lookups and for in
;;; buffer modification of web/internet scrapes.
* Lisp:mon-jg-directory-creator.el -- utils for massive directory hierarchy creation.
* Lisp:mon-wget-utils.el -- Provides lightweight routines for pulling files with wget.
* Lisp:mon-get-mon-packages.el -- Pull em all with wget
* Lisp:mon-get-freenode-lisp-logs -- Pull freenode logs for #lisp with wget
* Lisp:mon-cifs-utils.el -- (MonCifsUtils) Provides utilities for mapping and mounting a CIFS domain using auth-source. Common Internet File System protocol, e.g. successor to the SMB (Server Message Block) protocol with the Samba Server.
* Lisp:google-define-redux.el -- Extends Lisp:google-define.el
* Lisp:google-define-redux-supplemental.el -- google-define-redux supplemental functions (avoid MON dependencies).
* Lisp:mon-color-occur.el -- A patched version of Matsushita Akihisa color-cccur.el :SEE http://www.bookshelf.jp/elc/color-occur.el
* Lisp:mon-rename-image-utils-supplemental.el --
* Lisp:mon-css-check.el -- This is Niels Giss css-check.el with MON documentation features and minor changes :SEE http://github.com/pft/elisp-assorted/blob/master/css-check.el
* Lisp:mon-css-color.el -- This is css-color.el version "0.03" of 2008 e.g. CssColor without NxhtmlMode dependencies.
* Lisp:mon-css-complete.el -- This is a highly modified version of Niels Giesen's css-complete.el :SEE http://github.com/pft/elisp-assorted/blob/master/css-complete.el
* Lisp:mon-drive-transfer-utils.el -- Template builder for transferring backing up large harddrives.
[:MON-DOC-UTILS]
=== :MON-DOC-UTILS ===

* Lisp:mon-doc-help-utils.el -- (ReferenceSheetHelpUtils) (MonDocHelpUtilsDictionary)
* Lisp:mon-doc-help-utils-supplemental.el -- Provides functions and vars required to bootstrap mon-doc-help-utils
* Lisp:mon-doc-help-css.el -- Extends Lisp:mon-doc-help-utils.el with CSS related docs
* Lisp:mon-doc-help-pacman.el -- Some help functions for using the package manager with the GNU/Linux Arch distribution.
* Lisp:mon-doc-help-tidy.el -- Extends Lisp:mon-doc-help-utils.el package with HTML Tidy docs.
* Lisp:mon-doc-help-CL.el -- Some Emacs Lisp help functions for using Common-Lisp functions (loop, do, etc.)
* Lisp:mon-doc-help-proprietary.el -- Extends mon-doc-help-utils with ms w32 related docs.
* Lisp:mon-iptables-regexps.el -- Provides interactive utilities for converting iptables short flags to long flags.  Also provides procedures for using Emacs help-mode to document the order of position for the symbols, flags, etc. used with `iptables' AKA `netfilter'.
* Lisp:mon-iptables-vars.el -- Provides gigantic alist `*mon-iptables-alst*' needed for use with mon-iptables-regexps
* Lisp:perlisisms.el (Perlisisms) -- 
* Lisp:STING-software-engineering-glossary.el --

[:EBAY-TOOLS]
=== :EBAY-TOOLS ===

* Lisp:ebay-template-mode.el -- 
* Lisp:ebay-template-tools.el -- 

[:NAF-MODE]
=== :NAF-MODE ====

* Lisp:naf-mode.el -- naf-mode is a major mode for editing NAFs (Name Authority Files). naf-mode provides utilities for working with and unifying authority records of various public accessible datasets LOC, BNF, ULAN, OCLC, Wikipedia, IMDB, etc. This package provides the core naf-mode facilities and require statements for loading the other naf-mode-*.el packages below.
* Lisp:naf-mode-faces.el -- 
* Lisp:naf-mode-insertion-utils.el -- 
* Lisp:naf-mode-replacements.el -- 
* Lisp:naf-mode-classes.el -- 
* Lisp:naf-mode-db-fields.el -- 
* Lisp:naf-mode-db-flags.el -- keyword lists and regexps for font-locking in `naf-mode'
* Lisp:naf-mode-dates.el -- regexp variables for matching dates in `naf-mode' Name Authority files
* Lisp:naf-mode-french-months.el -- 
* Lisp:naf-mode-nation-english.el -- 
* Lisp:naf-mode-nation-french.el -- 
* Lisp:naf-mode-nationality-english.el -- 
* Lisp:naf-mode-nationality-french.el -- 
* Lisp:naf-mode-intnl-city-names.el -- 
* Lisp:naf-mode-city-names-us.el -- 
* Lisp:naf-mode-state-names.el -- 
* Lisp:naf-mode-regions.el -- 
* Lisp:naf-mode-publications-periodicals-english.el -- 
* Lisp:naf-mode-publications-periodicals-french.el -- 
* Lisp:naf-mode-publications-periodicals-intnl.el -- 
* Lisp:naf-mode-institution.el -- 
* Lisp:naf-mode-students-of-julian.el -- 
* Lisp:naf-mode-events.el -- 
* Lisp:naf-mode-english-roles.el -- 
* Lisp:naf-mode-french-roles.el -- 
* Lisp:naf-mode-awards-prizes.el -- 
* Lisp:naf-mode-group-period-styles.el -- 
* Lisp:naf-mode-art-keywords.el -- 
* Lisp:naf-mode-benezit-flags.el -- 
* Lisp:naf-mode-ulan-utils.el -- utility fncns for converting ULAN data for naf-mode
* Lisp:naf-mode-xrefs.el -- xrefing variable list of corelated naf-mode symbols

[:MON-LOAD-ORDER]
== :MON-LOAD-ORDER ==

<pre>
Roughly the sequence with which MON brings his Emacs' systems up. 

:NOTE Not all of these libraries are required to get a working system but as MON
stacks dependencies it may be helpful to remember that anything loaded from
naf-mode.el or that has the ``naf-'' prefix can be ommitted. Libraries with a
``-utils' suffix will most likely get pulled in by a require
statement. 

Libraries with a ``supplemental'' suffix are an attempt to provide feature
subsets without requiring you to load the full Monty. Eventually with some
judicious use of autoloads MON should be able to provide these with a lighter
footprint. Likewise, if/when a transition to defcustoms occurs you might be able
to rule out using a heavy set. Though, at that point you'll be stuck in
defcustom hell :P ...

¦monDOTemacs.el
¦► mon-site-local-defaults.el
¦►► mon-default-loads.el
¦►►► mon-default-start-loads.el
¦►►►► mon-w32-load.el
¦     mon-GNU-load.el
¦►►►►► slime-loads.el
¦►►►►► mon-keybindings.el
¦►►► mon-utils.el
¦►►►► mon-cl-compat.el
¦►►►►► mon-cl-compat-regexps.el
¦►►►► mon-regexp-symbols.el
¦►►►► mon-time-utils.el
¦►►►► mon-replacement-utils ;; :BEFORE mon-dir-utils.el naf-mode-insertion-utils.el
¦►►►► mon-dir-locals-alist.el
¦►►►► mon-dir-utils.el
¦►►►► mon-cifs-utils.el
¦►►►► mon-insertion-utils.el
¦►►►► mon-testme-utils.el
¦►►►► naf-mode-insertion-utils.el
¦►►►► mon-url-utils.el
¦►►►► mon-hash-utils.el
¦►►►► mon-doc-help-utils.el
¦►►►►► mon-doc-help-proprietary.el
¦►►►►► mon-doc-help-pacman.el
¦►►►► mon-doc-help-CL.el
¦►►►► mon-tramp-utils.el
¦►►►► naf-skeletons.el
¦►►►► naf-mode.el
¦►►►►► mon-name-utils.el
¦►►►►► naf-mode-faces.el
¦►►►►► naf-mode-institution ;; :AFTER naf-mode-faces.el
¦►►►►► naf-mode-db-fds.el
¦►►►►► naf-mode-db-flags.el
¦►►►►► naf-mode-ulan-utils.el
¦►►►►► naf-mode-publications-periodicals-french.el
¦►►►►► naf-mode-publications-periodicals-english.el
¦►►►►► naf-mode-publications-periodicals-intnl.el
¦►►►►► naf-mode-dates.el
¦►►►►► naf-mode-english-roles.el
¦►►►►► naf-mode-french-roles.el
¦►►►►► naf-mode-nation-english.el
¦►►►►► naf-mode-nation-french.el
¦►►►►► naf-mode-nationality-french.el
¦►►►►► naf-mode-nationality-english.el
¦►►►►► naf-mode-state-names.el
¦►►►►► naf-mode-city-names-us.el
¦►►►►► naf-mode-intnl-city-names.el
¦►►►►► naf-mode-regions.el
¦►►►►► naf-mode-art-keywords.el
¦►►►►► naf-mode-events.el
¦►►►►► naf-mode-group-period-styles.el
¦►►►►► naf-mode-benezit-flags.el
¦►►►►► naf-mode-awards-prizes.el
¦►►►►► naf-mode-students-of-julian.el
	Following naf-mode files are still in development/transition but also loaded from naf-mode.el
¦¦►►►►► naf-mode-abbrevs.el
¦¦►►►►► naf-mode-awards-prizes.el
¦¦►►►►► naf-mode-bibliographic-entry.el
¦¦►►►►► naf-mode-classes.el
¦¦►►►►► naf-mode-ulan-help-docs.el
¦¦►►►►► naf-mode-xrefs.el
¦►►►► ebay-template-mode.el
¦►►►► mon-empty-registers.el
¦►►►► mon-iptables-vars.el
¦►►►► mon-iptables-regexps.el
¦►►►► mon-mysql-utils.el
¦►►►► mon-drive-transfer-utils.el 
¦►►►► mon-bzr-utils.el -- Not provided here yet.
¦►►►► mon-eight-bit-raw-utils.el -- Not provided here yet.
¦¦►►►► naf-mode-sql-skeletons.el -- Not provided here. It is mostly a collection of SQL statement.
¦¦►►►► smith-poster-utils.el --  Not provided here.
¦► mon-post-load-hooks.el
</pre>


 =]

/s_P\

----
CategoryHomepage
