Directions on building Emacs "from source" come with Emacs in the file `INSTALL'.

The following are some other notes.

==Storage and performance requirements==

Currently, mid 2005, the actual sources require little more than
85MB of storage.  On the GNU system [[tekonivel]]
compiled it on, some 130MB worth of stuff was generated by the build
process.  This naturally depends on compile-time options and the
system type.  [[tekonivel]]'s machine is an Alpha-based DIGITAL Server
5303.  The compiled and installed Emacs will finally take about 100MB,
or so the rumour on EmacsChannel says.  So at the most,
over 300MB free space could be required for the build.

On DIGITAL Server 5305 with a gigabyte of RAM it takes pretty much an
hour of combined time, by far most of which was user-time.


==Notes regarding the building process==

For the actual building, some sort of a C development system is
required, obviously.  Many unixish operating systems come with one
that's suitable, or some third party system can be installed, for
example the one from GNU.  The INSTALL files under each architectures
subdirectory in the Emacs source tree describe the compilers
supported.

As usual, one ought to read through the standard GNU readme-files
before configuring and building.  ''README'' and ''INSTALL'' are
generic, and ''INSTALL.CVS'' is a must for everyone who's got their
sources from CVS.  Most importantly one initiates the first build
process with <code>make bootstrap</code>, instead of the canonical
<code>make</code>, using the default target.  When compiling again,
one uses the default target, not ''bootstrap''.  One also had better
to take a look the documentation specific to each architecture, under
the relevant subdirectories.

Note that the bootstrap target overwrites some files which are under
CVS control (in particular, <code>lisp/loaddefs.el</code> and
<code>lisp/cus-load.el</code>).  So subsequent CVS updates might lead
to CVS conflicts.  If such a conflict arises, just overwrite your copy
of the file with a clean copy from the CVS repository, for example by
issuing the following command:

    cvs update -C lisp/cus-load.el

===Flavours of unix===

Emacs ought to compile fairly easily on most flavours of unix.
Basically the usual <code>./configure && make && make install</code>
workout is supposed to suffice, but with the <code>make
bootstrap</code> mentioned above.  The GNU development tools are often
available on other flavours of unix too, and if they are, they're
usually the defaults.

It should be trivial to build EmacsOnGnuLinux, as well as on GNU
systems with a different kernel.  If you're using EmacsCvsAndDebian,
you'd better just install the official packages (emacs-snapshot).  Gentoo GNU/Linux
has direct support for building EmacsForGentoo.  If you have Gentoo
"unstable" (eg. <code>ACCEPT_KEYWORDS="~x86"</code> in your
<code>/etc/make.conf</code>), use <code>emerge emacs-cvs</code>.  If
you have Gentoo "stable" keywords, use <code>ACCPEPT_KEYWORDS=~x86
emerge emacs-cvs</code>

If your building process on Linux stops with segfault check
<code>etc/PROBLEMS</code> file about Exec-shield problem
description.

If you want to use the gtk-toolkit in combination with gtk+ from
garnome you probably have to use

    make bootstrap TEMACS_LDFLAGS="-R/path/to/garnome/lib -R/usr/X11R6/lib -z nocombreloc"

If your compiled Emacs fails with "Cannot open termcap database file",
chances are that you need to install the development headers for ncurses
(in Debian libncurses5-dev).  If these are not present, Emacs believes
that your system uses termcap instead of terminfo, which is usually not
the case.

===Windows===

BuildingOnWindowsTableofContents lists other pages of interest.

Windows NT & MS Visual C++: After doing <code>configure
--bootstrap</code> in the ''nt'' -subdir, 'nmake' fails cause several
makefiles contain extra carriage return characters. You have to
eliminate them with an editor of your choice ;-)

If building with MSVC and you have cygwin, you should be sure that the msvc version of "link" is in your path before the gcc version.

==Worries and problems==

===Changing `prefix' at install time===

Sorry to interrupt the flow of this page, but I just built Emacs from
CVS and I have one complaint.  The Makefile does not allow for a
DESTDIR at install time.  If somebody more clued in that I could add
that functionality to Emacs Makefile (I guess it would go in
Makefile.am??) that would make building Slackware packages so much
cleaner.

[new]
That's intentional, I would say.  The Emacs binary contains the
path to some auxiliary files hard-coded.  Thus changing the
installation path (using <code>make prefix=/your/new/path
install</code>) will cause Emacs to get recompiled.  The workaround is
to call <code>make</code> with the pre-requisites of install
(excluding <code>all</code>) explicitly:

   make prefix=/your/new/path install-arch-indep install-arch-dep install-leim blessmail

I learned about this trick in the documentation of GnuStow.

[new]
This sounds strange. Why can't you just use this?:

   make install install_dir=/your/new/path

--> because it completely ignores that and continues to install in /usr/local, which is clearly wrong.

----
CategoryBuilding
