Click on the header to list all pages related to debugging.

    <kensanata> everytime emacs encounters an error in InitFile,
      emacs cries a little.

Debugging Emacs:

* DebugEmacs -- debug the C layer using gdb
* DebugMessages -- find out where *Messages* messages are coming from
* EmacsMemoryDebugging -- look for memory leaks

Debugging EmacsLisp:

* DebuggerMode -- debugging EmacsLisp
** BacktraceBuffer -- quick and dirty EmacsLisp debugging happens in the *Backtrace* buffer
** SourceLevelDebugger -- the full Edebug for EmacsLisp
* DebugFileLoading -- finding errors in files
* DataDebug -- Examine large complex Emacs Lisp data structures

Debugging other programs using Emacs:

* DebuggingWithEmacs usually involves the GrandUnifiedDebugger (GUD) as an interface to command line debuggers such as gdb, dbx, cdb,....
** GdbMode -- a debugger mode specialized for gdb
** PdbNotes -- additional setup info for python

* There is a rewrite of GUD from scratch (https://github.com/rocky/emacs-dbgr/wiki). The debuggers supported include:
** bashdb  --  Bash debugger (http://bashdb.sf.net)
** gdb     --  can be run stand-alone or from an existing a comint "track-mode" shell
** kshdb   --  Ksh debugger
** perl    --  can be run stand-alone or from an existing a comint "track-mode" shell
** pydb    --  Python debugger (but please use the newer pydbgr instead)
** pydbgr  --  Python debugger (http://code.google.com/p/pydbgr/)
** rdebug  --  Ruby debugger ruby-debug 
** remake  --  GNU make debugger (http://bashdb.sf.net/remake)
** trepan  --  Ruby 1.9 YARV debugger (https://github.com/rocky/rb-trepanning/wiki)
** trepanx --  Ruby debugger for Rubinius (https://github.com/rocky/rbx-trepanning/wiki)
** zshdb   --  Zsh debugger 
* VisualCDebugger -- interfacing with the Visual C++ debugger
