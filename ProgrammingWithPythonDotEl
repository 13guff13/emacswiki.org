[http://www.loveshack.ukfsn.org/emacs/python.el python.el] ( or loveshack python.el ) from [http://www.loveshack.ukfsn.org/emacs/ Emacs bits], is a major mode for editing Python. 

A version of this is included in Emacs 22, but has assorted problems this one doesn't.
:This pages assumes you're using this version. Maybe another page could be started for the *other* python.el that comes with emacs?

Emacs 21 and earlier had their own python mode, enabled by default, with properly-integrated support for things like completion, symbol help, eldoc, and inferior interpreter features.
 See ProgrammingWithPythonModeDotEl


This mode assumes [http://www.loveshack.ukfsn.org/emacs/sym-comp.el sym-comp.el] is loaded and requires [http://www.loveshack.ukfsn.org/emacs/#emacs.py emacs.py] in Emacs' etc directory, i.e. data-directory, or somewhere else Python can find it.

[http://www.loveshack.ukfsn.org/emacs/#python-21.el python-21.el] is a version of python.el that works (with some deficiencies) in Emacs 21, but additionally requires the library [http://cvs.savannah.gnu.org/viewcvs/*checkout*/emacs/emacs/lisp/emacs-lisp/syntax.el?rev=1.16 syntax.el] from Emacs 22.

Also [http://www.loveshack.ukfsn.org/emacs/eldoc.el eldoc.el] is Emacs 22's eldoc.el hacked to work in Emacs 21.

Recent changes to python.el are listed in [http://www.loveshack.ukfsn.org/emacs/NEWS.python NEWS.python].

== unofficial status ===

Patches were submitted to the Emacs maintainers, but were not used.
see [http://www.loveshack.ukfsn.org/emacs/#python.el homepage].
: need more info? --CH

== comparison to python-mode.el ===

In python-mode.el RET is bound to py-newline-and-indent, which  indents the next line if necessary.  In python.el this is bound to C-j instead.  You can get the previous behavior with this in your InitFile:

 (add-hook 'python-mode-hook '(lambda () (define-key python-mode-map "\C-m" 'newline-and-indent)))

Using python-complete-symbol in the inferior python buffer causes an infinite loop in python.el as of 080117, changing python-imports from the default nil to 'None' solves this. 2008-01-17, patch submitted.

:I’m a little confused - It appears when I set flymake-mode to be automatically on for python mode, py-help-at-point doesn’t work. I tried switching from python-mode.el to python.el, but not this doesn’t seem to solve it; However, there is no advice here on *how* to use python.el, so I’m not entirely sure I’m doing it right...
:: The above refers to python.el as packaged with Emacs 22; loveshack-python.el completion can't generally work in the inferior buffer because it sends input to that buffer.  The loveshack- python.el doesn't actually define python-complete-symbol.  You can use the interpreter rlcompleter module as normal if you want.

== YaSnippet ===

see [http://groups.google.com/group/smart-snippet/browse_thread/thread/d1eae085ceebf839 this post]

== Documentation ===

'python-describe-symbol' tries to get doc in the context of what the source file imports (be sure to first run the Python interpreter [C-c !]).

ElDoc,
: Does it work with python.el? python.el is supposed to have superior support for this, but I can't get it to work; it worked alright in python-mode.el though! -- CH
:: nevermind, it works now. shows up in the mini-buffer when you type a function name. -- CH
:: It may have stopped working when my 'imports' were incomplete. check that the computed value of 'python-imports' is sensible! --CH

== CEDET ==

[[CEDET]] is now part of emacs (but I still recommend getting the latest version). It includes things, like completion, and folding, such that some things here may not be required.

== Indentation and folding ===

python.el includes a regexp for outliner-mode, and hs-mode too.

Since white space is significant in python, correct indent functions are vital, thought these might overload the tab key.
: guess indent? or do something! maybe a 'fix syntax' key? py-smart? -- CH
: tab to guess or max indent, backspace to reduce? This appear to be a function already. -- CH

See SmartTabs (toc5) or TabCompletion (tabkey2 stuff)

== Useful Functions ===

python-end-of-block instead of py-next-block?

== auto-complete ==

The following will integrate python.el completions with auto-complete. You need to have installed and loaded auto-complete.el first:


(defvar ac-source-python
  '((candidates .

		(lambda ()

		  (mapcar '(lambda (completion)

			     (first (last (split-string completion "\\." t))))

			  (python-symbol-completions (python-partial-symbol)))))))


(add-hook 'python-mode-hook

	  (lambda() (setq ac-sources '(ac-source-python))))

