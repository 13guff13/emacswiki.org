[http://www.loveshack.ukfsn.org/emacs/python.el python.el] ( or loveshack python.el ) from [http://www.loveshack.ukfsn.org/emacs/ Emacs bits], is a major mode for editing Python. 

A version of this is included in Emacs 22, but has assorted problems this one doesn't.

Emacs 21 and earlier had their own python mode, enabled by default, with properly-integrated support for things like completion, symbol help, eldoc, and inferior interpreter features.
 See ProgrammingWithPythonModeDotEl


This mode assumes [http://www.loveshack.ukfsn.org/emacs/sym-comp.el sym-comp.el] is loaded and requires [http://www.loveshack.ukfsn.org/emacs/#emacs.py emacs.py] in Emacs' etc directory, i.e. data-directory, or somewhere else Python can find it.

[http://www.loveshack.ukfsn.org/emacs/#python-21.el python-21.el] is a version of python.el that works (with some deficiencies) in Emacs 21, but additionally requires the library [http://cvs.savannah.gnu.org/viewcvs/*checkout*/emacs/emacs/lisp/emacs-lisp/syntax.el?rev=1.16 syntax.el] from Emacs 22.

Also [http://www.loveshack.ukfsn.org/emacs/eldoc.el eldoc.el] is Emacs 22's eldoc.el hacked to work in Emacs 21.

Recent changes to python.el are listed in [http://www.loveshack.ukfsn.org/emacs/NEWS.python NEWS.python].

== unofficial status ===

Patches were submitted to the Emacs maintainers, but were not used.
see [http://www.loveshack.ukfsn.org/emacs/#python.el homepage].
: need more info? --CH

== comparison to python-mode.el ===

In python-mode.el RET is bound to py-newline-and-indent, which  indents the next line if necessary.  In python.el this is bound to C-j instead.  You can get the previous behavior with this in your InitFile:

 (add-hook 'python-mode-hook '(lambda () (define-key python-mode-map "\C-m" 'newline-and-indent)))

Using python-complete-symbol in the inferior python buffer causes an infinite loop in python.el as of 080117, changing python-imports from the default nil to 'None' solves this. 2008-01-17, patch submitted.

:I’m a little confused - It appears when I set flymake-mode to be automatically on for python mode, py-help-at-point doesn’t work. I tried switching from python-mode.el to python.el, but not this doesn’t seem to solve it; However, there is no advice here on *how* to use python.el, so I’m not entirely sure I’m doing it right...
:: The above refers to python.el as packaged with Emacs 22; loveshack-python.el completion can't generally work in the inferior buffer because it sends input to that buffer.  The loveshack- python.el doesn't actually define python-complete-symbol.  You can use the interpreter rlcompleter module as normal if you want.

== YaSnippet ===

see [http://groups.google.com/group/smart-snippet/browse_thread/thread/d1eae085ceebf839 this post]

== Documentation ===

'python-describe-symbol' tries to get doc in the context of what the source file imports (be sure to first run the Python interpreter [C-c !]).

ElDoc,
: Does it work with python.el? python.el is supposed to have superior support for this, but I can't get it to work; it worked alright in python-mode.el though! -- CH
:: nevermind, it works now. shows up in the mini-buffer when you type a function name. -- CH

== CH ==

This is a dump of my-python.el where I keep my python modifications,
little code is originally mine, but I forgot where I copied alot of it from.

<pre>
;;; my-python.el --- Python mode customizations

(autoload 'python-mode "python" "Python editing mode." t)

(defun py-outline-level ()
  (let (buffer-invisibility-spec)
    (save-excursion
      (skip-chars-forward "\t ")
      (current-column))))

(add-hook 'python-mode-hook

  '(lambda () (progn
    (require 'pymacs)
    (ropemacs-load)
        ;(pair-mode)
    (auto-complete-mode 1)
    (eldoc-mode 1)
    (set (make-local-variable 'ac-sources) (append ac-sources '(ac-source-rope) '(ac-source-yasnippet)))
    (set (make-local-variable 'ac-find-function) 'ac-python-find)
    (set (make-local-variable 'ac-candidate-function) 'ac-python-candidate)
    (set (make-local-variable 'ac-auto-start) nil)
    (set (make-variable-buffer-local 'beginning-of-defun-function) 'py-beginning-of-def-or-class)
    (set (make-local-variable 'indent-tabs-mode) nil) ; Turn off Indent Tabs mode.
    (setq outline-regexp "[^ \t]\\|[ \t]*\\(def\\|class\\) ")
    (defun py-outline-level ()
      (let (buffer-invisibility-spec)
        (save-excursion
          (skip-chars-forward "\t ")
          (current-column))))
    (setq outline-level 'py-outline-level)
    (global-set-key (kbd "C-x t") 'outline-toggle-children) ; find better bindings!
    (outline-minor-mode t)
    (hide-body)
    (show-paren-mode 1)
    ;(highlight-beyond-fill-column)
    (set-variable 'outline-regexp "def\\|class ")
    (global-set-key (kbd "M-s") 'flymake-mode)
    (global-set-key (kbd "RET") 'newline-and-indent)
    (global-set-key (kbd "C-x SPC") 'python-command-line)
    (global-set-key (kbd "C-x n") 'flymake-goto-next-error)
    (global-set-key (kbd "<backtab>") 'python-tab-completion)
    (global-set-key (kbd "M-n") 'python-describe-symbol)) t))

(defun flymake-pylint-init ()
  (let* ((temp-file (flymake-init-create-temp-buffer-copy 'flymake-create-temp-inplace))
         (local-file (file-relative-name temp-file (file-name-directory buffer-file-name))))
    (list "epylint" (list local-file))))
(add-to-list 'flymake-allowed-file-name-masks '("\\.py\\'" flymake-pylint-init))

;; auto-complete
(defun ac-python-find ()
  "Python `ac-find-function'."
  (require 'thingatpt)
  (let ((symbol (car-safe (bounds-of-thing-at-point 'symbol))))
    (if (null symbol)
        (if (string= "." (buffer-substring (- (point) 1) (point)))
            (point)
          nil)
      symbol)))

(defun ac-python-candidate ()
  "Python `ac-candidates-function'"
  (let (candidates)
    (dolist (source ac-sources)
      (if (symbolp source)
          (setq source (symbol-value source)))
      (let* ((ac-limit (or (cdr-safe (assq 'limit source)) ac-limit))
             (requires (cdr-safe (assq 'requires source)))
             cand)
        (if (or (null requires)
                (>= (length ac-target) requires))
            (setq cand
                  (delq nil
                        (mapcar (lambda (candidate)
                                  (propertize candidate 'source source))
                                (funcall (cdr (assq 'candidates source)))))))
        (if (and (> ac-limit 1)
                 (> (length cand) ac-limit))
            (setcdr (nthcdr (1- ac-limit) cand) nil))
        (setq candidates (append candidates cand))))
    (delete-dups candidates)))

(defun python-tab-completion ()
  (interactive)
  (if (eql (ac-start) 0)
      (message "no completions")))
</pre>

== Indentation ===

Since white space is significant in python, correct indent functions are vital, thought these might overload the tab key.
: guess indent? or do something! maybe a 'fix syntax' key? py-smart? -- CH
: tab to guess or max indent, backspace to reduce? This appear to be a function already. -- CH

See SmartTabs (toc5) or TabCompletion (tabkey2 stuff)

== Other ===

: ORG-MODE like functionality would be useful eg. folding of definitions, left/right indentation levels, S-indent for entire tree! -- CH

== Useful Functions ===

python-end-of-block instead of py-next-block?
