An idempotent command is a command whose effect when called twice is the same as when called once.  For example, `recenter' (center point in window and redisplay frame), commonly called by `C-l', is idempotent because `C-l' has the same effect as `C-l C-l'.

The code snippet below lets one make use of the sequential `C-l C-l', `C-l C-l C-l', ... keystrokes. As `C-l' is hit, `(recenter nil)', `(recenter 1)', and `(recenter -2)' will be called in order, wrapping back if `C-l' continues to be hit.

{{{
(defvar my-recenter-points nil)

(defun my-recenter (&optional arg)
  "Move current line to window's center, top, and bottom, successively.
With a prefix argument, this is the same as `recenter'."
  (interactive "P")
  (if arg
      (recenter arg)
    (progn
      (if (or (not (eq last-command this-command))
              (null my-recenter-points))
          (setq my-recenter-points '(nil 0 -1)))
      (funcall 'recenter (pop my-recenter-points)))))

(global-set-key (kbd "C-l") 'my-recenter)
}}}

-- Anonymous, 2006-07-06

[new:DrewAdams:2007-11-06 18:50 UTC]
In library Lisp:misc-cmds.el, command `recenter-top-bottom' cycles through ##(recenter)##, ##(recenter 0)##, and ##(recenter -1)##. Library Lisp:setup-keys.el binds this to `C-l'. This means that `C-l' cycles, putting the current line in the center of the window, at the window top, and at the window bottom. And you can still use a prefix arg to explicitly say which line to use. -- DrewAdams

----
CategoryCommands

