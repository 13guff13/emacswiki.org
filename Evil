[[image/right:EvilLogo]]

'''Evil''' is an '''e'''xtensible '''vi''' '''l'''ayer for Emacs. It provides Vim features like Visual selection and text objects, and is the successor to [[Vimpulse]] and [VimMode vim-mode].

== Quick install ==

Using [[el-get]], Evil can be downloaded and installed with: ##M-x el-get-install RET evil RET##.

== Download ==

Alternatively, Evil lives in a Git repository. To download Evil, do:

    git clone git://gitorious.org/evil/evil.git

If you don't have Git, just head over to [https://gitorious.org/evil/evil/commits/master Gitorious] and click the ''"Download master as tar.gz"'' link (extract with ##tar -xzf master.tar.gz##).

== Install ==

Move Evil to ##~/.emacs.d/evil## (or somewhere else in your ##load-path##). Then add the following lines to ##~/.emacs##:

    (add-to-list 'load-path "~/.emacs.d/evil")
    (require 'evil)
    (evil-mode 1)

If your .emacs file has a custom-set-variables section, you should place it after Evil.

Evil requires [UndoTree undo-tree.el] in the ##load-path## for linear undo and undo branches. Otherwise, Evil uses regular Emacs undo.

== Documentation ==

A brief [https://gitorious.org/evil/evil/blobs/raw/doc/doc/evil.pdf PDF manual] is available in the ##/doc## subdirectory.

== Plug-ins ==

* [https://github.com/timcharper/evil-surround evil-surround]: Port of Vim's surround script.

* [https://github.com/cofi/evil-numbers evil-numbers]: Vim-like increment and decrement.

* [https://github.com/cofi/evil-leader evil-leader]: Port of Vim's mapleader.

* [https://github.com/antono/evil-rails evil-rails]: Port of rails.vim.

== Bug tracker ==

If you have bug reports or suggestions, please submit them at the [https://bitbucket.org/lyro/evil/issues?status=new&status=open BitBucket bug tracker] (open for all).

== Discussion ==

: ''(Evil is also discussed at the [http://lists.ourproject.org/cgi-bin/mailman/listinfo/implementations-list gmane.emacs.vim-emulation] mailing list.)''

[new]
It would be nice with a brief overview over the objectives and difference to [ViperMode Viper].

: The main difference is that while Viper emulates classical vi, Evil emulates Vim. It therefore sports additional features like Visual selection and text objects. Evil also attempts to integrate with Emacs: for example, repetition is implemented in terms of keyboard macros. At the most basic level, Evil is just a collection of key bindings that can be extended and adapted to any Emacs mode.

=== Passthrough function ===

Sometimes I want to send a single command in emacs state.  Rather than switch to emacs state, press the key, and back, I wanted a prefix-type key that would let me run a command based on the emacs keymaps, and then return to motion or normal state.  So, I wrote this:

    (defun evil-passthrough ()
      "Accept a key, switch to emacs state, process that key, and leave emacs state."
      (interactive)
      (let ((next-key (read-event)))
        (progn
          (evil-emacs-state)
          (setq unread-command-events (list next-key))
          (run-with-idle-timer 1 nil (lambda () (evil-exit-emacs-state))))))

    (global-set-key (kbd "M-p") 'evil-passthrough)

But this doesn't work when the command uses the minibuffer (evil mode gets messed up). :-(

[new]
In Normal state, you can use the ##\## key to switch to Emacs state for the duration of one command: e.g., ##\e## executes ##e## in Emacs state. You can also switch indefinitely to Emacs state with ##C-z##; press ##C-z## again to switch back to Normal state. -- VegardOye

[new]
Thanks, works great! -- Volfy

=== Vim tabs ===
The first thing I missed of Vim were the tabs. With elscreen.el and its dependencies installed, the following code emulates part of the Vim behaviour:

    (load "elscreen" "ElScreen" t)

    (define-key evil-normal-state-map (kbd "C-w t") 'elscreen-create) ;creat tab
    (define-key evil-normal-state-map (kbd "C-w x") 'elscreen-kill) ;kill tab

    (define-key evil-normal-state-map "gT" 'elscreen-previous) ;previous tab
    (define-key evil-normal-state-map "gt" 'elscreen-next) ;next tab


----
CategoryKeys CategoryEmulation
