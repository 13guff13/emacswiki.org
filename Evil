[[image/right:EvilLogo]]

'''Evil''' is an '''e'''xtensible '''vi''' '''l'''ayer for Emacs. It provides Vim features like Visual selection and text objects, and is the successor to [[Vimpulse]] and [VimMode vim-mode].

== Quick install ==

Using [[el-get]], Evil can be downloaded and installed with: ##M-x el-get-install RET evil RET##.

== Download ==

Alternatively, Evil lives in a Git repository. To download Evil, do:

    git clone git://gitorious.org/evil/evil.git

If you don't have Git, just head over to [https://gitorious.org/evil/evil/commits/master Gitorious] and click the ''"Download master as tar.gz"'' link (extract with ##tar -xzf master.tar.gz##).

== Install ==

Move Evil to ##~/.emacs.d/evil## (or somewhere else in your ##load-path##). Then add the following lines to ##~/.emacs##:

    (add-to-list 'load-path "~/.emacs.d/evil")
    (require 'evil)
    (evil-mode 1)

If your .emacs file has a custom-set-variables section, you should place it after Evil.

Evil requires [UndoTree undo-tree.el] in the ##load-path## for linear undo and undo branches. Otherwise, Evil uses regular Emacs undo.

== Documentation ==

A brief [https://gitorious.org/evil/evil/blobs/raw/doc/doc/evil.pdf PDF manual] is available in the ##/doc## subdirectory.

== Plug-ins ==

* [https://github.com/timcharper/evil-surround evil-surround]: Port of Vim's surround script.

* [https://github.com/cofi/evil-numbers evil-numbers]: Vim-like increment and decrement.

* [https://github.com/cofi/evil-leader evil-leader]: Port of Vim's mapleader.

* [https://github.com/antono/evil-rails evil-rails]: Port of rails.vim.

== Bug tracker ==

If you have bug reports or suggestions, please submit them at the [https://bitbucket.org/lyro/evil/issues?status=new&status=open BitBucket bug tracker] (open for all).

== Managing keymaps ==

If you want to use the full power of Emacs in Vim-like ways (ie using short key sequences near home row instead of Control-Shift-Nonsense), this section provides some guidance.  This guide assumes you've read the Evil manual sections "Modes and states" and "Keymaps".

=== Overriding and intercept keymaps ===

There are Emacs modes that provide their own single letter key bindings, independent of Evil.  [[BufferMenu]], [[Ediff]], and [[Edebug]] are a few examples.  By default, Evil allows these modes' keymaps to override Evil's.  To change this behavior, [http://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html customize] the evil-overriding-maps and evil-intercept-maps variables.  If you set these two to nil, then the active Evil keymaps have precedence over other active keymaps.  For example, without customization, inputting n in the Buffer Menu will call a Buffer Menu command to move down a line.  If Buffer-menu-mode-map is removed from evil-overriding-maps, then n will invoke Evil's command to go to the next search term.

With these customizations made, there are still some familiar Evil key bindings that are unavailable in Buffer Menu.  These pertain to commands that edit raw text -- disabled because raw text editing doesn't make much sense in the Buffer Menu.  This is realized by the Buffer-menu-mode entry in the evil-motion-state-maps variable.  Because the evil-normal-state-map is inactive in motion state, Buffer Menu commands like x and d are directly available.

=== Temporary execution in Emacs state ===
You may still wish to use a mode's key bindings, if you decided to remove its keymap from evil-overriding-maps or evil-intercept-maps.  Evil defines the \ command to temporarily interpret the subsequent Key Sequence in the Emacs state.  If you wish to use Buffer Menu's b command, you can do so with two key strokes: \b .  This is pretty reasonable in most cases, but if you want to have a one letter key binding you can add it specifically with the evil-define-key function.

=== Modes' initial state ===

While Buffer Menu comes up in motion state, other modes such as Ediff come up in Emacs state where all Evil keymaps are inactive.  You may change a mode's initial state by customizing the evil-*-state-modes variables.  The Minibuffer is an exception: it is always in Emacs state regardless of these variables.  To move all elements of evil-emacs-state-modes to evil-motion-state-modes:

   (setq evil-motion-state-modes (append evil-emacs-state-modes evil-motion-state-modes))
   (setq evil-emacs-state-modes nil)

=== Making the most of RET and SPC ===

It is common for Emacs modes like these to define key bindings for RET and SPC.  Since these are motion commands, Evil places its key bindings for these in evil-motion-state-map.  However, these commands are fairly worthless to a seasoned Vim user, since they do the same thing as j and l commands.  Thus it is useful to remove them from evil-motion-state-map so as when modes define them, RET and SPC bindings are available directly.

   (defun my-move-key (keymap-from keymap-to key)
     "Moves key binding from one keymap to another, deleting from the old location. "
     (define-key keymap-to key (lookup-key keymap-from key))
     (define-key keymap-from key nil)
     )
   (my-move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))
   (my-move-key evil-motion-state-map evil-normal-state-map " ")

=== Key Translations ===
Key Translations are another useful Emacs feature which allows one Key Sequence to translate to another prior to Emacs' process of Key Lookup in the active keymaps.  One limitation is [https://bitbucket.org/lyro/evil/issue/177/key-translation-map-not-honored-in-evil-o an Evil bug] that prevents Key Translations taking effect in the operator state.

An example of defining a Key Translation: I don't have much use for Evil's c command, so I chose to translate ch to C-h and cx to C-x among others.  To do this, we must make c a Prefix Key so as Key Lookup does not end on the c input alone.

   (define-key evil-normal-state-map "c" nil)
   (define-key evil-motion-state-map "cu" 'universal-argument)

The second line automatically made c a Prefix Key, and was somewhat arbitrary.  Now we define the Key Translations:

   (define-key key-translation-map (kbd "ch") (kbd "C-h"))
   (define-key key-translation-map (kbd "cx") (kbd "C-x"))

Note that this won't interfere with insert state because c is bound to self-insert-command, and the evil-motion-state-map defining c as a Prefix Key is inactive.

=== Key Translations (advanced) ===

The Key Translations above have a couple of disadvantages: it won't allow single letter Key Translations, and if a mode offers its own binding for ch or cx, it is unavailable to you (not even via \).  The following more robust solution solves these issues by making the Key Translation conditioned on what the Evil state is.  For this to work correctly, you'll need to pull in recent Emacs bug fixes, enable lexical binding, and copy a small amount of Elisp into your init file.

There were two Emacs bugs which are fixed on the Emacs development trunk, but not present in the 24.2 release.  You can either use Emacs from latest on trunk, or apply two patch files to the 24.2 source tree: [http://lists.gnu.org/archive/html/emacs-devel/2012-08/msg00449.html this] and [http://lists.gnu.org/archive/html/emacs-devel/2012-08/msg00628.html this].

To apply the patches on Unix systems, cd into the Emacs source tree and enter:

   patch -p0 < patch-file-name

Then rebuild Emacs.

In the Elisp you're about to copy into your init file, I wished to allow concise definitions of each Key Translation.  The cleanest way I could think of involved using a closure.  Closures require enabling lexical binding, which are disabled by default.  To enable lexical binding, put this on the very first line of your init file:

   ;; -*- lexical-binding: t -*-

Lexical binding is enabled on a per-file basis.  If you don't have much Elisp in your init file then this won't have a noticable effect.  However, if you've copied Elisp from elsewhere, it's conceivable that it might rely on dynamic binding.  If functions stop working correctly with lexical binding, you may either revise the functions or move them to another file where lexical binding is not enabled.

Here's the Elisp for your init file, to implement the ch and cx Key Translations:

   (defun make-conditional-key-translation (key-from key-to translate-keys-p)
     "Make a Key Translation such that if the translate-keys-p function returns true,
   key-from translates to key-to, else key-from translates to itself.  translate-keys-p
   takes no args.

   lexical-binding must be t in order for this to work correctly. "
     (define-key key-translation-map key-from
                 (lambda (prompt)
                         (if (funcall translate-keys-p) key-to key-from)))
     )
   (defun my-translate-keys-p ()
     "Returns whether conditional key translations should be active.  See make-conditional-key-translation function. "
     (or (evil-motion-state-p) (evil-normal-state-p) (evil-visual-state-p))
     )

   (define-key evil-normal-state-map "c" nil)
   (define-key evil-motion-state-map "cu" 'universal-argument)
   (make-conditional-key-translation (kbd "ch") (kbd "C-h") 'my-translate-keys-p)
   (make-conditional-key-translation (kbd "cx") (kbd "C-x") 'my-translate-keys-p)

You may use make-conditional-key-translation for single letter Key Translations.  And if another keymap defines a binding for "ch", you can access it with \ch , because my-translate-keys-p returns false in the Emacs state, resulting in a Key Translation of "ch" to itself.

== Defining your own escape ==

You can define any key sequence you like for escaping from Evil insert state back to normal state.  C-c is one of the options available in Vim by default, but Evil cannot define C-c this way because Emacs coding standards require packages to reserve C-c for the user.

The following Elisp shows how to define C-c as an escape key, using a Key Translation.

   ;;; C-c as general purpose escape key sequence.
   ;;;
   (defun my-esc (prompt)
     "Functionality for escaping generally.  Includes exiting Evil insert state and C-g binding. "
     (cond
      ;; If we're in one of the Evil states that defines [escape] key, return [escape] so as
      ;; Key Lookup will use it.
      ((or (evil-insert-state-p) (evil-normal-state-p) (evil-replace-state-p) (evil-visual-state-p)) [escape])
      ;; This is the best way I could infer for now to have C-c work during evil-read-key.
      ;; Note: As long as I return [escape] in normal-state, I don't need this.
      ;;((eq overriding-terminal-local-map evil-read-key-map) (keyboard-quit) (kbd ""))
      (t (kbd "C-g"))))
   (define-key key-translation-map (kbd "C-c") 'my-esc)
   ;; Works around the fact that Evil uses read-event directly when in operator state, which
   ;; doesn't use the key-translation-map.
   (define-key evil-operator-state-map (kbd "C-c") 'keyboard-quit)
   ;; Not sure what behavior this changes, but might as well set it, seeing the Elisp manual's
   ;; documentation of it.
   (set-quit-char "C-c")

In Emacs, C-g is somewhat analogous to what C-c was in Vim.  And since C-c is more ergonomic than C-g, I decided it's useful and intuitive to translate C-c to C-g if I'm already escaped out of insert state.

Emacs defines C-c as a useful global prefix key.  In order to use it, you may define a Key Translation as described in the Key Translation section.  Emacs does not apply Key Translation twice so if you define a Key Translation from cc to C-c, cc will not escape but access the global prefix key for C-c as desired.

Another way is to use keychords.el as a basis for an escape key sequence. For example, this Elisp defines ,, as an escape key (very convenient for bépo layout, rather not for qwerty…):

   (key-chord-define evil-normal-state-map ",," 'evil-force-normal-state)
   (key-chord-define evil-visual-state-map ",," 'evil-change-to-previous-state)
   (key-chord-define evil-insert-state-map ",," 'evil-normal-state)
   (key-chord-define evil-replace-state-map ",," 'evil-normal-state)

== Discussion ==

: ''(Evil is also discussed at the [http://lists.ourproject.org/cgi-bin/mailman/listinfo/implementations-list gmane.emacs.vim-emulation] mailing list and in our IRC channel #evil-mode on irc.freenode.net.)''

[new]
It would be nice with a brief overview over the objectives and difference to [ViperMode Viper].

: The main difference is that while Viper emulates classical vi, Evil emulates Vim. It therefore sports additional features like Visual selection and text objects. Evil also attempts to integrate with Emacs: for example, repetition is implemented in terms of keyboard macros. At the most basic level, Evil is just a collection of key bindings that can be extended and adapted to any Emacs mode.

=== Passthrough function ===

Sometimes I want to send a single command in emacs state.  Rather than switch to emacs state, press the key, and back, I wanted a prefix-type key that would let me run a command based on the emacs keymaps, and then return to motion or normal state.  So, I wrote this:

    (defun evil-passthrough ()
      "Accept a key, switch to emacs state, process that key, and leave emacs state."
      (interactive)
      (let ((next-key (read-event)))
        (progn
          (evil-emacs-state)
          (setq unread-command-events (list next-key))
          (run-with-idle-timer 1 nil (lambda () (evil-exit-emacs-state))))))

    (global-set-key (kbd "M-p") 'evil-passthrough)

But this doesn't work when the command uses the minibuffer (evil mode gets messed up). :-(

[new]
In Normal state, you can use the ##\## key to switch to Emacs state for the duration of one command: e.g., ##\e## executes ##e## in Emacs state. You can also switch indefinitely to Emacs state with ##C-z##; press ##C-z## again to switch back to Normal state. -- VegardOye

[new]
Thanks, works great! -- Volfy

=== Vim tabs ===
The first thing I missed of Vim were the tabs. With elscreen.el and its dependencies installed, the following code emulates part of the Vim behaviour:

    (load "elscreen" "ElScreen" t)

    (define-key evil-normal-state-map (kbd "C-w t") 'elscreen-create) ;creat tab
    (define-key evil-normal-state-map (kbd "C-w x") 'elscreen-kill) ;kill tab

    (define-key evil-normal-state-map "gT" 'elscreen-previous) ;previous tab
    (define-key evil-normal-state-map "gt" 'elscreen-next) ;next tab


----
CategoryKeys CategoryEmulation
