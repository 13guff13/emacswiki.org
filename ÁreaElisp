PrimitivasLisp
Moviéndonos con emacs al editar lisp

   M-x lisp-mode: entramos en el modo lisp
   Ctl+Alt+n: vas al siguiente parentesis
   Ctl+Alt+p: vas al anterior parentesis
   Ctl+x Ctl+e: evaluas lisp
   Ctl+Alt+d: te introduces en la siguiente funcion
   Ctl+Alt+u: te sales de la funcion actual
   Ctl+Alt+t: intercambia la funcion anterior a la posicion de la actual
   M+Ctl+k: borra el argumento de la funcion
   

Asignación

   "setq": Asiga valores a una variable
   Ejemplo de uso: (setq nueve '9)
		   (setq l '(a b c))

   "let" y "let*": Asigna valores a variables y genera listas de tal modo que en let las
   modificaciones en la muestra de datos en pantalla de los valores son locales y en let*
   son globales.
   Ejemplo de uso: (setq nueve '9)
		   (let ((nueve 'interior)
			(y nueve))
			(list nueve y))
   Ejemplo de uso: (setq nueve '9)
		   (let* ((nueve 'interior)
			(y nueve))
			(list nueve y))

   "defvar": Asigna un valor a una variable, con opcion de una cadena que lo describa 
   y un valor inicial. El valor inicial solo se aplica si no posee ya un valor por defecto.
  
   Ejemplo de uso: (defvar x 100 "documentacion")
 

Aritméticas

   "+", "-", "*", "/" : Son las operaciones para sumar, restar, multiplicar y dividir.
   Un ejemplo de uso es: (+ (* 2 3) 5)

   "%" : Ésta no funciona en clisp, venía en el libro de emacs.

   "1+", "1-" : Incrementa/Decrementa en uno el valor. Es una operación unaria.
   Un ejemplo de uso es: (1+ 9)

   "max", "min" : Dados varios números devuelve el valor máximo.
   Un ejemplo de uso es: (max 23 4 5 234 654)

   "float": Devuelve el valor en coma flotante.
   Ejemplo de uso: (float (/ 22 7)) 
   
   "round": redondea un valor al entero más cercano.
   Ejemplo de uso: (round 3.4) 

   "expt": calcula potencias elevando su primer argumento a su segundo.
   Ejemplo de uso: (expt 2 3)
   		   (defun expt-davidam (x y)
    			(if (= y 0) 1
    				(* x (expt-davidam x (1- y)))))  	

   "sqrt": calcula raices cuadradas.
   Ejemplo de uso: (sqrt 9)

   "abs": calcula el valor absoluto.
   Ejemplo de uso: (abs -3)
   		   (defun abs-davidam (x)
   			(if (< x 0) (* x -1)
   				x))

   "random": calcular un número aleatorio de 0 a N-1.
   Ejemplo de uso: (random '5)

Comparación

   ">", "<", ">=", "<=" : Mayor que, Menor que, Mayor o igual que, Menor o igual que. Sólo
   números.
   Un ejemplo de uso: (< (max 5 6) 6)

   "/=" : Distinto que. Sólo para números.
   Ejemplo de uso: (/= 5 4)

   "equal": Evalúa si el valor de los dos argumentos es la misma expresión.
   Ejemplo de uso:  (equal (+ 2 2) 4)

   "eql": Evalúa si el valor de los dos argumentos es el mismo símbolo o número.
   Ejemplo: Fallará si intentamos (eql '(x y) '(x y))

   "eq": Evalúa si el valor de los dos argumentos es el mismo símbolo.
   Ejemplo: Fallará si intentamos (eq '(x y) '(x y))

   "=" : Evalúa si el valor de los dos argumentos es el mismo número.
   Ejemplo: Falla si intentamos ver si (= 'x 'x)   

   "zerop": Evalúa si un número es cero.

   "plusp": Evalúa si un número es positivo.

   "evenp": Evalúa si un número es par.
   Escrito en lisp:
   	(defun evenp-davidam (x)
   		(if (= (% x 2) 0) t
   			nil))   

   "oddp": Evalúa si un número es impar.

   "numberp": Evalúa si es un número.

   "symbolp": Evalúa si es un símbolo.

   "if", "when", "unless" y "case": Sirven para ejecutar o no acciones si se cumple una
   condición.
   Ejemplos de uso:
	    (setq dia-o-fecha 'lunes)
	    (if (symbolp dia-o-fecha) 'dia 'fecha)
	    (if (string-equal
	         (number-to-string 21)
		 (substring (emacs-version) 10 12))
		(message "This is version 21 Emacs")
	      (message "This is not version 21 Emacs"))
	    (when (symbolp dia-o-fecha) 'dia)
	    (cond ((symbolp dia-o-fecha) 'dia)
		  ((numberp dia-o-fecha) 'fecha))
	    (case figura 
		  (circulo (* pi r r))
		  (esfera (* 4 pi r r)))

   "sort": ordena una lista en el orden que se le dicta como argumento.
   Ejemplo de uso: (sort '(3 1 4 1 5 9) #'<)	   Al igual que nconc y delete sort altera
						   el contenido de la lista.

Lógicas

   "and", "or" y "not": Son las expresiones lógicas de toda la vida.
   Ejemplo de uso: (and (< 5 6) T)

Manejo de Secuencias (son tanto listas como cadenas)

   "elt": devuelve el elemento que ocupa la posición x de la secuencia.
   Ejemplo de uso: (elt '(a b c) 0)

   "length": cuenta el número de elementos de nivel superior que hay en una lista.
   Ejemplo de uso: (length '(platon socrates aristóteles))

   "reverse": invierte el orden de los elementos de nivel superior de la secuencia.
   Ejemplo de uso: (reverse '(platon socrates aristóteles))

Manejo de cadenas

   "string=", "string-equal": nos dice si dos cadenas son iguales, la diferencia entre uno y
   otro es que string= diferencia minúsculas y mayúsculas y string-equal, no.
   Ejemplo de uso: (string= "abc" "ABC")

   "search": nos sirve para determinar si una cadena está contenida en otra. Si lo está
   devolverá la posición donde empieza la correspondencia, en otro caso devuelve NIL.
   Ejemplo de uso: (search "Márquez" "García Márquez")
   Ejemplo de uso: (search "MÁRQUEZ" "García Márquez" :test #'char-equal) ;; así se evita
						que distinga entre mayúsculas y minúsculas.

   "concatenate": concatena cadenas.
   Ejemplo de uso: (concatenate 'string "hola" "adios")

Manejo de listas

   "setq": Asigna valores a una lista.
   Ejemplo de uso: (setq amigos '(ines elisa jorge luismi))

   "let": Asigna valores a una lista.

   "atom": Nos dice si el elemento es un átomo o si es una lista.
   Ejemplo de uso: (atom amigos)

   "endp": Comprueba si la lista está vacía.
   Ejemplo de uso: (endp amigos)

   "first": Devuelve el primer elemento de una lista. Es lo mismo que car.
   Ejemplo de uso: (first amigos)

   "rest": Devuelve la lista sin el primer elemento. Es lo mismo que cdr.
   Ejemplo de uso: (rest amigos)

   "cadr": Entre c y r puede haber una combinación a y d que denotan el encadenamiento de
   first y rest.
   Ejemplo de uso: (caddr amigos) = (first (rest (rest amigos)))

   "second", "third", "fourth", ...: Devuelve el segundo, tercer, o cuarto elemento de una lista
   (hay hasta el "tenth").
   Ejemplo de uso: (third amigos)

   "cons": Inserta un nuevo elemento en la primera posición de una lista.
   Ejemplo de uso: (cons 'edu amigos) 
	   Lo que realmente hace cons es hacer que el primer apuntador de la lista sea 'edu.

   "append": Combina dos listas en una.
   Ejemplo de uso: (setq friends (append amigos '(b c)))
	   Lo que realmente hace append es copiar amigos en la nueva lista (en nuestro caso
	   friends) y, luego anexa '(b c).

   "nconc": fusiona dos listas en una. La diferencia con append es que nconc lo hace haciendo
   que el último apuntador de la primera lista apunte al primero de la segunda.
   Ejemplo de uso: (nconc amigos '(b c))
	   Si ahora llamamos a amigos desde clisp el resultado no es el que tal vez esperábamos.

   "list": Elabora una lista con sus argumentos.
   Ejemplo de uso: (list '1 '2 '3)

   "push" y "pop": meter y sacar un elemento a una lista. Fíjate que podemos usar cons y rest
   para esos menesteres, la diferencia es que aquí los cambios alteran el contenido de la
   variable.
   Ejemplo de uso: (pop amigos)

   "nthcdr": elimina los n primeros elementos de una lista.
   Ejemplo de uso: (nthcdr 3 amigos)

   "butlast": elimina los n últimos elementos de una lista.
   Ejemplo de uso: (butlast amigos 2)

   "last": devuelve una lista en la que se han eliminado todos los elementos menos el último.
   Ejemplo de uso: (last amigos)

   "assoc": Sirve para recuperar elementos de una lista de asociación. Una lista de asociación
   es una lista de sublistas, en la que el primer elemento de cada sublista se utiliza como
   una clave para recuperar la sublista completa. 
   Ejemplo de uso: (setq sara '((estatura 1.7) (peso 65)))
		   (assoc 'peso sara)

   "member": comprueba si un elemento pertenece a una lista y devuelve una lista con los
   elementos que hay desde el elemento coincidente.
   Ejemplo de uso: (member 'c '(b c a))

   "delete": se deshace de las ocurrencias del primer argumento que aparezcan en el nivel
   superior del segundo.
   Ejemplo de uso: (delete 'jorge amigos)
	   Nótese que delete ha borrado del todo a jorge de amigos.

   "remove": se deshace de las ocurrencias del primer argumento que aparezcan en el nivel
   superior del segundo. Aparentemente hace lo mismo que delete, pero en la práctica delete
   cambia el contenido de la lista y remove no.
   Ejemplo de uso: (remove 'jorge amigos)

Funciones que tienen funciones como argumentos

   "mapcar": Simplifica las operaciones de transformación de listas. Se proporciona el
   procedimiento de transformación y la lista de elementos a transformar.
   Ejemplo de uso: (mapcar #'oddp '(1 2 3))
		   (mapcar #'- '(1 2 3 4))
   Escrito en lisp: 
   (defun jem-mapcar (func lst)
     (if (not lst)
           nil
      (cons (apply func (list (car lst)))
	(jem-mapcar func (cdr lst)))))		

   "apply": usa el valor de su primer argumento sobre los elementos de su segundo argumento,
   el cual debe ser una lista.
   Ejemplo de uso: (apply #'append '((e1 e2) (e3 e4)))
		   (apply #'+ 1 2 3 '(4 5 6))

   "lambda": define procedimientos anónimos, es un defun sin nombre del procedimiento, útil
   para dejar más claro lo que va a hacer el procedimiento. No debe usarse si el procedimiento
   puede usarse unas cuantas veces.
   Ejemplo de uso: (mapcar #'(lambda (x) (eq x 2)) '(3 4 2 5)) -> haz la macro memberp
   Ejemplo de uso: ((lambda (x) (list x x)) '(lambda (x) (list x x))) -> programa q se
   									escribe a si mismo

   "prog1" y "progn": ambos interpretan secuencias, progn devuelve el resultado de la
   n-ésima función y prog1 de la primera.
   Ejemplo de uso: (progn (setq a 'x) (setq b 'y) (setq c 'z))

Iteración sobre números y listas

   "dotimes":
       (dotimes (<contador> <límite-superior> <resultado>)
		 <cuerpo del bucle>)

   "dolist":
       (dolist (<contador> <lista> <resultado>)
		<cuerpo del bucle>)
   Ejemplo de uso:
	   (dolist (i '(2 3 5 6))
		   (if (equal 5 i) (print "encontrado!")))

Funciones de Lectura y Escritura

   "message": imprime texto en el minibuffer.
   Ejemplo de uso: (message "Somos %d caracteres dentro de este buffer."
         (- (point-max) (point-min)))

   "print": salida de texto.
   Ejemplo de uso: (print "¡Hola! Estoy listo para empezar.")

   "read": es una operación de lectura de texto.
   Ejemplo de uso: (setq dato-usuario (read))

   "read-line": absorve caracteres hasta donde aparece un retorno de carro o un fin de archivo.
   Luego produce una cadena con los caracteres q preceden el retorno de carro o el final del
   archivo, seguido de NIL, al menos que read-line encuentre el final del archivos mientras
   está leyendo una línea, en ese caso es T.

   "read-char": lee un carácter.
   Ejemplo de uso: (setq mi-caracter (read-char))

   "eval": es una operación que lee y evalúa.
   Ejemplo de uso: (eval (read))
   

Propiedades

   "get": establece (con setq) y recupera el valor de una propiedad de un símbolo.
   Ejemplo de uso: (setq (get 'luis 'padres) '(alfonso monica)) ;; establece
		   (get 'luis 'padres)				;; recupera

Funciones y Macros

   "defun": Crea funciones.
   Ejemplo de uso: (defun square (x) (* x x))

   "defmacro": Crea macros. Mientras que una función evalúa los argumentos que le llegan directamente. Una macro utiliza sus argumentos para construir una forma lisp intermedia y, "luego" evalúa la forma intermedia para producir un valor. 

   Ejemplo de uso: (defmacro square-mac (X) `(* ,X ,X))
   Ejemplo de uso: (defmacro square-mac2 (X) `(let ((Temp ,X)) (* Temp Temp)))
   Ejemplo de uso: (defmacro cuando-positivop-macro (numero resultado) (list 'when (list 'plusp numero) resultado))
   Ejemplo de uso: (defmacro cuando-positivop-macro-con-apostrofe-invertido (numero resultado)
                     `(when (plusp ,numero) ,resultado))


Funciones Emacs Lisp

En este fichero se exploran las funciones emacs lisp que te ayudarán a aprender a hacer tus propios scripts en lisp para automatizar tus tareas de edición de texto.
Buffers

   "buffer-name": devuelve el nombre del buffer.
   Ejemplo de uso: (buffer-name)

   "buffer-file-name": devuelve el nombre del fichero asociado al buffer.
   Ejemplo de uso: (buffer-file-name)

   "current-buffer": devuelve el buffer actual.
   Ejemplo de uso: (current-buffer)

   "other-buffer": devuelve el buffer seleccionado más recientemente.
   Ejemplo de uso: (other-buffer)

   "switch-to-buffer": cambiar de buffer.
   Ejemplo de uso: (switch-to-buffer (other-buffer))

Puntero

   "point": devuelve el número de caracter del puntero actual.
   Ejemplo de uso: (point)

   "point-min": devuelve el número del primer caracter.
   Ejemplo de uso: (goto-char (point-min))

   "point-max": devuelve el número del último caracter del buffer.
   Ejemplo de uso: (goto-char (point-max))

Funciones de Entrada/Salida

   "insert": inserta texto en un buffer
   Ejemplo de uso: (insert "Hola Mundo")

(emacs-es) CambiosRecientes

