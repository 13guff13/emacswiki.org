DeletedPage

= Introduction =

In some coding situations you find yourself entering repetitive but different data line after line after line. For example, using grid with Tcl/Tk[http://tcl.tk]:

    grid $f.l_name -row 0 -column 0 -padx 5 -pady 5 -sticky e
    grid $f.name   -row 0 -column 1 -padx 5 -pady 5 -sticky ew
    grid $f.l_age  -row 1 -column 0 -padx 5 -pady 5 -sticky e
    # etc...

To help me work less I created the ##insert-line-same## function.

= Code =

    (defun get-relative-line-content (num)
      "Return the string content of line `num' relative to the current line"
      (save-excursion
        (forward-line num)
        (buffer-substring-no-properties
         (line-beginning-position) (line-end-position))))
    
    (defun insert-line-same ()
      "Insert the content up to the first difference of the previous two lines."
      (interactive)
      (let* ((line1 (get-relative-line-content -2))
        (line2 (get-relative-line-content -1))
          (beg (current-column))
          (end (compare-strings line1 beg nil line2 beg nil)))
        (insert-string
         (substring line1 beg
                (if (integerp end)
                    (+ beg (- (abs end) 1))
                  (length line1))))))

= Explanation and Example =

This looks at the previous two lines and inserts at the current cursor position what is the same between the two. It then stops allowing you to fill in the variant. If properly aligned, you can then initiate the ##insert-line-same## method again as it works based on your current column position. For example having ##insert-line-same## bound to ##ESC Space## and ##^## begin your cursor position:

    grid $f.l_name -row 0 -column 0 -padx 5 -pady 5 -sticky e
    grid $f.name   -row 0 -column 1 -padx 5 -pady 5 -sticky ew
    grid $f.l_age  -row 1 -column 0 -padx 5 -pady 5 -sticky e
    ^ESC Space

This would yield:

    grid $f.l_name -row 0 -column 0 -padx 5 -pady 5 -sticky e
    grid $f.name   -row 0 -column 1 -padx 5 -pady 5 -sticky ew
    grid $f.l_age  -row 1 -column 0 -padx 5 -pady 5 -sticky e
    grid $f.^

Notice how only what was the same in the previous two lines was copied? Let's continue by typing in our age widget:

    grid $f.l_name -row 0 -column 0 -padx 5 -pady 5 -sticky e
    grid $f.name   -row 0 -column 1 -padx 5 -pady 5 -sticky ew
    grid $f.l_age  -row 1 -column 0 -padx 5 -pady 5 -sticky e
    grid $f.age   ^ESC Space

This would then complete the ##-row## and notice that the ##-row 0## and ##-row 1## are different, so it stops to allow you to enter the proper row. Continue right down the line and you eventually wind up with:

    grid $f.l_name -row 0 -column 0 -padx 5 -pady 5 -sticky e
    grid $f.name   -row 0 -column 1 -padx 5 -pady 5 -sticky ew
    grid $f.l_age  -row 1 -column 0 -padx 5 -pady 5 -sticky e
    grid $f.age    -row 1 -column 1 -padx 5 -pady 5 -sticky ew

All this with very little typing.

= Binding =

I bind this to ##ESC Space## via the command in my ##.emacs##

    (global-set-key (kbd "<ESC>SPC") 'insert-same-line)

Hope you enjoy!

= Discussion =

[new]
This page is very similar to LineCopyChar.  I think we should clean up that page and move the useful bits here there.  What do you think? -- AaronHawley

[new]
I see a similarity but they are also quite different. It seems that LineCopyChar simply copies what is above the cursor, character by character? This duplicates whole blocks at a time of what is the same between the previous two lines. For example:

    Hello John. How are you doing?
    Hello Jane. How are you doing?
    ^ESC Space

That would (in one call) insert into the current line "Hello J", fill in "ack" and press ESC Space again and it would copy in one call, ". How are you doing?" Thus, the end result (after pressing ESC Space, ack, ESC Space) would be:

    Hello John. How are you doing?
    Hello Jane. How are you doing?
    Hello Jack. How are you doing?

It's your call though, I'm happy with whatever you decide. Both do deal with copying characters from another line just in a different manner and for a different use case.

[new]
I didn't see how yours was different.  I'll try to see if I can incorporate it. -- AaronHawley

[new]
I rewrote your command to use Emacs's `copy-from-above-command' to accomplish the same task.  The final result is posted on CopyAboveWhileSame (along with adding documentation for CopyFromAbove command).  If you think it's ok, we can delete this page. -- AaronHawley

[new]
Yes, that is fine. Thanks for the work on this! -- JeremyCowgar

[new]
Ok, this page is marked for deletion.  Your command was a very smart idea.  I've added it to my collection regardless if I'll ever use it or not.  At the least, I'll show it to folks to say, "Look what you can do".
