This page is about library '''[::Wide-N]''', <tt>[[wide-n.el]]</tt>, which lets you browse among multiple buffer restrictions (narrowings).

== Problem: Narrowing Is Fine-Grained, But Widening Is Not ==


Did you ever narrow a [[buffer]] to some restriction (region), and then later narrow it some more? Ever want to then widen back to the first (larger) restriction, rather than just widening to the whole buffer? You cannot.

Narrowing always narrows to the current [[region]], which can be anywhere and have any size up to the buffer size. But command `widen' (`C-x n w') always restores the full buffer. There can be many different narrowings (one at a time), but there is only one widening: the whole buffer.

Library '''Wide-N''' solves this problem. It gives you the same fine-grained behavior for widening as for narrowing. In fact, the possible widening targets are the same restrictions that you created by previous narrowings (plus the whole buffer). Instead of only a single widening, you have '''''N''''' of them.





[:RingOfNarrowings]
== A Ring of Narrowings ==

Library '''Wide-N''' advises `narrow-to-region', the basic narrowing command, so that each time you narrow a buffer interactively the buffer restriction is recorded in a buffer-local ring. You can return to any of these narrowings selectively at any time.

'''`C-x n x'''' is bound to command `wide-n-repeat', which restores the last recorded narrowing for the current buffer.

The narrowings can be nested, but they need not be. They can be any regions at all.

* You can repeat the `x' to cycle quickly among narrowings: `C-x n x x x'...

* You can go directly to the Nth previous narrowing by using a [[numeric prefix argument]]. (This is the '''''N''''' in '''Wide-''''''''N'''''.) If you use a negative prefix arg, then (its absolute value is used and) the latest entries through the abs(N)th one are popped off the ring. Thus, if you use only negative args then the ring acts like a stack.

* You can widen the buffer completely by using a plain prefix arg (`C-u') or a zero prefix arg (`C-0').  A zero prefix arg also resets (empties) the ring completely for the current buffer.

* The whole buffer (widened completely) is also at the end of the ring, so you can cycle to it.

* You can also use `C-x n w' (standard command `widen') to widen the buffer completely, as usual.

The [[mode line|mode-line]] lighter `Narrow' is still used for the ordinary
Emacs narrowing commands.  But for `wide-n-repeat' (`C-x n x')
the current restriction is indicated in the lighter by a
identifying number: `Narrow-1', `Narrow-2', and so on.
`mouse-2' on the `Narrow' part still widens completely, but
`mouse-2' on the `-NUM' part uses `wide-n-repeat' to cycle to
the next restriction.



Emacs [[marker]]s are used to record restriction limits, so the same
restriction is available even if you modify its context.  If for any reason `wide-n-restrictions' ever has any entries
that use buffer positions (numbers) instead of markers, invoking
`wide-n' corrects this by changing the positions to markers.

This means that you can serialize `wide-n-restrictions',
converting all markers to positions, save the value
persistently, and restore it later.  Library '''[[Bookmark+]]'''' (<tt>[[bookmark+.el]]</tt>) does
this in order to let you bookmark and restore a list of restrictions.

In normal use, only the ''interactive'' use of standard commands
`narrow-to-region', `narrow-to-defun', and `narrow-to-page' is
affected by this library.  When these functions are called
non-interactively there is normally no change to the value of
variable `wide-n-restrictions'.  However, if for some reason you
want to add entries to the restrictions ring when narrowing with
some EmacsLisp code (i.e. non-interactively), you can do so by
binding variable '''`wide-n-push-anyway-p'''' around the narrowing call.

You can use '''`C-x n C-d'''' (command `wide-n-delete') to delete a
restriction, giving its number.

You can also add the current region to `wide-n-restrictions'
without first narrowing to it, using '''`C-x n s'''' (command
`wide-n-push').  You need not activate the region to do this.

Moving among different buffer restrictions is the main use of
this library, but another use case is ''performing actions on a
set of buffer restrictions'', including restrictions from
''different buffers''.

For that, you just need to write your action command in such a
way that it iterates over the buffers and then over the entries
in `wide-n-restrictions' (or some subset of them) for each
buffer.  Utility functions `wide-n-limits',
`wide-n-limits-in-bufs', and `wide-n-read-bufs' can help with this.

As examples, if you use library <tt>[[highlight.el]]</tt> then you can use
command '''`hlt-highlight-regions'''' to highlight the restrictions
recorded for the current buffer.  And you can use command
'''`hlt-highlight-regions-in-buffers'''' to do this across a set of
buffers that you specify (or across all visible buffers).
Complementary commands `hlt-unhighlight-regions' and
`hlt-unhighlight-regions-in-buffers' unhighlight.

Another way to look at this possibility of acting on multiple
restrictions is to think of it as widening the notion of a
"region" of text that you can operate on.  In effect, it can
remove the requirement of target text being a contiguous
sequence of characters.  A set of buffer restrictions is, in
effect, a (typically) noncontiguous "region" of text.

Pretty much ''anything you can do with the Emacs [[region]] you can do
with a set of buffer restrictions'' (a non-contiguous "region",
`wide-n-restrictions').  But existing Emacs commands that act on
the region do not know about non-contiguous regions.  What you
will need to do is define new commands that take these into
account.

This can be simple or somewhat complex, depending on how the
region is used in the code for the corresponding region-action
Emacs command.  The definition of `hlt-highlight-regions' just
calls existing function `hlt-highlight-region' once for each
recorded region:

    (defun hlt-highlight-regions (&optional regions face msgp mousep buffers)
      "Apply `hlt-highlight-region' to each region in `wide-n-restrictions'."
      (interactive (list (wide-n-limits) nil t current-prefix-arg))
      (dolist (start.end  regions)
        (hlt-highlight-region (car start.end) (cdr start.end)
                              face msgp mousep buffers)))


That's it - just iterate over `wide-n-restrictions' with a
function that takes the region as an argument.  What ##wide-n.el##
offers in this regard is a way to easily define a set of buffer
restrictions.

Enjoy! -- DrewAdams



----
CategoryRegion [[Narrowing]] CategoryHideStuff
