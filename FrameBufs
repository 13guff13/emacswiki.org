Many Emacs users like to use different frames for different projects, in which case it would be convenient for the buffer menu to accomodate such functional grouping of buffers.   That is, it would be convenient for the buffer menu to understand a distinction between those buffers that are associated with a particular frame and those that are not.  The package [[frame-bufs.el]] (by AlpAker) tracks which buffers "belong" to a given frame and extends the buffer menu so that it can take advantage of that information.

== Installation ==

Put the package file in your load path and put

  (require 'frame-bufs)

in your ##.emacs##.  To enable frame-bufs, use the command ##frame-bufs-mode##.

== Features Overview ==

When frame-bufs-mode is enabled, it keeps a record of which buffers are associated with each frame.  According  to the most basic criterion, a buffer becomes associated with a frame if it is selected on a frame.  (Note then, that a buffer can be associated with more than one frame.)  We say that a buffer associated with a frame is "local" to that frame.

The buffer menu initially lists all buffers (we call this "full-list mode").  By typing ##F## the buffer menu can be toggled between showing all buffers and showing only those buffers associated with the selected frame (when the buffer menu is in the latter state we say it is in "local-list mode").  In full-list mode there is an additional column after the initial ##CRM## bit columns, the ##F## column.  Frame-local buffers are indicated with an `o' in this column.  In local-list mode, the fourth column is suppressed.  Here are screenshots of the buffer menu in the two different modes:

|| [[image:FrameBufsLocalMode]] || [[image:FrameBufsFullMode]] ||
|| Buffer menu in local-list mode, sorted by buffer size.  Only buffers associated with this frame are shown. || Buffer menu in full-list mode, sorted by buffer size.  All buffers are shown; the buffers associated with this frame are distinguished by an `o' bit in the fourth ##F## column. ||

In subsequent calls the buffer menu opens in whatever mode it was last in.

In addition to toggling between the two modes, there are two other new commands available in the buffer menu:

* A buffer can marked as to be added to the local buffer list by typing ##L##.
* A buffer can be marked as to be removed from the local buffer list by typing ##N##.

As with save and delete commands in the buffer menu, these requested changes are effected by calling ##Buffer-menu-execute##.

== Further Control of the Local Buffer List ==

As mentioned above, a buffer is automatically added to a frame's local list if it is selected in one of that frame's windows, and the local buffer list can be manually edited from within the buffer menu.  Finer-grained control over which buffers are automatically added to the local buffer list is provided by the following variables:

* If ##locales-include-displayed-buffers## is non-nil, then buffers that are merely displayed on a frame become local to the frame, even if they have not been selected.  (The default value is nil.)
* If a buffer's name is a member of ##locales-always-include-names##, then that buffer is added to every frame's local list.  (The default value is ##("*scratch*)##.)
* If the command that creates a new frame also creates new buffers, then one might want those buffers to count as local to the new frame.  (For example, when one calls ##gnus## and thereby creates a new frame, it might be desirable to have the auxiliary buffers created by ##gnus## count as local to the Gnus frame, even if those buffers haven't been selected.)  If ##locales-include-new-buffers## is non-nil, then such buffers are added to the new frame's local buffer list, even if they have not been selected or displayed.  (The default value is nil.)
*  If ##locales-include-init-buffer## is non-nil, then the buffer that is current when the command creating a new frame is called (the "init-buffer") will belong to the new frame.  If nil, it will not.   (The default value is nil.)
* If ##locales-new-frames-inherit## is non-nil, then the local buffer list of a newly created frame will initially include all those buffers that belong to the local buffer list of its "parent" frame, i.e., the frame that was selected when the command that creates the new frame was run.  (The default value is nil.)

== Other Commands and Features ==

* If ##frame-bufs-use-buffer-predicate## is non-nil, each frame's buffer predicate is set so that ##other-buffer## will prefer buffers local to that frame.  Thus, when a buffer is removed from a window and automatically replaced with another (as happens, say, when one kills a buffer), the newly displayed buffer will, if possible, be another frame-local buffer.  (The default value of is nil.)

Frame-bufs also provides three other commands that are available everywhere, not just in the buffer menu:

* ##frame-bufs-dismiss-buffer## is somewhat analogous to ##bury-buffer##.  It removes a buffer from the local buffer list, and if that buffer is displayed in any windows on the selected frame, it is replaced by a frame-local buffer.  When called with no arguments, it acts on the current buffer.

* ##frame-bufs-reset-frame## resets a frame's local buffer list.  Specifically, it sets the local buffer list to the list of buffers that have been selected on the frame.  When called with no argument, it acts on the current frame.

* ## frame-bufs-reset-all-frames## resets the local buffer list of all frames.

== Compatibility and Other Considerations ==

Frame-bufs is compatible with BufferMenuPlus.  It does not affect the operation of ##electric-buffer-list##.

Frame-bufs does not alter the ##buffer-list## or ##buried-buffer-list## frame parameters or change the results of calls to the function ##buffer-list##, with one excpetion: If the buffer menu is automatically displayed on new frame (as it is, e.g., when ##pop-up-frames## is non-nil), then the frame used to display the buffer menu has its ##buffer-list## and ##buried-buffer-list## parameters set to those of the frame from which the buffer-menu command is called.
  
