[[zh:颜色主题]]

Color theme is an Emacs-Lisp package with more than 50 color themes
for your use.  For questions about color-theme, see
'''ColorThemeQuestions'''.  

In order not to clean up this page, please visite ColorTheme webpage
at http://www.nongnu.org/color-theme for instructions on getting
started.

(Note that byte compiling this on non-Windows may fail.  Convert the
line endings from CRLF to LF. skip@pobox.com 2004-03-12)

[new:XavierMaillard:2009-04-15 20:48 UTC]
if it is still the case, report it as a bug so we can track it down.

Latest release is 6.6.0 -- See our webpage for download instructions.

You also have the possibility to have your own theme repository with: color-theme-directory
You can prune the default theme distribution by setting color-theme-load-all-themes to nil. Thus it won't load the default themes.

Future plans:

* split color-theme-library.el in small pieces (one theme per file)
* Improve load
* Add a custom widget to select your theme
* Use new way to define a color-theme
* Improve submission process
 and way way more things.
* Add a FAQ, a gentoo ebuild file
* Add CREDITS.themes as a thank-you list

I am also trying to build a small website using OrgMode
----

[new]
[[dto]] has [http://dto.freeshell.org/notebook/ColorThemes.html some themes on his homepage].

[new]
I just released a new dark theme, [http://jaderholm.com/configs/color-theme-colorful-obsolescence.el Colorful Obsolescence] ([http://jaderholm.com/photos/screens/700_colorful-obsolescence.png Screenshot]) - [http://jaderholm.com Scott Jaderholm]

[new]
Will the individual color-themes work with the new version?  I have a couple.. btw, are you accepting new themes?

[new]
Absolutely. You can still submit them to me and I will add them. What do you mean with your first question ? If you mean having separate file for each color-theme, the answer is yes. There is no problem I am aware of.

[new]
The next major release (6.6.0) should contain numerous new themes.

== Installing ==

Put the file color-theme.el and the folder "themes" (with the files color-theme-example.el and color-theme-library.el) in a directory on your LoadPath. The main function to
use is `color-theme-select'. It creates the Color Theme Selection
buffer that allows you to test the themes before choosing one.

M-x load-library RET color-theme RET
M-x color-theme-select RET

The easiest way is to install a chosen color theme is to require the
file and call the appropriate color theme function. Put the
appropriate code in your .emacs file:

    (require 'color-theme)
    (color-theme-initialize)
    (color-theme-robin-hood)

If it doesn't seem to work, try adding one more line:

   (require 'color-theme)
   (setq color-theme-is-global t)
   (color-theme-robin-hood)

If you like putting globals in default.el and local customizations in
.emacs then, add the require to default.el and use this in .emacs

     (eval-after-load "color-theme" '(color-theme-robin-hood))

Use the `?' in the Color Theme Selection buffer to find the name of
the appropriate color theme function.

If the colors seem to get reset (such as background color changing to white on startup or when creating a new frame), consider checking ColorsAndKde.


If on loading emacs, you get an error like 

     Debugger entered--Lisp error: (wrong-type-argument keymapp nil)
     define-key(nil [menu-bar Tools] ("Tools" keymap "Tools"))

Change lines 589 and 590 in color-theme.el to:

     (easy-menu-add-item nil '("tools") "--")
     (easy-menu-add-item  nil '("tools")
                     ["Color Themes" color-theme-select t])

Note the "tools" vs "Tools". 

This is now installed in the CVS.


== Emacs 21 and More Recent ==
color-theme.el now also supports all the new attributes in Emacs 21,
and it even tries to do the right thing for Emacs 20 and XEmacs 21: It
resolves :inherit attributes and adds :italic and :bold attributes
where necessary.
The amount of compatibility functions, dirty hacks and work-arounds
has been reduced considerably.

: If you find that &lt;code&gt;M-x color-theme-select&lt;/code&gt; fails with an error like the following:
&lt;pre&gt;
face-attribute: Wrong type argument: symbolp, (quote font-lock-builtin-face)
&lt;/pre&gt;
try using this alternate definition of &lt;code&gt;color-theme-face-attr-construct&lt;/code&gt;:

    (defun color-theme-face-attr-construct (face frame)
       (if (atom face)
           (custom-face-attributes-get face frame)
         (if (and (consp face) (eq (car face) 'quote))
             (custom-face-attributes-get (cadr face) frame)
           (custom-face-attributes-get (car face) frame))))

This is now installed in the CVS.

== Choosing a Color Theme by Choosing from a Menu ==

Choosing a color theme by name is only convenient if you already know what color scheme a given name represents.  After installing Color Theme, you can pick and choose from a menu.  This menu can be accessed via `M-x color-theme-select'.

== Choosing a Color Theme by Cycling Among Themes ==

An alternative way to choose a color theme is to cycle among a set of themes, applying each in turn, and stop when you find one you like -- '''''WYSIWYG'''''.

Here are four alternative ways to cycle among color themes in a list. For illustration, they all use the same list.

  (require 'color-theme)
  (setq my-color-themes (list 'color-theme-billw 'color-theme-jsc-dark 
                              'color-theme-sitaramv-solaris 'color-theme-resolve
                              'color-theme-classic 'color-theme-jonadabian-slate
                              'color-theme-kingsajz 'color-theme-shaman
                              'color-theme-subtle-blue 'color-theme-snowish
                              'color-theme-sitaramv-nt 'color-theme-wheat))

[:DoReMiColorThemes]
=== Do Re Mi: Cycling with Arrow Keys or Mouse Wheel ===

`M-x doremi-color-themes', then use the up and down arrow keys and/or the mouse wheel to cycle among themes. The name of each newly applied theme is displayed in the echo area. By default (without changing variable `doremi-color-themes'), this cycles among ''all'' color themes.

  (setq doremi-color-themes my-color-themes) ; Otherwise, cycles among _all_ themes.

  (defun doremi-color-themes ()
    "Successively cycle among color themes."
    (interactive)
    (doremi (lambda (newval) (funcall newval) newval) ; update fn - just call theme
            (car (last doremi-color-themes)) ; start with last theme
            nil                           ; ignored
            nil                           ; ignored
            doremi-color-themes))         ; themes to cycle through

This code is part of library Lisp:doremi-cmd.el.

Also worth mentioning, if you define your own color theme, are the commands in library Lisp:doremi-frm.el that let you fine-tune [[Frame]] and [[Face]] colors incrementally, using the arrow keys or mouse wheel. They give you an easy way to get exactly the color scheme you want before saving it as a color theme. There are also commands to convert and tweak colors (for example, obtain a color that is slightly lighter, redder, etc. than a given color). -- DrewAdams

=== Icicles: Completion and Cycling of Color Themes ===

You can use '''[[Icicles]]''' command `icicle-color-theme' to cycle among color themes. This functionality is similar to that provided by '''DoReMi''' (see [[#DoReMiColorThemes]], above), but it also lets you ''complete'' the color-theme names. See '''[[Icicles]]'''.

For comparison with the other cycling commands on this page, do this:

  (setq icicle-color-themes my-color-themes) ; Otherwise, cycles among _all_ themes.

''Note:'' If anyone knows a good way to ''undo'' a color-theme change, let me know, so I can modify `icicle-color-theme' to let you use `C-g' to undo changes -- that way, you will be able to use `icicle-color-theme' to cycle among color themes, ''previewing'' them, without necessarily changing the theme. -- DrewAdams


=== Cycling by Repeating a Command ===

Repeat command `my-theme-cycle' (bound here to ##`[F12]'##) to cycle among themes.

    (defun my-theme-set-default () ; Set the first row
      (interactive)
      (setq theme-current my-color-themes)
      (funcall (car theme-current)))
     
    (defun my-describe-theme () ; Show the current theme
      (interactive)
      (message "%s" (car theme-current)))
     
   ; Set the next theme (fixed by Chris Webber - tanks)
    (defun my-theme-cycle ()		
      (interactive)
      (setq theme-current (cdr theme-current))
      (if (null theme-current)
      (setq theme-current my-color-themes))
      (funcall (car theme-current))
      (message "%S" (car theme-current)))
    
    (setq theme-current my-color-themes)
    (setq color-theme-is-global nil) ; Initialization
    (my-theme-set-default)
    (global-set-key [f12] 'my-theme-cycle)

: -- JakubHozak

(note: Make the following changes to allow this code to work when (setq my-color-themes color-themes). )


    (defun car-theme () ;figure out if we need car or caar
      (interactive)
      (cond
       ((consp (car theme-current))
        (caar theme-current))
       (t
        (car theme-current))))

    (defun my-theme-set-default () ; Set the first row
      (interactive)
      (setq theme-current my-color-themes)
      (funcall (car-theme)))

    (defun my-describe-theme () ; Show the current theme
    (interactive)
    (message "%s" (car-theme)))

    ; Set the next theme (fixed by Chris Webber - tanks)
    (defun my-theme-cycle ()		
    (interactive)
    (setq theme-current (cdr theme-current))
    (if (null theme-current)
        (setq theme-current my-color-themes)
        (funcall (car-theme)))
    (message "%S" (car-theme)))
    
    (setq theme-current my-color-themes)
    (setq color-theme-is-global nil) ; Initialization
    (my-theme-set-default)


== Installing a Color Theme for One Frame Only ==
You can do this by using the variable `color-theme-is-global' which
determines whether a color theme is installed on all frames or not.
Here's how to do this interactively.

    M-x set-variable RET color-theme-is-global nil
    M-x color-theme-blue-sea

A possible use for this variable is dynamic binding. Here is a larger
example to put in your ~/.emacs; it will make the Blue Sea color theme
the default used for the first frame, and it will create two additional
frames with different color themes.

    (require 'color-theme)
    ;; set default color theme
    (color-theme-blue-sea)
    ;; create some frames with different color themes
    (let ((color-theme-is-global nil))
        (select-frame (make-frame))
        (color-theme-gnome2)
        (select-frame (make-frame))
        (color-theme-standard))

== Installing a color Theme Depending on the Display ==
Use display-color-cells find how many colors are supported. Note that
on X, even though all RGB values are supported, each application gets
allocated a number of colors it may use. Perhaps that is the reason
the function returns 64 on my system even though it seems that it
supports a lot more.

    (if ((display-color-cells) 20)
        (color-theme-tty-dark)
        (color-theme-goldenrod))
	
== Installing a Color Theme Depending on the Window System ==
Use `window-system' to determine whether or not you are in a terminal,
or a windowing system such as X11.

    (if window-system
        (color-theme-subtle-hacker)
	(color-theme-hober))

`window-system' is nil for a character-based terminal, 'x' for X11, 'mac'
for mac, etc.

Fixed: The (window-system) to window-system since it's a variable and not a funcion shouldn't have the ().

== Installing a Color Theme with multi-tty ==
I want a color theme to be selected any time I open an X frame, but not when I open a TTY frame. With multi-tty, this is selected on a frame-by-frame basis. So I use a hook:

 (add-hook 'after-make-frame-functions
           (lambda (frame)
             (set-variable 'color-theme-is-global nil)
             (select-frame frame)
             (if window-system
                 (color-theme-robin-hood)
               (color-theme-tty-dark))))

== Changing Fonts ==
Usually the color themes don't change fonts. Please let me know if they do.
That is a bug. If you want to install a color-theme and then switch font-family and font-size to something new, here is an example of how to do it:

    (let ((spec '((t (:family "neep alt" :height 200)))))
        (mapc (lambda (face)
            (face-spec-set face spec)
            (put face 'face-defface-spec spec))
            '(default menu)))

If you use `set-face-font' instead, you will note that on subsequent frames, your settings may not take effect. (Actually I haven't really investigated this.)


: It seems that some color-theme-* function destory the 'default face font when the 'default face uses fontset specification. In other words, (face-attribute 'default :font) is not preserved. To handle this, insert following macro in your code:

        (defmacro save-font-excursion (face &rest body)
          "Save the :font property of given FACE during the execution of BODY."
          (declare (indent 1) (debug t))
          `(let ((oldfont (face-attribute ,face :font)) ret)
             (setq ret (progn ,@body))
             (or (string= oldfont (face-attribute ,face :font))
                 (set-face-attribute ,face nil :font oldfont))
             ret))

: And, try something like:

      (save-font-excursion 'default
        (color-theme-emacs-nw))

: Note that if you do not use fontset spec, save-font-excursion helps less. -- CinSK

== Mix and Match ==
Take a look at ColorThemeMaker.

= Color Theme Session =
Following code will allow you to setup a mechanism of saving and
retrieving the last session's settings. This depends on two files in
your home directory, .themesettings and .curTheme. The first is just
an elisp file which is loaded when Emacs starts. It is primarily used
for two settings: theme-default and theme-load-from-file.

Example 1:

    (setq theme-load-from-file t)

Example 2:

    (setq theme-default 'color-theme-gnome2)

This always loads the default theme you provided.
Add the following code to your ~/.emacs. This assumes that you have
(require 'color-theme) somewhere before that:

    (defun my-onload()
        (setq filename (concat (expand-file-name "~") "/.themesettings"))
    (if (file-exists-p filename)
        (progn
            (load-file filename)
            (if (equalp theme-load-from-file t)
                (progn
                    (setq filename 
                        (concat (expand-file-name "~") "/.curTheme"))
                    (if (file-exists-p filename)
                        (progn
                            (message "selecting theme from .curTheme")
                            (load-file filename)
                            (color-theme-install (my-color-theme))
                 )))
                (funcall theme-default)
        ))
        (message "selecting theme from color-theme-standard")
    (color-theme-install(color-theme-standard)
    )))
    
    (defun my-kill-saves()
        (if (equalp theme-load-from-file t)
            (progn
                (color-theme-print)
                (write-file (concat (expand-file-name "~") "/.curTheme"))
    )))
    
    (add-hook 'after-init-hook 'my-onload)
    (add-hook 'kill-emacs-hook 'my-kill-saves)
    

Please note that I have used this only on XEmacs. --GirishB

The above code should change the filenames to be in one place and give some indication of what the files are for.  Otherwise a year later you will be scratching your head
trying to figure out what program put those files there.  Try sticking them in a directory like ~/.my-emacs-extensions.  If you don't believe that this is important, look at your home directory and tell me what program put each file there!  -- gadfly

== Having the Color Theme Selection buffer always present ==
Put the following lines to your ~/.emacs file:

    (load-library "color-theme")
    (color-theme-select)

Assuming you have color-theme package in load-path.

== Day/night toggling ==
You can switch to dark mode and back again with the following in your ~/.emacs:

    (defun toggle-night-color-theme ()
      "Switch to/from night color scheme."
      (interactive)
      (require 'color-theme)
      (if (eq (frame-parameter (next-frame) 'background-mode) 'dark)
          (color-theme-snapshot) ; restore default (light) colors
        ;; create the snapshot if necessary
        (when (not (commandp 'color-theme-snapshot))
          (fset 'color-theme-snapshot (color-theme-make-snapshot)))
        (color-theme-dark-laptop)))
    
    (global-set-key (kbd "<f9> n") 'toggle-night-color-theme)

The function assumes that default `background-mode' is `light'.
You may wish to modify the name of [dark] theme and the key binding.

== More Color Themes ==
I added my tweaked port of ColorThemeInkpot from VIM. -- Per Vognsen

DanielBrockman links to another color-theme on his page.
I will add it for the next release. -- zeDek

I've posted the latest revision of [http://edward.oconnor.cx/elisp/color-theme-hober2.el color-theme-hober2]; it's quite a bit more fleshed out from when I submitted it to you. -- EdwardOConnor

Here's my [http://github.com/vic/vee/wikis/darkvee-colortheme DarkVee] color theme -- vic

Alex rose to the Hello Kitty challenge and wrote PinkBliss.

I've attempted to clone the Blackboard theme from textmate [http://jdhuntington.com/paste/color-theme-blackboard.el here] -- JD Huntington

[new]
I have created a color theme based on Tango Palette. Lisp:color-theme-tango.el [http://danran.72pines.com/files/2008/04/emacs_tango.png (screenshot)] -- danran

== History ==
The original color theme code was written by Jonadab the Unsightly
One.

= Installing a Random Color Theme =
Put this in your ~/.emacs:

    (funcall (car (nth (random (length color-themes)) color-themes)))

* http://www.litchie.net/programs/color-theme-random.html

== Saving a Color Theme in .Xresources ==

Given the name of a color theme, write out the .Xresources equivalent of the theme.  You would want to do this if you want to make Emacs start much faster than loading the theme from Lisp.

* http://web.archive.org/web/20061018071033/http://dev.gentoo.org/~mkennedy/archive/projects/color-theme-x/color-theme-x.el

: ''NOTE:'' This link is the internet archive mirror of an old link -- [http://wahjava.wordpress.com/ abbe]
: ''NOTE:'' Then where is the non old link?

* http://www.emacswiki.org/cgi-bin/wiki/color-theme-reg.el
: "NOTE:" Added a file based on color-theme-x, it can convert color-theme to win32 reg. -- [Kyle M. Lee]

Example usage:

    M-x color-theme-x RET hober RET
    C-u M-x color-theme-x RET classic RET ~/elisp/color-theme.el RET

After the generated X resource settings have been written out to your .Xresources file, you'll need run either xrdb -merge .Xresources or xrdb -load .Xresources (depending on the desired effect). You will have to restart your Emacs to have the new X resources take effect. 

== Issues ==

* I get a nasty error (wrong-type-argument symbolp (list font-latex-doctex-documentation-face font-lock-preprocessor-face))
when I call up color themes to customize a frame that is displaying LaTeX code. The top of the call stack is 
 internal-get-lisp-face-attribute((list font-latex-doctex-documentation-face font-lock-preprocessor-face) :family #&lt;frame Emacs@lucy 0x2393db0&gt;)
  face-attribute((list font-latex-doctex-documentation-face font-lock-preprocessor-face) :family #&lt;frame Emacs@lucy 0x2393db0&gt;)
  color-theme-face-attr-construct((list font-latex-doctex-documentation-face font-lock-preprocessor-face) #&lt;frame Emacs@lucy 0x2393db0&gt;)
: The problem is that the current version does *NOT* support multiple inherited properties. A quick workaournd has been sent to David for testing purpose. As it is quite ugly and doesn't handle Xemacs, I won't post it here before working on it again. Please David, tell us if that worked for you. -- XavierMaillard

Any ideas what to do about this?

* ViperMode does not play well with color themes. It seems like the Viper mode forces the TextCursor color to be "black" if the background is anything other than "black". This basically makes the cursor almost invisible on dark backgrouds. Just FYI. Does anyone know of a fix for this? -- GirishB

:: I've seen similar problems on Windows where somehow the cursor color was always wrong for the first frame. I solved this by creating a new frame and deleting the old one in my .emacs on Windows. -- AlexSchroeder

:: Solved the problem by loading viper-mode after the color-theme call. That seems to fix the problem. It seems like viper basically remembers the last cursor color it knew and forces it down your throat no matter what. -- GirishB

[new:DrewAdams:2007-01-14 01:39 UTC]
:: I reported that bug in May 2006. It has been fixed recently in Emacs 22. See the thread “cursor-color frame parameter cannot equal background-color” in emacs-pretest-bug@gnu.org. This has nothing to do, per se, with color themes, BTW. – DrewAdams
[new]

* Frame creation is slowed down a lot - it takes seconds to create a new frame when i've applied different color-themes before. The reason seems to be that a myriad of faces is defined, because each color themes defines some 50 faces, and they never get removed before a new face is applied. You can easily end up with 600 faces defined, and Emacs needs a lot of time to go through all of them when it creates a new frame.
Has anyone experienced similar issues? -- DavidReitter

* I get "Wrong type argument: symbolp, (link-visited info-xref)" with 2006-05-13 CVS emacs, with 2006-05-14 CVS color-theme.el. It isn't fixed by the other 'symbolp' fix, which is already included in the CVS. Any suggestion?
** I installed the CVS version of color-theme which fixed this (Emacs/22.0.92). - springfield

* New version of color-theme (6.5.4) doesn't work with stable emacs version (21.4).  Users will see this error:

&lt;code&gt;color-theme-backup-original-values: Symbol's function definition is
void: color-theme-filter&lt;/code&gt;

To fix the problem, open color-theme.el and change:

 <code>easy-menu-get-map(nil ("Tools") nil)
 easy-menu-add-item(nil ("Tools") "--")</code>

to:

 <code>easy-menu-get-map(nil ("tools") nil)
 easy-menu-add-item(nil ("tools") "--")</code>

Original help.gnu.emacs post: http://tinyurl.com/bgke3

--JasonDunsmore

[new]
This issue is fixed in the CVS.

[new]
I am running Ubuntu 6.06 (Dapper Drake) and emacs-snapshot seems to not play well with color-theme. When it loads, only the characters have the correct background color. The rest of the buffer has some default gray color. Emacs21 seems to work just fine. Has anyone else seen this? Any idea how to fix it?

[new]
Check out the [[ColorsAndKde]] page.

-McKayMarston

=== Themes for console/tty Display ===

How can I filter the themes to find those suitable for console/tty?  Recently I've been using GNU Screen and naturally my X Windows faces don't work.  Ediff is especially limited :-(.

Screen supports 256 colors.  It's a compile-time option disabled by default in Debian and Ubuntu packages. -- TrentBuck

[new]
I suggest you use no theme at all.  Most themes are not designed to degrade gracefully.
They all use a spec that says "for all display types".  So you have to rely on the fall-back
mechanism that reduces millions of colors to 16.  Not good.  All of themes I know except for
retro orange or retro green look terrible on a 16 color terminal.  Have you tried running on
a 256 color terminal?  Might be a bit better. -- AlexSchroeder

== Bugs and caveats ==

=== Installing ColorTheme (from tar.gz file) ===

After downloading the tar.gz file, there's a Makefile, a README, and a number
of other files, but no instructions for Joe User on how to install. If you're
simply a user who wants to have the color themes installed, I believe you are to
ignore the Makefile, and simply copy color-theme.el and the themes directory to a
directory on your load-path (say, [[.emacs.d]]).

[new:XavierMaillard:2009-04-15 22:59 UTC] Reported to the bug tracker. Thank you. It will be part of 6.6.1 -- XavierMaillard

=== Choosing a new theme resizes the frame ===

I am running 6.6.0 with the Carbon XEmacs port of 21.5.beta27.  Whenever I choose a new theme, it resizes my frame to 80x40. -- doktorstick

[new:XavierMaillard:2009-04-15 22:59 UTC] Please report it back to our bug tracker. -- XavierMaillard

== Gallery ==

To have an idea of what a theme looks like, I think we could all take a screenshot of our prefered and running theme. 

If you want to help (as there are many themes now and still more pending), you can send me a big (png only) screenshot accompanished with a thumb of reasonable size (ie. 400x300). I will then build an online gallery and maybe add them to the ColorTheme package.

For theme creators, I would appreciate now if you could join a screenshot of your theme when you submit it to me.

Send them to me at : zedek (at) gnu.org

MaverickWoo has compiled one such gallery at http://code.google.com/p/gnuemacscolorthemetest/.
We now have another gallery on http://www.flickr.com/groups/emacs/. Please share your screenshots.


----
CategoryFaces CategoryCustomize
