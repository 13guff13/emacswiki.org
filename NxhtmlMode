[new]
----
<b><i>
Current version is 2.08 - please upgrade if you have an older version!
</i></b>
----

[new]
http://ourcomments.org/Emacs/nXhtml/doc/img/use-nXhtml-trans2.png

<b>This page should really be named /nXhtml/ since it is about the whole nXhtml package. nxhtml-mode is just a part of that package.</b>

[new]
: To download nXhtml go to [http://ourcomments.org/Emacs/nXhtml/doc/nxhtml.html nXhtml homepage]. It is also included in [[EmacsW32]].
: You can also download nXhtml directly from the repository (without bzr). To do that download the file [http://bazaar.launchpad.net/~nxhtml/nxhtml/main/annotate/head%3A/web-vcs.el web-vcs.el], eval it and do <b>M-x web-vcs-nxhtml</b>. This can be used both for initial download and updating.
: With the web download I now recommend downloading part by part if you like it. I have the impression that many wanted a smaller download than the whole of nXhtml. Here you have it!
: To report a bug go to https://bugs.launchpad.net/nxhtml.

[new]
**Newest features** (see [http://ourcomments.org/Emacs/nXhtml/doc/nxhtml-changes.html#latest changelog]):
* Web download directly from Emacs (without bzr, instead using *web-vcs.el*, see above)
* Support for the new JavaScriptMode mode in CVS Emacs (called js-mode, formerly known as Espresso mode).
* Chunks in chunks
* Inline images for html, org-mode, css-mode etc.
* Preview as you type in Firefox (but rather slow - additions are welcome), find out where an element is in Firefox
* You can now use hi-lock with Mumamo multi major modes.
* Mumamo region chunks, which is temporarily chunks you add yourself with any major mode. You just hilight the region and decide what major mode it should have.
* Fetch and start using the latest development version of [EmacsCodeBrowser ECB] right now!



== Description ==

'''[::nXhtml]''' is a package that may help for web development, but it also contains a lot of other things.
For an overview see [http://ourcomments.org/Emacs/nXhtml/doc/nxhtml.html nXhtml home
page].
You may also find the [http://ourcomments.org/Emacs/nXhtml/tut/tutorials.html tutorials] useful.

One of the main parts is the major mode nxhtml-mode for editing XHTML files (based on NxmlMode).
This gives XHTML completion of tags and attributes also in for example php files (even if they do not contain XML + DTD specifications).

Another main part handles [[MultipleModes|multiple major modes]] (using MuMaMo).
It defines *multi major modes*, often with names
like /html-mumamo/, /nxhtml-mumamo/, /eruby-html-mumamo/, /django-html-mumamo/,
/genshi-nxhtml-mumamo/, /smarty-html-mumamo/ etc.
Those modes handle inlined style sheets and javascript, php, jsp etc, which are interleaved with the HTML.


There are a lot of other features like simple search and replace in directory trees, simple file upload, etc.
The only way to find out is to download nXhtml and try.

[new]
[:ScreenShots]
Some images showing a bit of the nXhtml functionality (try it out if you wonder more):

http://ourcomments.org/Emacs/nXhtml/doc/img/php-in-nxhtml-2.png
http://ourcomments.org/Emacs/nXhtml/doc/img/links-appmenu.png
http://ourcomments.org/Emacs/nXhtml/doc/img/region-selected-completion.png
http://ourcomments.org/Emacs/nXhtml/doc/img/nxml-where.png
http://ourcomments.org/Emacs/nXhtml/doc/img/foldit-closed.png
http://ourcomments.org/Emacs/nXhtml/doc/img/foldit-temp-opened.png


=== Quick Start ===

Installation is easy, just unzip the archive and (just as README.txt says) add one line to your .emacs:

  (load "YOUR-PATH-TO/nxhtml/autostart.el")

After this nXhtml is ready for use.
However for a little more and where to download it see
[http://ourcomments.org/Emacs/nXhtml/doc/nxhtml.html#qg the Quick Guide to nXhtml].
See [http://ourcomments.org/Emacs/nXhtml/doc/nxhtml-changes.html nXhtml Notes and Changes]
for a list of changes. You can also [http://ourcomments.org/Emacs/DL/elisp/nxhtml/beta/ try a beta].

Note that if you have [[EmacsW32]] then nXhtml is already included, but you have to turn it on. And you may want to update to a more recent version of nXhtml. (If you do just put it in the same location where the old version was.)

You need **Emacs 22** or later to use nXhtml.

----

== Libraries included in the package nXhtml ==

**nXhtml** comes with a lot of elisp libraries, some of which you can use separately.
I used to have a list here, but I always forget to update that so I have removed it.
Please download the whole library if you are interested in some special pieces.
Or, pick them from the 
[http://bazaar.launchpad.net/~nxhtml/nxhtml/main/files/head%3A/ latest version sources on Launchpad] (this may be a beta version though).

Note: Some of the files used to be here on Emacs Wiki too, but I decided to delete them since the latest version of them are now easily available from there.
The files I have deleted are 
ediff-url.el,
freemind.el,
tabkey2.el and
w32-print.el.


----
== Current Status and Bugs ==

=== The bug database ===

The preferred way to report bugs are now https://bugs.launchpad.net/nxhtml.
See that page for current bug status.
(You may also enter bugs below under Unsolved problems, but it is much better if you use the bug database.)

If you want to report a bug please use <i>M-x nxhtml-report-bug</i> to get instructions.

See also https://answers.launchpad.net/nxhtml

Old solved bugs that was reported on Emacs Wiki are here: NxhtmlOldBugs

=== Frequently Asked Questions ===

There is now a FAQ section on Launchpad: https://answers.launchpad.net/nxhtml/+faqs


----
== Comments and Questions ==

Please use the bug database if you can, see above.


=== Unsolved problems ===

==== Chunks in chunks - where does it end? ====

I have moved this to a bug report on Launchpad, please add any new comments to it there: https://bugs.launchpad.net/nxhtml/+bug/569742

==== Does it work in GNU Emacs? ====

Emacs 23.1 and the latest (2.05) official nXhtml release play havoc with my setup :(
"Invalid function: mumamo-save-buffer-state" all over the *Messages* buffer, seemingly random colouring of regions, expecially in php files, not to mention looping "Back to top level" messages when used with emacsclient.

[new]
Eh, yes. GNU Emacs is what I am using.
But your problem seems complicated. 
I can't remember I have seen that kind of problem before.
Something in your setup is colliding with nXhtml.
This is not the right place to try to find out what the problem since I need more information from you.
Can you please report this on Launchpad in nXhtml bug database?

[new]
%%*sigh%%*
Even creating a simple html page causes problems in console emacs. For example, creating a new file "foo.html", then entering 
<pre>
<html><head>
</pre>
and then pressing M-TAB provokes
<pre>
Debugger entered--Lisp error: (void-function popup-menu)
  (popup-menu menu where prefix)
  (let ((where ...)) (popup-menu menu where prefix))
  popup-menu-at-point((keymap (popcmps-document menu-item "Document" (keymap ... ... ... ... ... ...)) (popcmps-form menu-item "Form" (keymap ...)) (popcmps-scripting menu-item "Scripting" (keymap ...)) "Insert tag: "))
  (let ((pop-map ...) (sets ...) (add-alt ...)) (if sets (dolist ... ...) (dolist ... ...)) (popup-menu-at-point pop-map) completion)
  (if (not matching-alts) (progn (message "No alternative found") nil) (let (... ... ...) (if sets ... ...) (popup-menu-at-point pop-map) completion))
  (let ((matching-alts ...) completion) (if (not matching-alts) (progn ... nil) (let ... ... ... completion)))
  popcmp-completing-read-pop("Insert tag: " rng-complete-qname-function nil nil "" rng-tag-history nil nil #s(hash-table size 97 test equal rehash-size 1.5 rehash-threshold 0.8 data ("html" "Document" "head" "Document head" "title" "Document title" "base" "Base URL/target" "meta" "Meta information" "style" "Inline style sheet" "link" "Style sheet etc" "script" "(Java)Script code" "noscript" "Script disabled part" "isindex" "(DEPRECEATED)" "iframe" "Inline frame" "frameset" "Organize frames" "frame" "Sub window" "noframes" "Substitute for frames" "bdo" "Text direction" "body" "Document body" "a" "Link" "p" "Paragraph" "span" "Group inline elements" "br" "Line break" "hr" "Horizontal rule" "div" "Division/section" "img" "Image" "h1" "Header 1" "del" "Deleted text" "strike" "(DEPRECEATED)" "u" "(DEPRECEATED)" "s" "(DEPRECEATED)" "ins" "Inserted text" "sup" "Superscript text" "center" "(DEPRECEATED)" "dir" "(DEPRECEATED)" "blockquote" "Long quotation" "q" "Short quotation" "pre" "Preformatted text" "applet" "(DEPRECEATED)" "basefont" "(DEPRECEATED)" "font" "(DEPRECEATED)" "tt" "Renders as teletype or mono spaced text" "i" "Renders as italic text" "b" "Renders as bold text" "big" "Renders as bigger text" "small" "Renders as smaller text" "em" "Renders as emphasized text" "strong" "Renders as strong emphasized text" "dfn" "Defines a definition term" "code" "Defines computer code text" "samp" "Defines sample computer code" "kbd" "Defines keyboard text" "var" "Defines a variable" ...)) (("logical" "del" "ins" "abbr" "acronym" "fieldset" "blockquote" "q" "code" "samp" "cite" "kbd" "var" "dfn" "address" "em" "strong" "pre") ("physical" "hr" "sup" "sub" "font" "basefont" "br" "big" "small" "strike" "u" "i" "b" "s" "tt" "center" "bdo") ("scripting" "script" "noscript" "object" "applet") ("structure" "iframe" "p" "div" "span" "h6" "h5" "h4" "h3" "h2" "h1") ("form" "isindex" "label" "button" "option" "select" "input" "textarea" "form") ("list" "dt" "dd" "li" "dir" "menu" "ol" "dl" "ul") ("link" "a") ("image" "img" "map") ("table" "table" "tr" "th" "td" "caption" "col" "colgroup" "thead" "tbody" "tfoot") ("document" "base" "style" "link" "head" "body" "frame" "frameset" "noframes" "isindex" "nextid" "meta" "title")))
  (progn (setq err-sym nil) (popcmp-completing-read-pop prompt table predicate require-match initial-input pop-hist def inherit-input-method alt-help alt-sets))
  (if (eq popcmp-completion-style (quote popcmp-popup)) (progn (setq err-sym nil) (popcmp-completing-read-pop prompt table predicate require-match initial-input pop-hist def inherit-input-method alt-help alt-sets)) (prog1 (setq ret ...) (when ... ...)))
  (unwind-protect (if (eq popcmp-completion-style ...) (progn ... ...) (prog1 ... ...)) (popcmp-unmark-completing) (when err-sym (signal err-sym err-val)))
  (let ((err-sym ...) (err-val nil) ret) (unwind-protect (if ... ... ...) (popcmp-unmark-completing) (when err-sym ...)))
  (if (and popcmp-in-buffer-allowed (eq popcmp-completion-style ...) (boundp ...) company-mode) (progn (add-hook ... ... t) (call-interactively ...) initial-input) (popcmp-mark-completing initial-input) (let (... ... ret) (unwind-protect ... ... ...)))
  popcmp-completing-read("Insert tag: " rng-complete-qname-function nil nil "" rng-tag-history nil nil #s(hash-table size 97 test equal rehash-size 1.5 rehash-threshold 0.8 data ("html" "Document" "head" "Document head" "title" "Document title" "base" "Base URL/target" "meta" "Meta information" "style" "Inline style sheet" "link" "Style sheet etc" "script" "(Java)Script code" "noscript" "Script disabled part" "isindex" "(DEPRECEATED)" "iframe" "Inline frame" "frameset" "Organize frames" "frame" "Sub window" "noframes" "Substitute for frames" "bdo" "Text direction" "body" "Document body" "a" "Link" "p" "Paragraph" "span" "Group inline elements" "br" "Line break" "hr" "Horizontal rule" "div" "Division/section" "img" "Image" "h1" "Header 1" "del" "Deleted text" "strike" "(DEPRECEATED)" "u" "(DEPRECEATED)" "s" "(DEPRECEATED)" "ins" "Inserted text" "sup" "Superscript text" "center" "(DEPRECEATED)" "dir" "(DEPRECEATED)" "blockquote" "Long quotation" "q" "Short quotation" "pre" "Preformatted text" "applet" "(DEPRECEATED)" "basefont" "(DEPRECEATED)" "font" "(DEPRECEATED)" "tt" "Renders as teletype or mono spaced text" "i" "Renders as italic text" "b" "Renders as bold text" "big" "Renders as bigger text" "small" "Renders as smaller text" "em" "Renders as emphasized text" "strong" "Renders as strong emphasized text" "dfn" "Defines a definition term" "code" "Defines computer code text" "samp" "Defines sample computer code" "kbd" "Defines keyboard text" "var" "Defines a variable" ...)) (("logical" "del" "ins" "abbr" "acronym" "fieldset" "blockquote" "q" "code" "samp" "cite" "kbd" "var" "dfn" "address" "em" "strong" "pre") ("physical" "hr" "sup" "sub" "font" "basefont" "br" "big" "small" "strike" "u" "i" "b" "s" "tt" "center" "bdo") ("scripting" "script" "noscript" "object" "applet") ("structure" "iframe" "p" "div" "span" "h6" "h5" "h4" "h3" "h2" "h1") ("form" "isindex" "label" "button" "option" "select" "input" "textarea" "form") ("list" "dt" "dd" "li" "dir" "menu" "ol" "dl" "ul") ("link" "a") ("image" "img" "map") ("table" "table" "tr" "th" "td" "caption" "col" "colgroup" "thead" "tbody" "tfoot") ("document" "base" "style" "link" "head" "body" "frame" "frameset" "noframes" "isindex" "nextid" "meta" "title")))
  (let ((popcmp-in-buffer-allowed t)) (popcmp-completing-read prompt table predicate require-match initial-input hist def inherit-input-method nxhtml-help-tag nxhtml-tag-sets))
  nxhtml-completing-read-tag("Insert tag: " rng-complete-qname-function nil nil "" rng-tag-history)
  funcall(nxhtml-completing-read-tag "Insert tag: " rng-complete-qname-function nil nil "" rng-tag-history)
  (unwind-protect (funcall completing-fun prompt table predicate nil orig hist) (setq-default minibuffer-setup-hook saved-minibuffer-setup-hook))
  (let ((saved-minibuffer-setup-hook ...)) (add-hook (quote minibuffer-setup-hook) (quote minibuffer-completion-help) t) (unwind-protect (funcall completing-fun prompt table predicate nil orig hist) (setq-default minibuffer-setup-hook saved-minibuffer-setup-hook)))
  (setq completion (let (...) (add-hook ... ... t) (unwind-protect ... ...)))
  (cond ((not ...) (if ... ... ...) (ding) nil) ((eq completion t) orig) ((and completion ...) (delete-region start ...) (insert completion) (cond ... ... ...)) (t (setq completion ...) (when completion ... ...) completion))
  (let* ((orig ...) (completion ...) (completing-fun ...) (completion-ignore-case t)) (cond (... ... ... nil) (... orig) (... ... ... ...) (t ... ... completion)))
  rngalt-complete-before-point(73 rng-complete-qname-function "Insert tag: " nil rng-tag-history nxhtml-completing-read-tag)
  (let ((rng-complete-target-names ...) (rng-complete-name-attribute-flag nil)) (rngalt-complete-before-point (1+ lt-pos) (quote rng-complete-qname-function) "Insert tag: " nil (quote rng-tag-history) rngalt-completing-read-tag))
  (let ((completion ...) name) (when completion (cond ... ...)))
  (progn (and rng-collecting-text (rng-flush-text)) (rngalt-complete-tag-region-prepare) (let (... name) (when completion ...)) (rngalt-complete-tag-region-finish) t)
  (if (save-excursion (re-search-backward rng-in-start-tag-name-regex lt-pos t)) (progn (and rng-collecting-text ...) (rngalt-complete-tag-region-prepare) (let ... ...) (rngalt-complete-tag-region-finish) t))
  (when (save-excursion (re-search-backward rng-in-start-tag-name-regex lt-pos t)) (and rng-collecting-text (rng-flush-text)) (rngalt-complete-tag-region-prepare) (let (... name) (when completion ...)) (rngalt-complete-tag-region-finish) t)
  (let (rng-complete-extra-strings) (when (and ... rng-complete-end-tags-after-< rng-open-elements ... ...) (setq rng-complete-extra-strings ...)) (when (save-excursion ...) (and rng-collecting-text ...) (rngalt-complete-tag-region-prepare) (let ... ...) (rngalt-complete-tag-region-finish) t))
  rngalt-complete-tag(72)
  (or (rngalt-complete-tag lt-pos) (rng-complete-end-tag lt-pos) (rngalt-complete-attribute-name lt-pos) (rngalt-complete-attribute-value lt-pos))
  (and lt-pos (= (rng-set-state-after lt-pos) lt-pos) (or (rngalt-complete-tag lt-pos) (rng-complete-end-tag lt-pos) (rngalt-complete-attribute-name lt-pos) (rngalt-complete-attribute-value lt-pos)))
  (or (and lt-pos (= ... lt-pos) (or ... ... ... ...)) (when rngalt-complete-last-try (funcall rngalt-complete-last-try)))
  (let ((lt-pos ...) xmltok-dtd) (or (and lt-pos ... ...) (when rngalt-complete-last-try ...)))
  (progn (unless rng-current-schema-file-name (when ... ...)) (let (... xmltok-dtd) (or ... ...)))
  (or (when rngalt-complete-first-try (funcall rngalt-complete-first-try)) (progn (unless rng-current-schema-file-name ...) (let ... ...)))
  (progn (rngalt-reapply-validation-header) (when rng-current-schema-file-name (rngalt-validate)) (or (when rngalt-complete-first-try ...) (progn ... ...)))
  (if rng-validate-mode (progn (rngalt-reapply-validation-header) (when rng-current-schema-file-name ...) (or ... ...)))
  (when rng-validate-mode (rngalt-reapply-validation-header) (when rng-current-schema-file-name (rngalt-validate)) (or (when rngalt-complete-first-try ...) (progn ... ...)))
  rngalt-complete()
  run-hook-with-args-until-success(rngalt-complete)
  nxml-complete()
  nxhtml-redisplay-complete()
  (condition-case err (nxhtml-redisplay-complete) (quit (message "%s" ...) (undo-start) (undo-more 1) (rngalt-complete-tag-region-cleanup)))
  (cond ((eq where ...) (insert 34)) ((eq where ...) (if ... nil ... t)) ((eq where ...) (let ... ... ...)) ((or ...) (rngalt-complete-tag-region-prepare) (insert "<") (condition-case err ... ...) t) (t nil))
  (let ((where ...)) (cond (... ...) (... ...) (... ...) (... ... ... ... t) (t nil)))
  (progn (let (...) (cond ... ... ... ... ...)))
  (if rng-current-schema-file-name (progn (let ... ...)))
  (when rng-current-schema-file-name (let (...) (cond ... ... ... ... ...)))
  nxhtml-complete-last-try()
  funcall(nxhtml-complete-last-try)
  (progn (funcall rngalt-complete-last-try))
  (if rngalt-complete-last-try (progn (funcall rngalt-complete-last-try)))
  (when rngalt-complete-last-try (funcall rngalt-complete-last-try))
  (or (and lt-pos (= ... lt-pos) (or ... ... ... ...)) (when rngalt-complete-last-try (funcall rngalt-complete-last-try)))
  (let ((lt-pos ...) xmltok-dtd) (or (and lt-pos ... ...) (when rngalt-complete-last-try ...)))
  (progn (unless rng-current-schema-file-name (when ... ...)) (let (... xmltok-dtd) (or ... ...)))
  (or (when rngalt-complete-first-try (funcall rngalt-complete-first-try)) (progn (unless rng-current-schema-file-name ...) (let ... ...)))
  (progn (rngalt-reapply-validation-header) (when rng-current-schema-file-name (rngalt-validate)) (or (when rngalt-complete-first-try ...) (progn ... ...)))
  (if rng-validate-mode (progn (rngalt-reapply-validation-header) (when rng-current-schema-file-name ...) (or ... ...)))
  (when rng-validate-mode (rngalt-reapply-validation-header) (when rng-current-schema-file-name (rngalt-validate)) (or (when rngalt-complete-first-try ...) (progn ... ...)))
  rngalt-complete()
  run-hook-with-args-until-success(rngalt-complete)
  nxml-complete()
  call-interactively(nxml-complete nil nil)
</pre>
----
See also MultipleModes MuMaMo CategoryHypermedia HtmlMode
