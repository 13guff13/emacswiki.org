There are several tools to create a [[tags file]].  The two dominant tools are [[etags]] and ExuberantCtags.  Etags comes with Emacs and ExuberantCtags is separate but available on most systems.  ExuberantCtags is the better choice as it supports more languages and is more robust.

== Using ExuberantCtags ==

To use ctags with emacs, you must supply the `-e' parameter to instruct ctags to generate an emacs tag file.  The commands below are often sourced into a Makefile and then run with a CompileCommand.

  cd /path/to/my/project
  ctags -e myfile.cpp

Ctags also has a recursive option, `-R'.  This is the most common (and simple) usage.  To generate tags for all files that ctags recognizes, simply execute this from the terminal:

  cd /path/to/my/project
  ctags -e -R .

You can filter it to specific extensions if needed:

  cd /path/to/my/project
  ctags -e -R *.cpp *.hpp *.h

=== From within Emacs ===

Put this in your [[init file]]:

  (setq path-to-ctags "/opt/local/bin/ctags") ;; <- you're ctags path here

  (defun create-tags (dir-name)
    "Create tags file."
    (interactive "DDirectory: ")
    (shell-command
     (format "%s -f %s/TAGS -e -R %s" path-to-ctags dir-name dir-name))
  )

Then, once it has been evaluated, you can invoke it via `m-x create-tags'

== Using etags ==

First, see a list of languages supported by etags by running `etags --help'.

To generate tags for certain source files (like *.el files), invoke this:

  cd /path/to/my/project
  etags *.el

To recurse through directories, run something like this:

  cd /path/to/my/project
  find . -type f -iname "*.[ch]" | etags -L -

FYI: Avoid using `xargs' with `etags' (e.g. ##find . -type f -iname "*.[ch]" | xargs etags##).  For source trees with many files, xargs may execute etags multiple times, overwriting the previous tags file on each execution.

=== From within emacs ===

Put this in your [[init file]]:

  (defun create-tags (dir-name)
     "Create tags file."
     (interactive "DDirectory: ")
     (eshell-command 
      (format "find %s -type f -name \"*.[ch]\" | etags -L -" dir-name)))

== Other tips ==

It just works with ExuberantCtags and etags, as both recognize the language based on extension.

If you happen to need to use two separate tags programs (like rtags and ctags) to parse all languages used in a project, just append one to the other.

== See also ==

* Lisp:traverselisp.el is able to build tags fast recursively in a directory tree with ` M-x traverse-build-tags-in-project' then just choose extension from prompt.
* [http://github.com/mattkeller/etags-update etags-update.el] is a global minor mode that will update your TAGS when you save a file. It can also offer to add a file to your TAGS if it is not already indexed.
* RecursiveTags for more tips on generating tags in recursive directories.

----
CategoryExternalUtilities
