elnode is an asynchronous HttpServer framework. You can use it to write HTTP services in ELisp.

* [http://github.com/nicferrier/elnode Download elnode from github]
* [[elnode.el|Download from EmacsWIKI]]

Elnode is basically an ELisp version of [http://nodejs.org/ node.js],
the asynchronous HTTP framework for Google's Javascript engine.

Hacking HTTP servers with Elnode is quite easy because of the Emacs editing and debugging framework around it. 

Elnode's performance is better than I expected, although we haven't done a formal test.

== What is node.js? ==

node.js is an evented IO server framework in Javascript. node.js is
not a browser thing. It is a server side thing. You write event driven
servers in it. That means you write all your code in a single process
and rely on the natural blocking of clients to give you
concurrency. Of course, a standard technique is to to spawn processes
to handle work again communicating asynchronously.


== What is Elnode? ==

Emacs includes a low level event IO framework: processes, filters and
sentinels. Elnode builds mechanisms for making HTTP servers on top of
these in similar ways to node.js.

== Talking about Elnode ==

I'd like a permanent place (as opposed to irc) to discuss Elnode. [[https://convore.com/elnode/|So far I've setup this Convore group for discussing Elnode]], but Convore seems dead and very very slow. Anyone got any better ideas?

== What can you do with Elnode? ==

Elnode probably isn't a general purpose web framework. There are quite a few things that it is good for though.

=== Publishing Emacs data ===

Some data is locked in Emacs: diary, org-mode. These are things that could benefit from dynamic access via a browser sometimes.

Here's a stupid example - publish your currently running Emacs' contents:

 ;; Expose your running emacs to the local web by using elnode
 ;; Copyright (C) 2010 by Nic Ferrier

 (defun insideout-html-escape (str)
   "Escape significant HTML characters in 'str'"
   (replace-regexp-in-string 
    "<\\|\\&" 
    (lambda (src)
      (cond
       ((equal src "&") "&amp;")
       ((equal src "<")  "&lt;")))
    str))

 (defun insideout-render (buf)
   "Render buffer 'buf' as HTML"
   (with-current-buffer (get-buffer buf-name)
     (format "<html>
 <body><pre>%s</pre></body>
 </html>"
             (insideout-html-escape
              (buffer-substring-no-properties (point-min) (point-max))))))

 (defun insideout-handler (httpcon)
   (let ((p (elnode-http-pathinfo httpcon)))
     (let ((buf-name (progn
                       (string-match "/\\(.*\\)" p)
                       (match-string 1 p))))
       ;; An individual buffer
       (progn
         (elnode-http-start httpcon 200 '("Content-Type" . "text/html"))
         (elnode-http-return 
          httpcon 
          (if (bufferp (get-buffer buf-name))
              (insideout-render buf)
            ;; The buffer index
            (format "<html><body><ul>%s</ul></body></html>"
                    (mapconcat
                     (lambda (buf)
                       (if (not (string-match "\\*" (buffer-name buf)))
                           (format "<li><a href='/%s'>%s</a></li>"
                                   (buffer-name buf)
                                   (buffer-name buf))))
                     (buffer-list)
                     "\n"))))))))

 (elnode-start 'insideout-handler 8028 "localhost")
 
 ;; End

=== A blog with Elnode ===

Here's the core of a blog app with elnode. Elnode is great at mapping other programs into HTTP, because of Emacs very good async program support.

The following example uses two different command line programs:

* crearecreoler.py
** this takes a creole wiki file (which is how I store my blog files) and renders it to HTML and then through an XSLT to blog specific HTML
* creare_top
** renders the latest creole wiki file

Using these two programs to do the work of rendering and non-HTTP specific stuff makes the elisp a snap. 

 ;; Elnode wiki server

 (require 'elnode)

 (defun creole-wiki-handler (httpcon)
   (elnode-test-path 
    httpcon "~/blog"
    (lambda (httpcon docroot targetfile)
      (elnode-http-start httpcon 200 '("Content-type" . "text/html"))
      (elnode-child-process 
       httpcon 
       "python" 
       (expand-file-name "~/blog/_creare/crearecreoler.py")
       (directory-file-name targetfile))
      )))

 (defun creole-site-handler (httpcon)
   (elnode-dispatcher 
    httpcon
    `(("sitemedia/\\(.*\\)$" . ,(elnode-webserver-handler-maker "~/blog/sitemedia"))
      ("blog/$" . 
       ,(lambda (httpcon)
          (elnode-http-start httpcon 200 '("Content-type" . "text/html"))
          (elnode-child-process httpcon "bash" 
                                (expand-file-name "~/blog/_creare/creare_top"))))
      ("blog/\\(.*\\)$" . creole-wiki-handler)
      ("\\(.*\\)$" . creole-wiki-handler)
      )))

 (elnode-start 'creole-site-handler 8027 "localhost")

 ;; End

As you can see, it's really very simple. The programs are pretty easy
to write and test and Elnode is just a Lisp-powerered mapping
language.
