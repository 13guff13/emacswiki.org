Elnode is an asynchronous HttpServer framework. You can use it to write HTTP services in EmacsLisp.

Elnode is basically an ELisp version of [http://nodejs.org/ node.js],
the asynchronous HTTP framework for Google's Javascript engine.

Hacking HTTP servers with Elnode is quite easy because of the Emacs editing and debugging framework around it. 

Elnode's performance is better than I expected, although we haven't done a formal test.

== What is node.js? ==

node.js is an evented IO server framework in Javascript. node.js is
not a browser thing. It is a server side thing. You write event driven
servers in it. That means you write all your code in a single process
and rely on the natural blocking of clients to give you
concurrency. Of course, a standard technique is to to spawn processes
to handle work - again, communicating asynchronously.


== What is Elnode? ==

Emacs includes a low level event IO framework: processes, filters and
sentinels. Elnode builds mechanisms for making HTTP servers on top of
these in similar ways to node.js.

Elnode should be used for making small, personal web services or for developing a first draft of a web service you may later do in Clojure or Node.js or some other web framework.

Emacs is a very good Lisp programming environment as well as a great editor. Now that Emacs 24 has lexical scope EmacsLisp is a very powerful language. A webserver framework inside such a powerful Lisp environment therefore makes sense.


== Getting Elnode ==

* marmalade - M-x install-package [ENTER] elnode
* [http://github.com/nicferrier/elnode Download elnode from github]
* [[elnode.el|Download from EmacsWIKI]]




== Talking about Elnode ==

I'd like a permanent place (as opposed to irc) to discuss Elnode. [[https://convore.com/elnode/|So far I've setup this Convore group for discussing Elnode]], but Convore seems dead and very very slow. Anyone got any better ideas?

== A tutorial for Elnode ==

People asked for a tutorial, so NicFerrier has started to make one. Progress is [[https://github.com/nicferrier/elnode/blob/master/elnode_tutorial.creole|here]].

You need the latest version of Elnode (0.8) to make this tutorial work.

== What can you do with Elnode? ==

Elnode probably isn't a general purpose web framework. There are quite a few things that it is good for though.

=== Publishing Emacs data ===

Some data is locked in Emacs: diary, org-mode. These are things that could benefit from dynamic access via a browser sometimes.

Here's a stupid example - publish your currently running Emacs' contents:

 ;; Expose your running emacs to the local web by using elnode
 ;; Copyright (C) 2010 by Nic Ferrier

 (defun insideout-html-escape (str)
   "Escape significant HTML characters in 'str'"
   (replace-regexp-in-string 
    "<\\|\\&" 
    (lambda (src)
      (cond
       ((equal src "&") "&amp;")
       ((equal src "<")  "&lt;")))
    str))

 (defun insideout-render (buf)
   "Render buffer 'buf' as HTML"
   (with-current-buffer (get-buffer buf-name)
     (format "<html>
 <body><pre>%s</pre></body>
 </html>"
             (insideout-html-escape
              (buffer-substring-no-properties (point-min) (point-max))))))

 (defun insideout-handler (httpcon)
   (let ((p (elnode-http-pathinfo httpcon)))
     (let ((buf-name (progn
                       (string-match "/\\(.*\\)" p)
                       (match-string 1 p))))
       ;; An individual buffer
       (progn
         (elnode-http-start httpcon 200 '("Content-Type" . "text/html"))
         (elnode-http-return 
          httpcon 
          (if (bufferp (get-buffer buf-name))
              (insideout-render buf)
            ;; The buffer index
            (format "<html><body><ul>%s</ul></body></html>"
                    (mapconcat
                     (lambda (buf)
                       (if (not (string-match "\\*" (buffer-name buf)))
                           (format "<li><a href='/%s'>%s</a></li>"
                                   (buffer-name buf)
                                   (buffer-name buf))))
                     (buffer-list)
                     "\n"))))))))

 (elnode-start 'insideout-handler 8028 "localhost")
 
 ;; End

=== A WIKI with Elnode ===

With the latest Elnode (0.9) I've been writing a WIKI engine. Mostly
I've been doing this to make publishing my own blog with just
EmacsLisp possible... but it's also kinda interesting.

I invented a way of executing EmacsLisp in a child Emacs so that rendering would be relatively quick. 

Anyway, here's the core of the WIKI:

{{{
(require 'creole)
(require 'elnode)

(defconst wiki-docroot "/home/nferrier/emacswiki"
  "Where we will find the pages for our wiki.

CSS files can be in a sub-directory 'css' and Javascript files
can be in a subdirectory 'js'.

All other resources are assumed to be WIKI pages.")

(defun wiki-handler-maker (docroot)
  "Make a handler for serving Wiki pages in DOCROOT.

This uses 'elnode-worker-elisp' to export WikiCreole pages to
HTML with 'creole'."
  (lambda (httpcon)
    (elnode-test-path
     httpcon wiki-docroot
     (lambda (httpcon docroot target-path)
       (elnode-http-start httpcon 200 `("Content-type" . "text/html"))
       (elnode-worker-elisp
           httpcon
           ((target target-path))
         (require 'creole)
         (creole-wiki target))))))


;; Setup the defaults

(defconst wiki-webserver
  (elnode-webserver-handler-maker wiki-docroot)
  "The webserver handler.

This is needed for serving Javascript or CSS files or any
collateral files used by the WIKI, such as images or source
code.")

(defconst wiki-wikiserver
  (wiki-handler-maker wiki-docroot)
  "The WIKI handler.")

(defconst wiki-urlmap
  '(("/wiki/\\([A-Za-z0-9-]+\\)" . wiki-handler)
    ("/css/.*" . wiki-webserver)
    ("/js/.*" . wiki-webserver))
  "The URL mappings for the wiki.")

(provide 'wikiengine)
}}}

//elnode-worker-elisp// causes that //creole-wiki// function to be
executed in a child Emacs. All the plumbing between it and the child
HTTP connection is done automatically and all the time the main Elnode
process is just dealing with IO in a very simple and scalable
way. 

Pretty easy, eh?
