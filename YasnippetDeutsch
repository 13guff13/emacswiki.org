[[de:YasnippetDeutsch]]
== Beschreibung ==

*YASnippet* (Yet Another Snippet, etwa "Noch ein Schnippsel") ist ein Vorlagensystem für Emacs. 
Es ermöglicht, ein getipptes Schlagwort automatisch in eine Textvorlage zu ersetzen. Dies ist äußerst praktisch, wenn man häufig vorkommende Textfragmente im Quellcode einbauen muss. 

Die Vorlagen von YASnippet werden auch Schnipsel (engl.: /snippet/) genannt. In diesem [https://yasnippet.googlecode.com/files/yas_demo.avi Video] wird die Installation und die Funktionsweise von YASnippet verdeutlicht (Avi, etwa 70MB).

Die vordefinierten Schnippsel decken folgende Sprachen ab:
C, C++, [CSharpMode C#], [PerlMode Perl], [PythonMode Python], [RubyMode Ruby], [SqlMode SQL], LaTeX, 
[NxhtmlMode HTML], [CascadingStyleSheetMode CSS] und vieles mehr.

Zu finden ist YASnippet auf http://github.com/capitaomorte/yasnippet

== Installationsanweisungen ==

=== Standardinstallation ===

Um das gewöhnliche <code>yasnippet-*.tar.bz2</code>-Archiv zu installieren, lädt man sich dieses von dieser [https://code.google.com/p/yasnippet/ Seite] und entpackt es in ein gewünschtes Verzeichnis. Üblicherweise ist dies <code>~/.emacs.d/packages/</code>. Danach fügt man folgendes in die <code>~/.emacs</code> Konfigurationsdatei ein:

{{{
    (add-to-list 'load-path "~/.emacs.d/packages/yasnippet-x.y.z")
    (require 'yasnippet) ;; not yasnippet-bundle
    (yas/initialize)
    (yas/load-directory "~/.emacs.d/plugins/yasnippet-x.y.z/snippets")
}}}

<code>x.y.z</code> ist dabei mit der Versionsnummer des aktuellen Paketes zu ersetzen.

=== Mit yasnippet-bundle.el ===

Für ein schnelles Testen von Yasnippet lädt man sich die einfachere "bundle" Version von der selben [https://code.google.com/p/yasnippet/ Seite] herunter. Die Installationsanleitung findet man im eingangs erwähnten [https://yasnippet.googlecode.com/files/yas_demo.avi Video].
Wenn man jedoch plant, sich eigene Vorlagen zu erstellen (was sehr wahrscheinlich ist), oder bestehende zu ändern, so sollte man die normale Installation durchführen.

1. Herunterladen von <code>yasnippet-bundle-*.el</code> als <code>tar gz</code> Archiv. Dieses entpacken.

2. Die Datei <code>yasnippet-bundle.el</code>, in den Ordner <code>~/.emacs.d/packages/</code> einfügen. Man erstelle diesen, wenn er noch nicht existiert.

3. Öffnen der eben abgespeicherten Datei in Emacs. Ausführen des Befehls<code>Alt+x eval-buffer</code>.

Das war's schon. Wenn man jetzt eine Datei öffnet, erscheint "YASnippet" in der Menüleiste.  Hier kann man komfortabel eine Vorlage auswählen und in den Text einfügen.
Außerdem kann man nun eine vordefinierte Abkürzung im Text eingeben, und diese durch Drücken von <code>Tab</code> durch die entsprechende Vorlage ersetzen.
Möchte man beim Starten von Emacs Yasnippet automatisch laden, so trägt man folgendes in seine <code>~/.emacs</code> Datei ein:

{{{
(add-to-list 'load-path "~/.emacs.d/packages")
(require 'yasnippet-bundle)
}}}

=== Unter Gentoo ===

Derzeit (Stand: Oktober 2013) befindet sich yasnippet noch im Teszweig von Gentoo. Um es trotzdem zu installieren führt man folgendes als Administrator aus:
<code>su</code> Enter
<code>echo "app-emacs/yasnippet" >> /etc/portage/package.keywords</code>
<code>emerge yasnippet</code> 

Unter <code>/usr/share/emacs/etc/yasnippet/snippets</code> sind dann die vordefinierten Schnipsel gespeichert. Um eigene Schnipsel anzulegen, erstellt man sich dafür einen eigenen Ordner:

<code>mkdir ~/.emacs.d/mysnippets</code>

In die Datei <code>~/.emacs</code> trägt man dann folgendes ein:

{{{
(yas/initialize)
(yas/load-directory "/usr/share/emacs/etc/yasnippet/snippets")
(setq yas/root-directory "~/.emacs.d/mysnippets"); Zum Entwickeln und Speichern von persönliche Schnipseln unter ~/emacs.d/mysnippets
(yas/load-directory yas/root-directory); Load the snippets
}}}

=== Installation mit package-install in Emacs ===

In einem modernen Emacs ist der Befehl <code>M-x list-packages</code> der empfohlene Weg um Pakete aufzulisten und zu installieren. 
MELPA enthält einen sehr aktuellen Schnappschuss von YASnippet. Siehe auch http://melpa.milkbox.net/#installing (Englisch).

== Anleitung == 

Eine detaillierte Anleitung für YASnippet gibt es [http://capitaomorte.github.io/yasnippet/#how-to-use-yasnippet hier] auf Englisch unter /How to use YASnippet/.

== Noch mehr Vorlagen ==

Hier gibt es eine größere Auswahl an Vorlagen von [http://www.emacswiki.org/emacs-en/AndyStewart_YasnippetTemplate Andy Stewart].

Und hier gibt es noch mehr: http://coderepos.org/share/browser/config/yasnippet

Hier gibt es einige Vorlagen für die JSP Standard Tag Bibliothek: http://github.com/eentzel/yasnippet-jstl/

Außerdem gibt es vier Pakete, um Vorlagen automatisch zu erstellen:

* [https://github.com/mlf176f2/r-autoyas.el R-autoyas] -- Erstellt Vorlagen für R im ess-mode

* ElAutoyas -- Erstellt Vorlagen für den emacs-lisp-mode.

* Lisp:auto-yasnippet.el -- Erstellt schnell und einfach "Wegwerf"-Vorlagen.

* [https://github.com/ejmr/php-auto-yasnippets php-auto-yasnippets] -- Erstellt Vorlagen für den php-mode

== Auswahl einer Vorlage mit helm (anything.el) ==

  (defun shk-yas/helm-prompt (prompt choices &optional display-fn)
    "Use helm to select a snippet. Put this into `yas/prompt-functions.'"
    (interactive)
    (setq display-fn (or display-fn 'identity))
    (if (require 'helm-config)
        (let (tmpsource cands result rmap)
          (setq cands (mapcar (lambda (x) (funcall display-fn x)) choices))
          (setq rmap (mapcar (lambda (x) (cons (funcall display-fn x) x)) choices))
          (setq tmpsource
                (list
                 (cons 'name prompt)
                 (cons 'candidates cands)
                 '(action . (("Expand" . (lambda (selection) selection))))
                 ))
          (setq result (helm-other-buffer '(tmpsource) "*helm-select-yasnippet"))
          (if (null result)
              (signal 'quit "user quit!")
            (cdr (assoc result rmap))))
      nil))

== Popup Menü für yas-choose-value ==

Übernommen von http://blog.iany.me/2012/03/use-popup-isearch-for-yasnippet-prompt/

Note: yasnippet von git (version 0.8) (new yas-* instead of yas/* functions and variable names)

{{{
;;; use popup menu for yas-choose-value
(require 'popup)

;; add some shotcuts in popup menu mode
(define-key popup-menu-keymap (kbd "M-n") 'popup-next)
(define-key popup-menu-keymap (kbd "TAB") 'popup-next)
(define-key popup-menu-keymap (kbd "<tab>") 'popup-next)
(define-key popup-menu-keymap (kbd "<backtab>") 'popup-previous)
(define-key popup-menu-keymap (kbd "M-p") 'popup-previous)

(defun yas-popup-isearch-prompt (prompt choices &optional display-fn)
  (when (featurep 'popup)
    (popup-menu*
     (mapcar
      (lambda (choice)
        (popup-make-item
         (or (and display-fn (funcall display-fn choice))
             choice)
         :value choice))
      choices)
     :prompt prompt
     ;; start isearch mode immediately
     :isearch t
     )))

(setq yas-prompt-functions '(yas-popup-isearch-prompt yas-ido-prompt yas-no-prompt))
}}}

== ido-complete yasnippet keys ==
Evaluate this snippet:
{{{
;; Completing point by some yasnippet key
(defun yas-ido-expand ()
  "Lets you select (and expand) a yasnippet key"
  (interactive)
    (let ((original-point (point)))
      (while (and
              (not (= (point) (point-min) ))
              (not
               (string-match "[[:space:]\n]" (char-to-string (char-before)))))
        (backward-word 1))
    (let* ((init-word (point))
           (word (buffer-substring init-word original-point))
           (list (yas-active-keys)))
      (goto-char original-point)
      (let ((key (remove-if-not
                  (lambda (s) (string-match (concat "^" word) s)) list)))
        (if (= (length key) 1)
            (setq key (pop key))
          (setq key (ido-completing-read "key: " list nil nil word)))
        (delete-char (- init-word original-point))
        (insert key)
        (yas-expand)))))
}}}
and map yas-ido-expand with a chord, e.g.:

    (define-key yas-minor-mode-map (kbd "<C-tab>")     'yas-ido-expand)

Viel Spaß ;)

== Diskussion ==

----
CategoryTemplates
