== Bazaar quick start guide for Emacs Developers ==

Emacs is going to switch to Bazaar as its version control system.

If you are an Emacs contributor without experience on Bazaar in
particular and Distributed Version Control Systems (dVCS) in general,
the full introduction is at [[BzrForEmacsDevs]] -- that document tells
you how to jump straight into Distributed Version Control practices as
an Emacs developer.

However, if you don't have time to switch to a dVCS way of working
right away but still need to contribute a fix to Emacs, you can start
here instead.  It will allow you to:

* Contribute to Emacs without immersing yourself in the brave new world of dVCS.
* Get conversant with the Bazaar UI.
* Have a starting point for learning the full capabilities of Bazaar.

We hope you will go back and read [[BzrForEmacsDevs]] when you have a chance.

=== Conventions and basic info ===

* Whenever we need to refer to the Emacs /trunk/ branch (aka
  /mainline/ aka /HEAD/) on the GNU servers, we'll use
  *URL_TO_UPSTREAM_TRUNK*. At the time of this writing, it is
  ##sftp://<membername>@bzr.savannah.gnu.org/srv/bzr/emacs/trunk## but
  it may change at any moment.

* ##bzr help /command/## is an easy way to get documentation about
    /command/. Use this for learning useful command line options.

* bzr version 1.17 or newer is required. It is highly recommended to
  use version 2.0 or newer, due to performance improvements.


=== Starting ===

We start by telling Bazaar who you are. This is used for recording the
author of the commits:

##bzr whoami "Joe Hacker <joe.hacker@address.org>"##

Now we create a shared repository. A repository is just a place
where you can store one or more branches, not necessarily related one
to each other. It's a performance trick that dramatically improves (in
terms of required time and storage) certain operations that you may do
when you expand your Bazaar usage beyond what is explained here. It is
a good idea, but not strictly required.

##bzr init-repo --2a emacs/##

creates a shared repository in the directory /emacs/. ##--2a## is an storage
format specification which is the most efficient and modern format
supported by Bazaar right now and is the default on Bazaar version
2.0.

Now we get the source files plus all the history of the branch we work
on (/trunk/ on this case, which is the CVS mainline):

##cd emacs/##

##bzr checkout URL_TO_UPSTREAM_TRUNK trunk##

On Bazaar parlance this creates a *bound branch*, also known as a
 *heavyweight checkout*.

Is a slow process. It needs to download about 300 MB of data and makes
heavy use of the CPU sometimes, so be patient.

Now we have everything we need in the directory /trunk/. If you are
working inside a shared repository like recommended above do not move
the /trunk/ directory around nor rename it.


=== Daily work ===

It is fairly similar to CVS:

##<edit files>##

##bzr up##

##bzr commit##

If Bazaar complains about conflicts after the update, fix them and use

##bzr resolve <file>##

You can list a series of name files after each command for restricting
its scope. If omitted, all files are assumed, except in the case of
##bzr resolve##, which requires the file names or the switch ##--all##
for marking all conflicts as resolved.

Before committing, not just the files you are committing but _all_
your local source files must be up to date with upstream. So if
somebody else commits to upstream between the ##bzr up## and the ##bzr
commit## commands, you'll need to ##bzr up## again.

With Bazaar you shouldn't commit the changed files one at a time if
they belong to the same logical change. So please don't do:

##bzr commit ChangeLog.txt##

##bzr commit lisp/foo.el##

but instead do

##bzr commit lisp/foo.el ChangeLog.txt##

or just

##bzr commit##

if those are the only changed files. This is very important because
every commit creates a *changeset*, which is a discrete step on the
history of the code base. A changeset should correspond to one
well-defined purpose which is completely achieved with the
corresponding commit as, for instance, "Fix bug #342" or "Implement
feature Foo".


=== More branches ===

If you work on other branches besides /trunk/, just ##cd## into your
shared repository and

##bzr checkout URL_TO_UPSTREAM_branch_name your_branch_name##

This is one of the operations where having a shared repository helps:
Bazaar will download only those revisions which are not on /trunk/, so
the process will be much faster.


=== Other commands ===

Bazaar has ##status##, ##log##, ##annotate##, ##revert##, etc. They do
what you expect.


=== Use VC-Dir ===

VC-Dir works fine with this setup. It doesn't support all features of
more advanced Bazaar setups, though.


=== That's it ===

You know enough to continue your Emacs hacking. Furthermore, you have
the initial elements for turning your current setup into a more
advanced setup once you learn enough to do so. You will not need to
download all the history from upstream again.


=== What you have, what you are missing ===

You have in your disk a copy of the VC history of the /trunk/ branch
since the last ##bzr update##. Hence, Bazaar does not need to contact
a server upstream for displaying logs, reverting edited files,
annotating, etc. This is useful for working off-line.

Bazaar makes possible to commit changes off-line to your local history
and send them upstream in one batch. There are several options with
associated trade-offs for doing this, so read BzrForEmacsDevs or ask
on the emacs-devel mailing list if you are interested on that
possibility.

Bazaar allows you to work as if you had your own personal CVS branch
in your machine and communicate changes with other developers, not
only with upstream. What's considered "upstream" is just an agreement
among the developers who participate on the same project. That is the
essence of Distributed Version Control. Your current setup can be
easily adapted for this, but you need to master the necessary Bazaar
concepts before embarking on that practices.

Bazaar makes very easy to create as much private branches as you
wish.

=== Further reading ===

BzrForEmacsDevs
