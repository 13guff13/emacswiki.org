[[ELPA]] packages come in two forms. The first is a relatively simple
single file package, the second is a more complicated multi-file
format. Most of this page discusses the multi-file format because it
causes the most problems.


== Multifile packages ==

[[ELPA]] multifile packages have a complex structure. They are not
simple tar archives. This page attempts to describe how to make them.

=== When do you need to build a multifile package? ===

MELPA builds packages for you, with it's own build system. You don't
build packages with MELPA.

ELPA requires you to have the directory sturcture here checked into
the ELPA git repository. You don't build the actual tar file.

Marmalade requires that you submit the actual tar file of your built
package.

Emacs requires that you build tar file packages if you want to install
them from the file system with:

{{{
M-x package-install-file
}}}

for example.


=== An example package ===

Let's imagine you have a package `alchemist`, basically you need to
create a directory that looks like this:

{{{
alchemist-0.0.2/alchemist-buffer.el
alchemist-0.0.2/alchemist-compile.el
alchemist-0.0.2/alchemist-execute.el
alchemist-0.0.2/alchemist-hooks.el
alchemist-0.0.2/alchemist-mix.el
alchemist-0.0.2/alchemist-utils.el
alchemist-0.0.2/alchemist.el
alchemist-0.0.2/alchemist-pkg.el
}}}

and then tar that.

The pkg file, `alchemist-pkg.el`, must look like this:

{{{
(define-package
    "alchemist"
    "0.0.2"
  "A package to help with alchemy.")
}}}

In other words: package name, version, summary. All strings.


Marmalade has a
[[https://github.com/nicferrier/elmarmalade/tree/master/demo-multifile demo multifile package]]
with a Makefile that shows how you can build
a package with simple unix tools, do it but also tools like Cask and
ELPAKit will help you build packages as well.


=== Advantages and Disadvantages of manually building packages ===

NicFerrier says that the requirement of Marmalade to take a package
tar file is a feature:

: Some things, like MELPA just build the packages for you. I don't
like that on principle because then you can't actually test what
you're building. There are certain things about packages that are good
to test yourself (especially after you have a user base already using
your package - you want to just release a broken one?). The best way
of doing that is to make the package yourself.\\
NicFerrier


=== Cask ===

You can use [[http://cask.github.io/why-cask.html cask package]] and
it does the right thing:

* create a directory called dist
* with the alchemist-[VERSION].tar in it
* inclusive a alchemist-pkg.el file.

Then you can install or upload somewhere.


=== ELPAKit ===

[[https://marmalade-repo.org/packages/elpakit ELPAKit]] does the right
thing too. With no python:

{{{
M-x elpakit-make-multi
}}}

in the package directory of a multi-file package.



=== Marmalade peculiarities ===

MarmaladeRepo has some odd stuff about how it displays commentary
about a package. Commentary isn't normally part of multi-file
packages, but is there a way to add more information which will
be shown in the about part on the marmalade website.

What Marmalade does to try to find commentary for a package is to try
to present any README it can find. If you add a plain text README it
will get displayed.

In fact Marmalade will display *any* README it finds:

[[https://github.com/nicferrier/elmarmalade/blob/master/marmalade-service.el#L127]]

I could add more logic to this if you think there are better ways to find package description. One thing that springs to mind is:

* if no README
* find the elisp file that is named the same as the package
* find a commentary section in that

