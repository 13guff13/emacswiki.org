== Description ==

DELPS - *Distributed Emacs Lisp Package System* by JariAalto. The
DELPS is the framework, the blueprint of the design concepts.
Emacs extensions in DELPS format are called [[Epackage]]s. 
With it, you can install Emacs extensions that have been
put available as git DVCS repositories.

== Project Links ==

=== For Regular Users ===

The reference package manager `epackage.el' is available
from "main project hub" which points to Git a repository.

* Project hub (never moves, bookmark this):
  http://freecode.com/projects/emacs-epackage
* If you have free time, suggest what Emacs extensions
  you would like to see packaged at
  https://gist.github.com/1478886
* Constantly updated list of [https://github.com/jaalto/project--emacs-epackage-sources-list/blob/master/epackage.lst available packages for install]
  
=== For Package Developers ===

To make an Emacs extension available in /epackage/ format, read manual
about the the directory layout and used files.
After that, clone "Template files" mentioned below.
The "Template files" link points to README
that explains the procedure step-by-step. In "Template files" repository 
see `*.shellrc' that provides functions which help in doing the packaging work.
You must be familiar with Git, somewhat in Emacs Lisp. Under windows, you need 
<http://cygwin.com> and its command line shell.

* Manual: http://www.nongnu.org/emacs-epackage/manual
* Template files:
  https://github.com/jaalto/project--emacs-epackage-template
* Sources List, the Yellow Pages:
  https://github.com/jaalto/project--emacs-epackage-sources-list

== History ==

Emacs has been around for decades now. Many new version have come and
gone. And yet there are wealth of useful extensions available e.g. et
<http://emacswiki.org> that add new features not yet available in
standard Emacs. The typical procedure to add a new extension to Emacs
has been:

*   Find an extension at places like
    http://dir.gmane.org/gmane.emacs.sources or
    http://www.emacswiki.org
*   Download and save the *.el file(s) along `load-path'
*   Read the installation information. Usually embedded in comments
    at the beginning of *.el file(s).
*   Modify the Emacs startup file `~/.emacs'
    to arrange loading the extension to one's liking.

That's quite a bit of work for each extension; reaching
thousands out there. Many Linux distributions offer package
managers to download and install programs. E.g. Debian has
command *apt-get*/*aptitude* [1], Redhat uses *rpm* [2], Suse
uses *yast* [3]. So why not make one for Emacs as well.

* [1] http://en.wikipedia.org/wiki/Advanced_Packaging_Tool
* [2] http://en.wikipedia.org/wiki/RPM_Package_Manager
* [3] http://en.wikipedia.org/wiki/YaST See also
  http://en.wikipedia.org/wiki/Yellowdog_Updater,_Modified

== Concepts ==

The /epackages/ are in the form of distributed[1] [[Git]][2]
version control repositories. The traditional packaging
methods, like [[ELPA]], rely on archives like *.tar.gz. In
contrast, the DVCS approach offers interesting features over
the traditional archive distribution approach:

*   Modern: no central package archive site to be maintained. No single
    point of failure.
*   Simple: anyone with disk space and git can put packages avalable.
*   Efficient downloads; fast, only deltas are transferred.
*   Local modifications are possible; users can create their own
    customizations and track them easily,
*   Helping package authors made easy; have you found an error?
    Have a spare time to fix it? Generate
    [http://en.wikipedia.org/wiki/Diff diff] straight from the
    version control repository.
*   Select any version; pick latest or
    downgrade to a older version with ease.
*   Contains history of package in one place. No more scattered
    pieces around Internet.
*   Encourages social collaboration; more easier interacting
    with the upstream e.g. through http://github.com
    push/pull.
*   Does not depend on specific API protocols like JSON that is used
    in communicating with [[ELPA]] and [http://marmalade-repo.org Marmalade].

[[image:EpackagePictureDelpsDiagram]]

In the picture above, the user downloads *yellow pages* that contains
information about available packages. At upper right: when a prospective developer
wants to make an epackage available for others, he first
[http://help.github.com/forking/ forks] the
current *yellow pages*, adds new information to it and sends a
[http://help.github.com/pull-requests/ pull request]
inside [http://github.com Github.com] to ask to merge changes back to the master *yellow pages*.
The epackage maintainer keeps an eye on new upstream releases and provides new
epackages by updating his publicly available Git repository.
To the lower right: it is possible that upstream and the epackage maintainer is
the same person. This is the ideal situation.

Each Emacs extension is wrapped into /epackage/ format which
basically follows the Debian packaging style[3] where a separate
control directory named <code>epackage/</code> is used for all the
packaging details: activation, autoloads and installation etc.
In addition, each /epackage/ is imported in and deployed using
Git Distributed Version Control System (DVCS). A specific
"Yellow pages" file lists the available Git repositories where
user can download packages. Once an /epackage/ has been
downloaded, subsequent downloads are very efficient because
only deltas are transferred.

* [1] DVCS = Distributed Version Control System
      http://en.wikipedia.org/wiki/Distributed_revision_control
* [2] http://git-scm.org
* [3] http://www.debian.org/doc/developers-reference/best-pkging-practices.html#bpp-debian-control

== Download and Install ==

The reference implementation is available at Savannah. Mirror at Github:

    #  Location where you keep your Emacs extensions
    mkdir -p $HOME/emacs.d/packages
    cd $HOME/emacs.d/packages

    # Or use Github URL: git://github.com/jaalto/project--emacs-epackage.git
    git clone git://git.savannah.nongnu.org/emacs-epackage.git epackage

    cd epackage
    git checkout --track -b devel origin/devel

    # to get new updates from time to time
    git pull

Add following to your `~/.emacs' startup InitFile:

    ;; One big file to boot all installed epackages
    ;; Automatically generated. Do not edit.
    (load "~/.emacs.d/epackage/00conf/epackage-loader" 'noerr)

    ;; M-x epackage-manager to start UI
    (autoload 'epackage-manager "epackage" "" t)

    (autoload 'epackage-loader-file-byte-compile    "epackage" "" t)
    (autoload 'epackage-loader-file-generate        "epackage" "" t)
    (autoload 'epackage-cmd-autoload-package        "epackage" "" t)
    (autoload 'epackage-cmd-enable-package          "epackage" "" t)
    (autoload 'epackage-cmd-disable-package         "epackage" "" t)
    (autoload 'epackage-cmd-activate-package        "epackage" "" t)
    (autoload 'epackage-cmd-deactivate-package      "epackage" "" t)
    (autoload 'epackage-cmd-clean-package           "epackage" "" t)
    (autoload 'epackage-cmd-remove-package          "epackage" "" t)
    (autoload 'epackage-cmd-upgrade-package         "epackage" "" t)
    (autoload 'epackage-cmd-upgrade-all-packages    "epackage" "" t)
    (autoload 'epackage-cmd-download-sources-list   "epackage" "" t)
    (autoload 'epackage-cmd-download-package        "epackage" "" t)
    (autoload 'epackage-initialize                  "epackage" "" t)
    (autoload 'epackage-version                     "epackage" "" t)
    (autoload 'epackage-documentation               "epackage" "" t)

The epackage manager can also be called from command line UI:

    emacs --batch -Q -l /path/to/epackage.el -f epackage-batch-ui-menu

== Contact ==

Please send comments, suggestion, ideas, bug reports to me directly
or to the bug tracker. Please do not send questions to this page as it 
can not be monitored.
Thanks --Jari

* Bug Tracker (primary)
  https://github.com/jaalto/project--emacs-epackage/issues
* Bug Tracker (secondary):
  https://savannah.nongnu.org/bugs/?group=emacs-epackage
* Email: jari dot aalto A cante net. Help me to notice your mail by starting
  subject with "Emacs epackage:"

== Pictures and History ==

2010-12 A rudimentary implementation of early concept of the software below.
2011-12 `M-x' `epackage-manager' available, just the "bare bones". 
The full buffer mode based UI (like in ELPA)
is planned to be ready somewhere around 2012.

[[image:EpackagePictureUiCommandLine]]

----
CategoryPackaging
epackage
bare bones
Template files
