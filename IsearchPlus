This page is about library <tt>[[isearch+.el]]</tt>, written by DrewAdams. This extends standard Emacs library ##isearch.el##, which provides IncrementalSearch.

Features:

* New option and commands to let you select the last target occurrence (set the [[region]] around it):
** Option '''`isearchp-set-region-flag'''' -- Non-`nil' means automatically set the region around the last search target.
** Command `isearchp-toggle-set-region', bound to
'''`C-SPC'''' during isearch -- toggle `isearchp-set-region-flag'.
** Command '''`set-region-around-search-target'''' -- manually set the region around the last search target.

* New option ('''`isearchp-regexp-quote-yank-flag'''') and command (`isearchp-toggle-regexp-quote-yank', bound to '''`##C-`##'''') to toggle quoting (escaping) of [[regexp]] special characters.  With escaping turned off, you can yank text such as ##^\*.*## without it being transformed to ##\^\\\*\.\*##.


* '''`C-M-y'''' yanks the secondary selection into the search string, if you also use library <tt>[[second-sel.el]]</tt> (see [[SecondarySelection#secondary-sel.el|secondary selection enhancements]]).


* '''`##C-_##'''' yanks successive [[symbol]]s (or words or chars) into the search string.

* '''`##C-(##'''' yanks successive [[sexp]]s (or symbols or words or chars) into the search string.

* New command and binding to toggle (incremental) word search (from JuriLinkov): `isearch-toggle-word', bound to '''`M-w''''.

* New command and binding to toggle invisible-text sensitivity while searching: `isearchp-toggle-invisible, bound to '''`##C-+##''''.

* New bindings during Isearch (the standard bindings for some of these use the Meta modifier, `M-',  instead):
** '''`next'''', '''`prior'''' repeat the last Isearch forward and backward (easier than using the [[chord]]s `C-s', `C-r'.
** '''`C-h'''' provides ''help'' on Isearch while isearching. Library <tt>[[isearch+.el]]</tt> also redefines `isearch-mode-help' so that it lists ''all'' Isearch bindings and ends Isearch properly
** '''`C-t'''' lets you toggle between [[regular expression]] isearching and normal isearching. (Standard binding `M-r'.)
** '''`C-c'''' lets you toggle ''case-sensitivity'' while isearching. (Standard binding `M-c'.)
** '''`##C-+##'''' lets you toggle ''invisible-text sensitivity'' while isearching.
** '''`C-SPC'''' lets you toggle setting the region around the last found occurrence.

** '''`C-end'''' -- go to the longest line. Repeat to go to the longest line following that one in the buffer. As usual, `C-g' puts you back where you started. This binding is made only if you also use library <tt>[[misc-cmds.el]]</tt>. See [[FindLongLines#goto-longest-line|Find Long Lines]].

* Highlighting of the mismatched portion of your search string in the [[minibuffer]] (actually, Isearch uses the [[echo area]]) -- that is, the portion that will be removed if you do `C-g'. (I added this feature to vanilla Emacs in release 23.1.)

* `M-e' (`icicle-edit-string') automatically puts the [[cursor]] at the first mismatch position in the search string, for easy editing.  Whereas `C-g' removes all of the mismatch, this feature lets you change or insert a character or two, without losing the rest of the search string.


* A [[user option]], '''`isearchp-initiate-edit-commands'''', that specifies [[command]]s whose [[key]]s will not exit Isearch but will instead initiate editing of the search string.  For example, if `backward-char' is included in the list then `C-b' and `left' will just move the [[cursor]] backward over the search string so you can change, delete, or insert chars in the middle somewhere.  This makes the search string more [[minibuffer]]-like.

'''See Also:'''

* '''ReplacePlus''' for related extensions to Emacs' standard `query-replace'. In particular, the ability to select (put the [[region]] around) the last replacement.
* '''ThingAtPointCommands''' for commands to extend the region around different things near [[point]]. You can use it to extend the search-target region.
* '''[[Icicles - Icompletion#HighlightNonmatch|Icicles Icompletion]]''' for similar highlighting of the non-matching portion of your input during [[completion]].

* '''[[SecondarySelection#secondary-sel.el|Secondary Selection enhancements]]'''



----
CategorySearchAndReplace 
