This page is about '''[::Isearch+]''', that is,  library <tt>[[isearch+.el]]</tt>.  This extends standard Emacs library ##isearch.el##, which provides IncrementalSearch.

Features:

* Case-sensitivity is indicated in the [[mode line]] minor-mode lighter: '''`ISEARCH'''' for case-insensitive; '''`Isearch'''' for case-sensitive.

* Highlighting of the mode-line [[minor mode]] lighter (indicator) when search has wrapped around (Emacs 24+ only).

* Highlighting of parts of the prompt, to indicate the type of
search: regexp, word, multiple-buffer, and whether searching has
wrapped around the buffer (Emacs 22+ only).

[:isearchp-char-prop-forward]
[:isearchp-char-prop-forward-regexp]
* Ability to search ''within character-property zones''.  Example: search within zones having a `face' text property with a value of `font-lock-comment-face' or `font-lock-string-face'.  Search [[overlay]]s or [[text property|text properties]]. From within Isearch: '''`C-t'''' (or '''`C-M-t'''' for [[regexp]] search).  First time, or with a [[prefix argument]], you are prompted for the property and its values.  See the doc string of command '''`isearchp-char-prop-forward''''.

[:isearchp-put-prop-on-region]
* Besides relying on other code to set `face' and other text
properties for use with `C-t', you can use command
'''`isearchp-put-prop-on-region'''' (outside of Isearch) to add a text
property to a zone of text.  By default, it applies the last
property and value whose zones you searched using `C-t', but a
[[prefix argument]] lets you specify the property and value to apply.
This gives you an interactive way to set up zones for
text-property search (`C-t').  For property `face', empty input
removes all faces from the region.

[:isearchp-set-region-flag]
[:isearchp-toggle-set-region]
[:set-region-around-search-target]
* [[option|Option]] and commands to let you select the last target occurrence (set the [[region]] around it):
** [[option|Option]] '''`isearchp-set-region-flag'''' -- Non-`nil' means automatically set the region around the last search target.
** Command `isearchp-toggle-set-region', bound to
'''`C-SPC'''' during isearch -- toggle `isearchp-set-region-flag'.
** Command '''`set-region-around-search-target'''' -- manually set the region around the last search target.

[:isearchp-regexp-quote-yank-flag]
[:isearchp-toggle-regexp-quote-yank]
* [[option|Option]] ('''`isearchp-regexp-quote-yank-flag'''') and command (`isearchp-toggle-regexp-quote-yank', bound to '''`##C-`##'''') to toggle quoting (escaping) of [[regexp]] special characters.  With escaping turned off, you can yank text such as ##^\*.*## without it being transformed to ##\^\\\*\.\*##.

[:isearchp-retrieve-last-quit-search]
* '''`M-g'''' yanks the last successful search string (regexp or plain) from when you last hit `C-g' in Isearch.  Sometimes you search for something but abandon the search --- you just want to check the locations of something, without staying at any of them.  Afterward, if you want to find them again, use `M-g'.  This yanks that search string, so you can append it to whatever you are already searching for.

[:isearch-yank-secondary]
* '''`isearch-yank-secondary'''' (suggested binding: '''`C-M-y'''') yanks the secondary selection into the search string, if you also use library <tt>[[second-sel.el]]</tt> (see [[SecondarySelection#secondary-sel.el|secondary selection enhancements]]).

[:isearchp-yank-symbol-or-char]
* '''`##C-_##'''' yanks successive [[symbol]]s (or words or chars) into the search string.

[:isearchp-yank-sexp-symbol-or-char]
* '''`##C-(##'''' yanks successive [[sexp]]s (or symbols or words or chars) into the search string.

[:isearchp-read-unicode-char]
* '''`C-x 8 RET'''' reads the name of a Unicode character with
completion and appends it to the search string.  Same thing when
editing the search string (i.e., after `M-e').

[:isearchp-open-recursive-edit]
* '''`C-x o'''' opens a recursive editing session, where you can do
anything you like (including search for something different).
Using '''`C-M-c'''' closes the recursive editing session and resumes
the search (from the current position when you hit `C-M-c').

* Highlighting of the mismatched portion of your search string. This is the portion that is removed if you do `C-g', or removed/replaced automatically if you use `M-k' (see next).  I added this feature to vanilla Emacs in release 23.1.

[:isearchp-cycle-mismatch-removal]
[:isearchp-drop-mismatch]
* Command and binding to cycle automatic removal or replacement of the input portion
that does not match, bound to '''`M-k''''.  Behavior
is controlled by the value of option '''`isearchp-drop-mismatch'''':

** `replace-last' -- Your current input ''replaces'' the last mismatched text.  You can always see your last input, even if it is a mismatch.  And it is available for editing using `M-e'.

** `nil'  -- Your current input is ''appended'', even if the
previous input has a mismatched portion.

** anything else -- Your current input is ''ignored'' (removed) if it causes a mismatch.  The search string always has
successful matches.




[:isearch-toggle-word]
* Command and binding to toggle (incremental) word search (from JuriLinkov): `isearch-toggle-word', bound to '''`M-w''''.

[:isearchp-toggle-invisible']
* Command and binding to toggle invisible-text sensitivity while searching: `isearchp-toggle-invisible', bound to '''`##C-+##''''.


[:isearchp-toggle-invisible]
[:isearchp-toggle-set-region]
[:goto-longest-line]
* Bindings during Isearch (the standard bindings for some of these use the Meta modifier, `M-',  instead):
** '''`next'''', '''`prior'''' repeat the last Isearch forward and backward (easier than using the [[chord]]s `C-s', `C-r'.
** '''`C-h'''' provides ''help'' on Isearch while isearching. Library <tt>[[isearch+.el]]</tt> also redefines `isearch-mode-help' so that it lists ''all'' Isearch bindings and ends Isearch properly
** '''`C-c'''' lets you toggle ''case-sensitivity'' while isearching. (Standard binding is `M-c'.)
** '''`##C-+##'''' lets you toggle ''invisible-text sensitivity'' while isearching.
** '''`C-SPC'''' lets you toggle setting the region around the last found occurrence.
** '''`C-end'''' -- go to the longest line. Repeat to go to the longest line following that one in the buffer. As usual, `C-g' puts you back where you started. This binding is made only if you also use library <tt>[[misc-cmds.el]]</tt>. See [[FindLongLines#goto-longest-line|Find Long Lines]].

[:isearch-edit-string]
* '''`M-e'''' (`isearch-edit-string') automatically puts the [[cursor]] at the first mismatch position in the search string, for easy editing.  Whereas `C-g' (see also `M-k') removes all of the mismatch, this feature lets you change or insert a character or two, without losing the rest of the search string.

[:isearchp-initiate-edit-commands]
* A [[user option]], '''`isearchp-initiate-edit-commands'''', that specifies [[command]]s whose [[key]]s will not exit Isearch but will instead initiate editing of the search string.  For example, if `backward-char' is included in the list then `C-b' and `left' will just move the [[cursor]] backward over the search string so you can change, delete, or insert chars in the middle somewhere.  This makes the search string more [[minibuffer]]-like.


[:isearchp-mouse-2-flag]
* You can, by default, select text with the mouse, then hit `C-s'
etc. to search for it.  This is controlled by [[user option]] '''`isearchp-mouse-2-flag''''.


'''See Also:'''

* '''ReplacePlus''' for related extensions to Emacs' standard `query-replace'. In particular, the ability to select (put the [[region]] around) the last replacement.
* '''ThingAtPointCommands''' for commands to extend the region around different things near [[point]]. You can use it to extend the search-target region.
* '''[[Icicles - Icompletion#HighlightNonmatch|Icicles Icompletion]]''' for similar highlighting of the non-matching portion of your input during [[completion]].

* '''[[SecondarySelection#secondary-sel.el|Secondary Selection enhancements]]'''


















== Searching for unicode characters with IsearchPlus when IdoUbiquitous is enabled. ==

In Emacs 24.2.1, and maybe other versions, if you use IsearchPlus with Ido Ubiquitous (see: InteractivelyDoThings) enabled, you find that you can't search for unicode charaters and if you try an error is generated.  In Emacs 24.2.1 the solution is to disable Ido's advice around `completing-read' when `isearchp-read-unicode-char' is called.  This can be done by putting:

<code>
     (ido-ubiquitous-disable-in isearchp-read-unicode-char)
</code>

in your .emacs file.  When I first did this, I evaluated the form interactively and it didn't seem to fix the problem - I don't know why - but it worked next time I started up Emacs. --- [[Bernard Hurley]]

[new:DrewAdams:2012-12-13 16:22 UTC]
Good to know, for Ido users.  If you investigate a bit more and figure out why it sometimes does not work, would this be something that should be done automatically in '''Isearch+'''?  Or do you think some users would not want it done (in which case perhaps it should be an [[option]] or an Isearch toggle)?  Would you like to try patching ##isearch+.el## to DTRT?  Seems like we should be able to take care of this kind of thing automatically, so users do not need to do anything. -- DrewAdams

[new:[[Bernard Hurley]]]
Ido seems to work by advising `completing-read' and advising various functions that call it.  Ido code doesn't look very clear to me, but I think that's what it does.  It also turns off this advice for functions that the Ido developers know about but haven't got round to advising. This is obviously going to cause problems if you write a function that calls `completing-read', as yours does, and are returned an unexpected value.  I can't imagine any users not wanting this fixed automatically.  My own thoughts are that since Ido makes this quite radical change to a core Emacs function, it's better if it's done automatically in that package.  I have emailed the developers to gently suggest this.  However I will look farther into it in case they don't want to do so.  -- [[Bernard Hurley]]


[new:DrewAdams:2012-12-14 01:31 UTC]
Thanks for the update.  FYI, I renamed `isearchp-read-unicode-char' to `isearchp-insert-char-by-name' in keeping with an updated definition and an expectation that Emacs 24.4 might include this (as `isearch-insert-char-by-name').

I still have the same question as above:

: [W]ould this be something that should be done automatically in '''Isearch+'''?  Or do you think some users would not want it done (in which case perhaps it should be an [[option]] or an Isearch toggle)?

Please let me know, when you can.  It would be good to take care of this problem automatically, if that is appropriate.  Thx -- DrewAdams

----
CategorySearchAndReplace 
