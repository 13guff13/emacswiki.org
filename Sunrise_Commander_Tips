&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
''see also [[Sunrise Commander For Noobs]] (*new*)''

[[image:SunriseCommanderLogoPage|The Sunrise Commander|]]

A few tips for effectively using the
[http://www.emacswiki.org/emacs/Sunrise_Commander Sunrise Commander] file manager.
If you can think of any other please share.

[:GeneralUsage]
==Any suggestions for someone wanting to learn to use sunrise?==(/Thanks rustom/)

# Find two  good key  shortcuts and  assign them to  the sunrise  and sunrise-cd
functions (e.g. mine are C-c x and C-c X).

#  To  get acquainted with the specific capabilities offered by Sunrise, I think
the best first step is to get and install the [Lisp:sunrise-x-buttons.el Buttons
Extension]  ,  it'll  provide  you  with  a nice third pane (at the bottom) with
buttons you can click to perform many basic operations.  The  trick  with  those
buttons  is  that they're labeled with their equivalent shortcuts, so in no time
you memorize them and can use them directly from the keyboard.  In  general  the
highest  productivity can be achieved when using exclusively the keyboard -- use
the mouse rather as kind of side-wheels to learn the basics (or  to  work  while
eating a sandwich), then just drop it.

# Once you know the buttons, go for the listing of bindings in the describe-mode
message (just press h while in sunrise mode).

#  You'll be best served with Sunrise if you use some kind of Linux or MacOS X.
On Windows there's unfortunately a lot of things you have to set up first to
make  all  the  emacs capabilities integrated in Sunrise work. In particular try
[http://www.emacswiki.org/emacs/Sunrise_Commander_Tips#AvfsSetup  to  have  AVFS
running  in  your  box]  -- it will allow you to transparently navigate into all
kinds of archives (zip, rar, jar, iso, even  mbox  and  patch)  --  great  deal.
Unfortunately  AFAIK  there's  no AVFS for Windows. BTW Archlinux offers Sunrise
with AVFS and other goodies conveniently placed in one single package.

# Explore all the configurable settings Sunrise offers by typing:
            //M-x customize-group RET sunrise RET//

# Master [DiredPower Emacs Dired].  After  all, Sunrise  is nothing more  than a
fancy front  end for all  the amazing capabilities  Dired offers. One  aspect of
dired I've found particularly useful is dired marks (m marks one file, t toggles
all marks in  the current directory, u  unmarks one file, U  removes all marks).
Most Sunrise and Dired commands can work  on all marked files and directories at
once.

# Learn Emacs. The WDired mode (C-x C-q) puts you in a regular emacs buffer that
gives  you  all  the possibilities  you  normally  have  while editing  text  to
manipulate the  names of  your files and  directories -- query  replace, regular
expressions, serial  numbering... your imagination  is the only limit.  Just one
warning: be careful  and play a LOT with  it before using it for  real, so there
are no surprises later and you don't shoot yourself in the foot.

#  Learn  how  to  use the "find" utility. Finding files by name (C-c C-n) or by
contents (C-c C-g) is cool, but it's in the raw find command (C-c C-f) where the
real power is. Most file managers can only dream of providing such a rich search
capability. If you need a place to get you started,
[http://www.softpanorama.org/Tools/Find/find_mini_tutorial.shtml  here is a good
tutorial]. Also take the time to study the manual page (M-x man<RET>find<RET> ).

# Learn how to define and execute [KeyboardMacros Keyboard Macros]. Whenever you
notice you're pressing the same keys you did a while ago, and you suspect you'll
have  to repeat the same actions over and over again, at least a few more times,
do yourself a favor, stop for a while, and think how to make Emacs do the monkey
work for you.

#  Don't  forget  a  OFM is just a semi-graphical extension of the command line.
Learn when it's preferable to use the command line (CL) instead of the FM. Learn
to  use the FM to move fast through your directory hierarchy (e.g. use C-c t and
C-c T to activate the CL from Sunrise, and the sunrise and sunrise-cd methods to
switch  to  fullscreen  CL  and  back  to Sunrise from there. If you're using an
external shell for the CL (e.g. bash, or ksh, instead of eshell), learn when  to
use  C-c C-j and C-c C-k to switch between line and character mode. Learn to use
CLEX tags (%f, %F, %d, %D, %n, %N etc) to write fast your paths and  file  names
in the CL.

----
[:FlatTreeVFS]
==How to show all files in the current directory and all its subdirectories?==

//(this is called XTree or "flat tree" VFS in the OFM standard)//

Use find to list everything that's not a directory: press C-c C-f and type:

    -not -type d

followed by Return. To get everything (including the subdirectories) use find by
name instead: C-c C-n * [RET]

----
[:ExternalApps]
==Opening files in external applications.==

The  best  emacs  module I've seen for opening files in external applications is
Markus Triska's OpenWith. On Linux it works perfectly. On Windows  you  need  to
apply  the  following  patch,  so  it  knows  how to use the /w32-shell-execute/
function:
<pre>
--- emacs/openwith.el	2009-01-19 10:26:09.000000000 +0100
+++ openwith.el	2009-03-18 15:44:30.000000000 +0100
@@ -75,16 +75,19 @@
         (setq oa (car assocs)
               assocs (cdr assocs))
         (when (save-match-data (string-match (car oa) file))
-          (let ((params (mapcar (lambda (x) (if (eq x 'file) file x))
-                                (nth 2 oa))))
-            (when (or (not openwith-confirm-invocation)
-                      (y-or-n-p (format "%s %s? " (cadr oa)
-                                        (mapconcat #'identity params " "))))
-              (apply #'start-process "openwith-process" nil (cadr oa) params)
-              (kill-buffer nil)
-              ;; inhibit further actions
-              (error "Opened %s in external program"
-                     (file-name-nondirectory file))))))))
+	  (let ((params (mapcar (lambda (x) (if (eq x 'file) file x))
+				(nth 2 oa))))
+	    (when (or (not openwith-confirm-invocation)
+		      (y-or-n-p (format "%s %s? " (cadr oa)
+					(mapconcat #'identity params " "))))
+	      (if (and (fboundp 'w32-shell-execute)
+		       (string= "open" (nth 1 oa)))
+		  (w32-shell-execute "open" file)
+		(apply #'start-process "openwith-process" nil (cadr oa) params))
+	      (kill-buffer nil)
+	      ;; inhibit further actions
+	      (error "Opened %s in external program"
+		     (file-name-nondirectory file))))))))
   ;; when no association was found, relay the operation to other handlers
   (let ((inhibit-file-name-handlers
          (cons 'openwith-file-handler
</pre>

I have submitted this patch to  Mr Triska, hope it gets included in the official
distribution soon.

Once you've  installed OpenWith, customize  the /openwith-associations/ variable
as needed.

----
[:OpenWithInRecentf]
==Adding files opened with external apps to the history of recent files.==

When you start using Openwith to open different files with external applications
it's an annoyance not having them included in the list of recently visited files
-- fortunately an easy to fix one, just add the following snippet to your .emacs
configuration:

<pre>
        (defadvice openwith-file-handler
          (around advice-openwith-file-handler (operation &rest args))
          (condition-case description
              ad-do-it
            (error (progn
                     (recentf-add-file (car args))
                     (error (second description))))))
        (ad-activate 'openwith-file-handler)
</pre>

----
[:MouseSupport]
==Better mouse support?==

There  are  several  good  extensions  for enhancing the mouse support in Dired.
Personally I like Seiichi Namba's dired-dd (DiredDragAndDrop). Unfortunately, it
won't  work  out of the box with Sunrise, as it checks specifically for Dired as
its only valid major mode. This can be easily fixed by  applying  the  following
patch to the latest version (0.9.1.28):
<pre>
1569c1569
<   (if (not (eq major-mode 'dired-mode))
---
>   (if (not (derived-mode-p 'dired-mode))
1793c1793
<     (if (eq 'dired-mode major-mode)
---
>     (if (derived-mode-p 'dired-mode)
1836c1836
<       (if (setq target-diredp (eq 'dired-mode major-mode))
---
>       (if (setq target-diredp (derived-mode-p 'dired-mode))
</pre>
I have been trying to contact Mr Seiichi to submit this patch, but unfortunately
without success at the moment.

Drew  Adams'  DiredPlus is another good alternative for better mouse support. It
doesn't have additional D&D functions, but gives you a lot of psychedelic colors
instead  :)  Besides,  Drag-n-drop is available even for vanilla Dired - no need
for DiredPlus to add it. See the Emacs manual,  node  Drag  and  Drop
(/Thanks Drew/).

----
[:ReplaceDiredWithSunrise]
==How to use Sunrise where Emacs uses Dired by default?==

If you provide find-file (C-x C-f) with the name of a directory, or when you use
[FindFileAtPoint ffap] or [InteractivelyDoThings ido] to visit a directory,
Emacs will use standard Dired to display its contents. If you want to start
Sunrise instead, do the following:

1. Upgrade your copy of SC to version 4R315 or newer.

2. Press M-S-: (//or Alt-Shift-: if you prefer// ;-)) and type this:

    (setq find-directory-functions (cons 'sr-dired find-directory-functions)) [RET]

3. Do M-x customize-variable [RET] find-directory-functions [RET]

4. Press the "Save for future sessions" button in the customization GUI.

----
[:HighlightingPermissions]
==Highlighting files with inappropriate permissions.==

The  sr-rainbow  macro  allows to easily manipulate the font locking of file and
directory names in Sunrise using
[http://www.emacswiki.org/emacs/RegularExpression regular expressions].  For
instance, in order to highlight  files  and  directories  that  have  read/write
permissions  set  for  users other than their owner you could add to your .emacs
file a snippet like the following:

        (eval-after-load 'sunrise-commander
          '(progn

             (sr-rainbow sr-gorw-dir-face
                         (:background "misty rose"
                                      :foreground "blue1"
                                      :bold t)
                         "^..\\(d....\\(...\\)?w..*$\\)")
 
             (sr-rainbow sr-gorw-face
                         (:background "misty rose")
                         "^..\\(-....\\(...\\)?w..*$\\)")))

----
[:AvfsSetup]
==Setting up transparent navigation in compressed archives.==

Sunrise   integrates   with   [http://avf.sourceforge.net/   AVFS]   to  provide
transparent navigation inside compressed  archives  with  a  minimal  amount  of
configuration.  How to install AVFS depends on your OS - in linux it's usually a
trivial operation (hopefully your  distribution  provides  a  package  ready  to
install). In Debian all you have to do is type (as root):

        apt-get install avfs

in your command line and press Return.

Once  you  have  AVFS installed in your system, you must launch the AVFS daemon,
indicating a point (directory) where to "mount" your  entire  file  system.  For
instance, If you use as mount point a directory called .avfs (it's the one I use
in my home directory), the command to use will look like the following:

       /usr/bin/avfsd -o allow_root -o intr -o sync_read .avfs 

(have  a  look at the AVFS documentation for the meaning of the options). If all
goes well, you'll be able to see a "mirror copy" of your file system inside  the
.avfs directory. Now, from the emacs side all you have to do is:

        M-x customize-variable <RET> sr-avfs-root <RET>

provide  the  full path to your AVFS mount point, and press the "Save for future
sessions" button. That's it -- now try to open some *.zip file  inside  Sunrise,
you should be able to navigate inside it as if it were a regular directory.

----
[:OpenDirInPassivePane]
==How to open the directory under the cursor in the passive pane?==

In  versions  3R228  and later that's how the sr-quick-view command ("o" or "v")
works for directories. In previous versions you need to  combine  two  commands:
M-;  M-Return  (follow  file  in passive pane + visit selected file/directory in
passive pane).

----
[:Cloning]
==How to copy a directory structure without copying the files?==

//(You  know,  what  "XCOPY /T/E" used to do in good ol' DOS. Sunrise calls this
"cloning")//

Upgrade  your  copy  of SC to version 3R237 or newer, select the directories you
want to clone, press K (sr-do-clone) and select "(D)irectories only".

Cloning  was devised as a more general operation than recursive copying of files
and directories[1]: all directories are created with the same name and structure
at  the  destination,  while  what happens to all the other files depends on the
option you choose:

* "(D)irectories only" - ignores all files, copies only directories,
* "(C)opies" - performs a traditional copy of all files,
* "(H)ardlinks" - makes  every  new  file  a  (hard)  link  to  the original one
(obviously the source and destination directories must be in the same  partition
for this to work),
* "(S)ymlinks" - creates absolute symbolic links for all files in the tree,
* "(R)elative symlinks" - creates relative symbolic links for all files.

[1] in fact Copy is implemented as a cloning operation.

----
[:CopyPathsToClipboard]
==How to copy file names and paths to the clipboard?==

This one is easy: press //w// to copy the name of the selected file to the
clipboard and //0w// (first the digit zero, then //w//) to copy the whole
path. To copy more than one file name/path at once, mark (by pressing //m//) all
the entries you're interested in, then press //w// or //0w//.

----
[:NavigationAndTracking]
==Advanced navigation and location tracking.==

Sunrise offers a few advanced mechanisms for moving around and keeping track of
locations besides the traditional point-and-click. You can:

*  Press  Return (or click) on any point of the directory path at the top of any
of the panes to jump directly to that location in the file system.

* Install the [Lisp:sunrise-x-modeline.el sunrise-x-modeline] extension to get a
similar path in the mode line, where you can see it  all  the  time,  even  when
scrolling long dirs.

* Install the [Lisp:sunrise-x-tree.el  sunrise-x-tree] extension to rapidly move
to any directory in the file system using a tree-like hierarchical view like the
one offered by navigator-style file managers.

* Use the listings of recent files (C-c C-r) and recent directories (C-c C-d) to
reuse the paths to already visited  files  and  directories.  Recent  files  are
managed  by  recentf  and  automatically persisted across emacs sessions. If you
want the same for recent  directories  you  can  use  the  savehist  persistence
mechanism:

            1. M-x customize-group RET savehist RET
            2. Set savehist-mode to ON
            3. Add sr-history-registry to ``Savehist Additional Variables''
            4. Click on ``Save for future sessions''

*  Use Sunrise checkpoints. Checkpoints are special bookmarks you can create for
both panes simultaneously by pressing C-&gt; (or  C-c  >  in  the  console)  and
giving  a  name  for  the  checkpoint.  To recall it, press C-. (or C-c . in the
console). On Emacs 23 checkpoints can  be  listed  along  with  all  your  other
bookmarks  using the bookmark-bmenu-list command (C-x r l). On Emacs 22 there is
no other way to list the currently defined checkpoints than
//M-: sr-checkpoint-registry RET//,
but  they  may  be saved across Emacs session too with savehist (the variable to
persist is sr-checkpoint-registry).
Since version 4 of the Sunrise Commander, checkpoints are provided as a separate
extension: [Lisp:sunrise-x-checkpoints.el sunrise-x-checkpoints] for Emacs 23 or
upgraded versions of the bookmarks.el library, and
[Lisp:sunrise-x-old-checkpoints.el sunrise-x-old-checkpoints] for Emacs 22.

*  Make  you own "favorites" virtual directories. Assign an extension to sunrise
virtual buffers (there's an explanation of how to do it in the comments  to  the
Sunrise  Commander)  and  press C-c C-v to create a pure virtual buffer. You can
copy files and directories from the other pane to this one, and then save it  as
a  file  with your extension. Whenever you open the file later, Sunrise will see
it as a directory like any other, where  you  can  copy,  rename,  delete,  etc.
<em>**CAREFUL!**</em>  what  you  delete  in a virtual dir gets removed from the
file system too! to remove a line only from your virtual dir just mark  it  (m),
kill  it (k) and save the file. You can create as many files like this for work,
hobbies and whatnot and keep them at hand in you home directory.

*  Install  the  [Lisp:sunrise-x-tabs.el sunrise-x-tabs] extension to be able to
put pane buffers in tabs and to keep them around with all their marks and  state
untouched (tabs can be persisted across sessions using the [[DeskTop]] feature.)

* Use //path projection// to quickly navigate within similar directory trees. If
you have, say, the trunk version of a project from SVN in directory  trunk/  and
your  latest and greatest branch in directory branch/, whenever your active pane
is displaying branch/some/deeply/nested/dir and your passive pane is  at  trunk/
(or  trunk/some,  or  trunk/some/deeply)  you  can  jump  directly  to directory
trunk/some/deeply/nested/dir in the passive pane by simply pressing **C‐M‐o** in
the  active  one.  It’s  a  bit  similar  to  synchronizing the panes (M‐o), but
constrained to the directory being currently displayed in the passive  pane.  If
there  is more than one possible target you can prefix the command with a number
(e.g. **2 C‐M‐o**) to specify which one of them to use. By default  the  longest
path found is used.

----
[:AlternativeUsagePatterns]
==Alternative usage patterns.==

You  can  use the Sunrise functions to make your own Sunrise Commander. Is there
anything you don't like in Sunrise, or would you like it to have some additional
functions  it doesn't have yet? Of course you can always write to the author and
ask whether he likes the idea and has the time to implement it, but you can also
read the code and do it yourself in the //Ol' Good Open Source// Tradition.

This section is intended for contributed ways of using / tweaking Sunrise, so it
works better for concrete users. If you have your own original way of using the
Sunrise Commander, consider adding it here -- someone else will probably benefit
from it, or maybe the author likes the idea and adds it to the official code ;-)

[new]
//From Tom Short://

Both my laptop screen  and my desktop monitor are quite wide, so  I use a lot of
horizontal split screen. In sr-mode, I don't  use the viewer much. I like to use
windows split horizontally with the  right window used as both the viewer/editor
and the  passive directory window. To  do that, I use  sr-setup-windows from the
[Lisp:sunrise-x-popviewer.el PopViewer Extension] to get two windows in sr-mode,
and I  use sr-open-in-other defined below to  open the directory or  file in the
passive  window. I assign  the space  key to  sr-open-in-other. I  also redefine
sr-select-viewer-window.

My usage is as follows:

* hit space to open the file or directory in the other window
* hit enter to open the file or directory in the existing window
*  hit  v to temporarily open the file or directory in the other pane (works the
same as space for directories)
* hit \ to bring back both directory window

For me, this works pretty well in practice.

    (defun sr-open-in-other (&optional arg)
     "Opens files/directories in the other pane."
     (interactive "P")
     (let ((name (dired-get-filename nil t)))
       (cond ((file-directory-p name) (sr-quick-view-directory name))
             ((file-symlink-p name) (sr-quick-view-symlink name))
             (t (sr-open-in-other-file)))))
     
    (defun sr-open-in-other-file ()
     "Opens the selected file in the viewer window. "
     (let ((split-width-threshold (* 10 (window-width))))
       (save-selected-window
         (condition-case description
             (progn
               (dired-find-file-other-window)
               (sr-scrollable-viewer (current-buffer)))
           (error (message "%s" (second description)))))))
     
    (defun sr-select-viewer-window (&optional force-setup)
     "Tries to select a window that is not a sr pane."
     (interactive)
     (other-window 1))

----
CategoryDirectories
CategoryEmulation
