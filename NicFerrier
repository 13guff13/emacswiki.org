Iâ€™m [::nicferrier], a hacker trying to do interesting things. I use Emacs every day all the time. ([[http://nic.ferrier.me.uk|Nic's blog]]).

I've used Emacs for about 20 years, every day, all the time for the last 15 years. I've done extensive Java, C, Python, ActionScript and Shell development inside Emacs, as well as a bunch of other languages. 

The last couple of years I've started to look at ELisp as a practical language (since it had closures basically) in which I might //one day// do all my work.

== About me ==

I work for [[http://thoughtworks.com|ThoughtWorks]] doing !DevOps stuff. 

I used to be the CTO at woome.com where we built video tools to help people get laid.

I maintain the [[http://marmalade-repo.org|marmalade Emacs package repo]] and am porting it to [[Elnode]].

I am the author and maintainer of [[Elnode]], the Emacs Async Webserver; more information about that in this page.

== Recent Emacs related blog posts ==

* [http://nic.ferrier.me.uk/blog/2012_07/emacs-packages-for-programmers|tips and tricks for EmacsLisp developers on using packages]  

* [http://nic.ferrier.me.uk/blog//home/nferrier/blog/2011_10/emacs_lisp_is_good_further_reports_suggest about using lexical scope to code sentinels better, with an example macro]

* [http://nic.ferrier.me.uk/blog/2011_09/elisp_testing ERT has been included in trunk so now EmacsLisp TDD is possible]

* [http://nic.ferrier.me.uk/blog/2010_10/elnode about Elnode, the EmacsLisp asycnc HTTP server]


== Elnode: an asynchronous HTTP server for Emacs or node.js in EmacsLisp  == 
[[Elnode]] is an asynchronous TCP server handling HTTP.

Elnode is in the [http://marmalade-repo.org/packages/elnode marmalade repository]

As of now Elnode is functional. I am starting to write things with it:

* a collabarative editor
* [[https://github.com/nicferrier/seville|a marmlade port]] (ELPA inside your Emacs)
* dynamic org agenda export

I am also improving and extending the [[https://github.com/nicferrier/elnode/blob/master/elnode_tutorial.creole|tutorial]] quite often.

It's pretty good. I hope people pick it up because it's an interesting way to leverage Emacs.

== Batch testing in a clean environment ==

Elnode has a bunch of tests written with [[ErtTestLibrary]] and I use them often but because Elnode is quite complex I would like to prove that it works in a clean environment. So I investigated starting a clean Emacs (which means no site init and no package state).

This is what I have for Elnode right now:

{{{
;; Batch test Elnode

(setq package-dir "~/work/elnode/elpa")
(when (file-exists-p package-dir)
  (delete-directory package-dir t))
(setq package-user-dir package-dir)
(setq package-archives
      '(("gnu" . "http://elpa.gnu.org/packages/")
        ("marmalade" . "http://marmalade-repo.org/packages/")))
(package-list-packages)
(setq elnode-init-port nil)
(package-install 'creole)
(package-install-file "~/work/elnode/elnode.el")
(ert-run-tests-batch-and-exit)

;; End
}}}

It works perfectly! It trashes a temporary package store (//elpa//) and then sets it up again, then package loads Elnode, which tests that the package depends work properly and then runs all tests.

Note that the installation of //creole// is deliberate, Elnode can use //creole// but does not depend on it. Maybe I should change that to a proper dependancy.

Anyway, it's no coincidence that one of my interests is continuous integration and this could certainly be used as a way of doing continuous integration with Elnode (or any other EmacsLisp package). One thing stopping that is that ERT currently uses a non-xUnit output format for reporting success and failure of tests.  I am wondering whether some sort of text pipeline processing could be used for now, or whether ERT could be adapted to spit out in xUnit format.

== WikiCreole ==

WikiCreole is a Wiki markup language very like the one used here on EmacsWiki. 

I am writing and maintaining an EmacsLisp version of a WikiCreole parser and HTML exporter.

I am doing this mainly so Elnode can have a decent Wiki implementation.


== Emacs under Mercurial ==

I host a mercurial copy of the emacs bzr repo at [https://bitbucket.org/nic/emacs bitbucket].

and [https://bitbucket.org/nic/emacs-update/changeset/14a32e93c535 here is the update script I use].


== Email under Emacs ==

I've never liked gnus. But I do like Emacs as a mail platform so I've always maintained my own mail code.

Back in the last 90s I wrote an [[imapua|Emacs IMAP user agent based on the GNUs IMAP library]].
It worked pretty well but IMAP didn't really scale for me once my
inbox got really really big (20k messages plus). The IMAP protocol is
actually quite difficult to deal with asynchrnously so I got more and
more stuck with email.

Eventually I decided to bite the bullet and write my own low level
email handling. [https://github.com/nicferrier/md the md command] is
the result. [https://github.com/nicferrier/md md] is a command for
reading mail stored in a Maildir. It is ''just'' a unix command
tool. It is completely stateless (apart from the Maildir).

My primary usage of the [https://github.com/nicferrier/md md] tool is
via an
[https://github.com/nicferrier/md/blob/master/useragents/emacs/mdmua.el Emacs user agent]. 
This is currently very simple but already most powerful enough for
everyday use.

The user agent doesn't need to do complex tasks because I can script
those with regular unix pipelines. Here's an example BASH script which
uses [https://github.com/nicferrier/md md] to move all the messages
with a particular month pattern to a different folder:

{{{
#!/bin/bash
# A script to pull all the email for a particular month pattern out of
# the INBOX and into a separate dir.
DATEPAT=$1
echo $DATEPAT | grep -E '[0-9]{4}-[0-9]{2}' > /dev/null
if [ $? -ne 0 ]
then
    echo "incorrect date pattern - eg: mdmonthmove 2011-09"
    exit 1
fi
# Date pattern must be ok
DATEDIR=$(echo $DATEPAT | sed -rne 's/([0-9]{4})-([0-9]{2})/\1\2/p')
md ls \
    | awk -v DATEPAT=$DATEPAT '$2 ~ DATEPAT {print $1}' \
    | sed -rne 's/^INBOX#(.*)/\1/p' \
    | while read message
do 
    echo $message >> $MAILDIR/$DATEPAT--move.log
    mv $MAILDIR/cur/$message* $MAILDIR/.$DATEDIR/cur/
done
}}}

I am continuing to develop this despite the fact that no one but me
seems interested. It's actually quite cheap to maintain and improve.

== Emacs Daemon RC ==

Here's my daemon rc script:

{{{
#!/bin/bash

WHO=$(whoami)
[ "$WHO" != "nferrier" ] && exec su -c "$0 $*" - nferrier

EMACS=/home/nferrier/usr/emacs/bin/emacs

SERVERNAME=elnode
SOCKETPATH=/tmp/emacs$UID/$SERVERNAME

case $1 in

  start)
        ${EMACS}client -s $SOCKETPATH -e '(print (emacs-version))'
        if [ $? -ne 0 ] ; then $EMACS --daemon=$SERVERNAME ; fi
        ;;
 
  stop)
 	${EMACS}client -s $SOCKETPATH -e '(print (emacs-version))'
 	if [ $? -eq 0 ] ; then ${EMACS}client -s $SOCKETPATH -e '(kill-emacs)' *scratch* ; fi
 	;;
 
  status)
        if [ ! -S $SOCKETPATH ] ; then exit 1 ; fi
 	${EMACS}client -s $SOCKETPATH -e '(print (emacs-version))'
 	;;

esac

# End
}}}

[[https://gist.github.com/1966843|Here's the GIST of the same script]].
 
== Emacs in a screen terminal: colors ==

I do some remote pair programming inside screen. I would like to use emacs. Standard colors are too difficult for me to read (my eyes are going!).

vim has the very nice: 

{{{
set background=dark
}}}

which turns up the brightness on dark font faces. According to #emacs we have no equivalent.

So I wrote one:

{{{
(defvar dark-background nil)

(defun toggle-dark-background ()
  (interactive)
  (let ((difficult-colors
         '("red" "blue" "medium blue")))
    (mapc
     (lambda (face)
       (and (member (face-attribute face :foreground)  difficult-colors)
            (set-face-bold-p face (not dark-background))))
     (face-list)))
  (setq dark-background (not dark-background)))
}}}  

This toggles bold on the dark ones, which I think is all the vim thing is doing.

== Small Init Files ==

For a long time I've used a complex init file with loads of stuff in
it. This is great, it means Emacs starts up with all my goodies. But
it also means when I go to another Emacs I'm lost. It's also
non-trivial to move my stuff to another Emacs.

It's also difficult to test code written in EmacsLisp, which I'm doing more and more of with Elnode.

I am trying to pair down my emacs use to the standard dist delivered
behaviour and then add obvious extras on top. This is a process I
started long ago but is still underway.

Here's the initial bit of my init file:

{{{
;; Nic's init file

(add-to-list 'load-path (file-name-directory (or (buffer-file-name) load-file-name)))

(require 'auto-install)
(require 'package)
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")))
}}}

The load-path hack is down to [[PhilHagelberg|Technomancy]] and it's a great little hack. I can now take copies of my init directory (say ~/.emacs2.d/) and load it all in a new emacs like:

{{{
emacs -nw -q -l ~/.emacs2.d/init.el
}}}

This is great for testing things. It should also make it easy to clone my config dir's git or hg repository around for testing:

* clone your config repo
* start a new emacs in the new repo
* install the new package (from elpa even)
* does it work?
* if yes then commit the changes to the config dir and pull them back into the origin
* if no then don't commit the changes, just throw it away


== List of various other ELisp bits and pieces ==

I've done a few other packages for Emacs:

* [[WikiDoc]] -- a program to make wiki documentation from Elisp functions, [[http://marmalade-repo.org/packages/wikidoc|marmalade repo here]], [[http://github.com/nicferrier/elwikidoc|github here]]
* fakir -- a library to make faking Emacs Lisp functions easier [[http://marmalade-repo.org/packages/fakir|marmalade repo here]], [[http://github.com/nicferrier/emacs-fakir|github here]]
 
And some other stuff I haven't packaged yet:

* [[pastebin]] -- a simple interface to the [http://www.pastebin.com pastebin.com] webservice
* [[rcircPresence]] -- for syncing rcirc with some other presence thing (eg: skype)
* [[imapua]] -- a purely IMAP based email client for Emacs
* [[trac_editor]] -- a very simple interface to trac.py
* [[tzhelp]] -- a small set of tools for dealing with timezones


---- 
CategoryHomepage
