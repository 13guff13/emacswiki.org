== What it is =
Zen Coding refers to a neat way to write markup quickly.

The following blogs provide summary and examples:

* http://www.456bereastreet.com/archive/200909/write_html_and_css_quicker_with_with_zen_coding/
* http://mondaybynoon.com/2009/08/17/the-art-of-zen-coding-bringing-snippets-to-a-new-level/ (skip the cruft about snippets)

I'll quote the blog:

<i>zen-coding includes an entirely new angle to writing markup, and it facilitates the feature by letting you write HTML based on CSS selectors. It’s so simple it’s confusing at first. I think it’s best explained by doing a quick before and after. If you were to type:</i>

    div#name.one.two

<i> and follow that with the zen-coding plugin keystroke (CMD+E in TextMate), the plugin will reformat the line as:</i>

    <div id="name" class="one two"></div>

== Zencoding Mode ==

=== Grab it ===

I've made an implementation in elisp as a minor-mode.

Latest raw file: http://github.com/chrisdone/zencoding/raw/master/zencoding-mode.el

Github repo.: http://github.com/chrisdone/zencoding

Please feel free to hack on it and I'll add you as a member of the github project so that you can push to it.

YouTube video here: http://www.youtube.com/watch?v=u2r8JfJJgy8)

=== Screenshot ===

[[image:ZenCodingModeScreenshot]]

=== How to use it ===

Copy zencoding-mode.el to your load-path and add to your .emacs:

    (add-to-list 'load-path "~/Emacs/zencoding/")
    (require 'zencoding-mode)
    (add-hook 'sgml-mode-hook 'zencoding-mode) ;; Auto-start on any markup modes

At the moment zencoding-expand-line is bound to `C-<return>`, so you write your expression and just hit C-RET.

E.g.

    div#name.one.two

C-RET

    <div id="name" class="one two">
    </div>

=== Syntax ===

==== Basic Tags ====
||<code>a</code>||||<code><a></a></code>||
||<code>a.x</code>||||<code><a class="x"></a></code>||
||<code>a#q.x</code>||||<code><a id="q" class="x"></a></code>||
||<code>a#q.x.y.z</code>||||<code><a id="q" class="x y z"></a></code>||
==== Siblings ====
||<code>a+b</code>||||<code><a></a><b></b></code>||
||<code>a.x+b</code>||||<code><a class="x"></a><b></b></code>||
||<code>a#q.x+b</code>||||<code><a id="q" class="x"></a><b></b></code>||
||<code>a#q.x.y.z+b#p.l.m.n</code>||||<code><a id="q" class="x y z"></a><b id="p" class="l m n"></b></code>||
==== Parent > child ====
||<code>a>b</code>||||<code><a><b></b></a></code>||
||<code>a>b>c</code>||||<code><a>< b><c></c></b></a></code>||
||<code>a.x>b</code>||||<code><a class="x"><b></b></a></code>||
||<code>a#q.x>b</code>||||<code><a id="q" class="x"><b></b></a></code>||
||<code>a#q.x.y.z>b#p.l.m.n</code>||||<code><a id="q" class="x y z"><b id="p" class="l m n"></b></a></code>||
||<code>a>b+c</code>||||<code><a><b></b><c></c></a></code>||
||<code>a>b+c>d</code>||||<code><a><b></b><c><d></d></c></a></code>||
==== Multiplication ====
||<code>a*2</code>||||<code><a></a><a></a></code>||
||<code>a*2+b*2</code>||||<code><a></a><a></a><b></b><b></b></code>||
||<code>a*2>b*2</code>||||<code><a><b></b><b></b></a><a><b></b><b></b></a></code>||
||<code>a>b*2</code>||||<code><a><b></b><b></b></a></code>||
||<code>a#q.x>b#q.x*2</code>||||<code><a id="q" class="x"><b id="q" class="x"></b><b id="q" class="x"></b></a></code>||
==== Properties ====
||<code>a x=y</code>||||<code><a x="y"></a></code>||
||<code>a#foo x=y m=l</code>||||<code><a id="foo" x="y" m="l"></a></code>||
||<code>a#foo.bar.mu x=y m=l</code>||||<code><a id="foo" class="bar mu" x="y" m="l"></a></code>||
||<code>a x=y+b</code>||||<code><a x="y"></a><b></b></code>||
||<code>a x=y+b x=y</code>||||<code><a x="y"></a><b x="y"></b></code>||
||<code>a x=y>b x=y+c x=y</code>||||<code><a x="y"><b x="y"></b><c x="y"></c></a></code>||
==== Parentheses ====
||<code>(a>b)+c</code>||||<code><a><b></b></a><c></c></code>||
||<code>z+(a>b)+c+k</code>||||<code><z></z><a><b></b></a><c></c><k></k></code>||
||<code>(a>b)*2</code>||||<code><a><b></b></a><a><b></b></a></code>||
||<code>(a+b)*2</code>||||<code><a></a><b></b><a></a><b></b></code>||

= A Haskell Implementation =

I've implemented a program in Haskell to do what I've surmised from the examples: http://gist.github.com/223655

Save it as zencoding.hs and compile it with ghc --make zencoding -O2 and pop the resulting program wherever you want.

Here's an example:

    chris@chrisamilo:~/Haskell$ zencoding
    div#news.module>(div.header+div.body>ul>li#item-$*5)
    <div id="news" class="module">
       <div class="header">
       </div>
       <div class="body">
          <ul>
             <li id="item-1">
             </li>
             <li id="item-2">
             </li>
             <li id="item-3">
             </li>
             <li id="item-4">
             </li>
             <li id="item-5">
             </li>
          </ul>
       </div>
    </div>

=== Using it in Emacs ===

You can use it reasonably well from Emacs:

    (defun zencode ()
      "Zen Coding utility."
      (interactive)
      (shell-command-on-region
       (line-beginning-position)
       (line-end-position)
       "/home/chris/Programs/bin/zencoding" ;; change to wherever yours is
       t)
       ;; if you want it to auto indent
      (save-excursion
        (mark-page)
        (indent-for-tab-command)))
    (define-key html-mode-map (kbd "\C-c \C-v") 'zencode)

[[image:ZenCodeSample]]

= Discussion =

Any suggestions/helpful ideas please feel free.

[new]
Yes, please rewrite it in elisp ... ;-)

Would that be hard for some reason?
[new]
Haha. Yes, I originally briefly considered writing it purely in elisp, but I had very little time and my elisp-fu is weak. Just knocked it up so I can use it at work. I think it would be pretty easy work for someone who's written a couple elisp parsers. Anyhoo, the idea's out there so if anyone wants to write some Zen Coding library in elisp that would be awesome! =) -- [[ChrisDone]]

[new]
Me too hope someone will write it.

Does it require a complicated parser?
Or is a simple recursive descent parser enough?

[new]
Nah, no complicated parser. A simple recursive descent parser is enough. All you need is operator precedence ('>' vs '+') and one or two bits for tag#id.class[prop=value,prop2=value2] syntax (though I added the [prop=value] -- I don't know if this is Zen Coding proper, but it's inspired by CSS selectors). Assuming we share an approximately similar definition of "simple". -- [[ChrisDone]]

[new]
Whipped something up to get it started in elisp. http://gist.github.com/224572 My elisp is awful but it does the job... Hard part's over. Might pick this up again tomorrow to add class and identifer syntax, and properties. Anyone else wanna pick it up feel free. -- [[ChrisDone]]

[new]
How nice!
May I suggest that you use a prefix "zencode-" on all defined symbols?

[new]
Ahh, I knew there was something missing! I'll do that on my next update. Thanks! -- [[ChrisDone]]

[new]
Update! It's the weekend. https://gist.github.com/224572/7f3e0b16aa647e0e91c262a9847d7ef709efdc56 New stuff:

    (transform (car (expr "body.sub-page>div#news.content.a+div#news.content.a")))
    => [indentation added with xml-mode]
    <body class="sub-page">
      <div id="news" class="content a">
      </div>
      <div id="news" class="content a">
      </div>
    </body>

-- [[ChrisDone]]

[new]
Now with multipliers (li*5>span), a mini test suite and qualified symbol names:

http://gist.github.com/224572

    ;; Multiplication
    ("a*1"                    "<a></a>")
    ("a*2"                    "<a></a><a></a>")
    ("a*2+b*2"                "<a></a><a></a><b></b><b></b>")
    ("a*2>b*2"                "<a><b></b><b></b></a><a><b></b><b></b></a>")
    ("a>b*2"                  "<a><b></b><b></b></a>")
    ("a#q.x>b#q.x*2"          "<a id=\"q\" class=\"x\"><b id=\"q\" class=\"x\"></b><b id=\"q\" class=\"x\"></b></a>")

If you're hacking on the parser make sure to run the test cases (and add your own!).

I want to set this up as a minor mode with shortcut C-TAB or something to replace a zencoding expression with the corresponding HTML. Anyone wants to do this for me please feel free. Otherwise I may attempt it tomorrow. I'm crashing for the night.

-- [[ChrisDone]]

[new]
I sent you some changes, but I am not sure you recieved them.
I used your github mail address, is that working?
-- LennartBorgman

[new]
Hi Lennart. Your preview addition makes zencoding-mode unusable for emacs -nw.
The preview is shown, but it cannot be selected.
Can you please either fix this, or maybe disable this behaviour as a default?
Thanks.

[new]
Can you please explain what you mean? What is happening? What did you expect to happen?
(You may want to mail me for an easier conversation.)

[new]
I received them but didn't check my mail last night! Thanks for the changes but I'm afraid I've already added zencoding- prefixes to all symbols on an updated version. I'll create a github project and add you as a project owner and then we can share push rights! It will appear under http://github.com/chrisdone/zencoding once I've set it up. -- [[ChrisDone]]

[new]
I'd like to remove the Haskell sections and possibly the resulting irrelevant discussion. Is that a faux pas or can I do that?

[new]
Please use the CSS syntax for properties/attribute selectors. I think this would also provide support for shorthand boolean attributes, e.g. "<video controls></video>". Currently I have to write such attributes as "video controls="

How can I produce <source src='video.ogv' type='video/ogg; codecs="theora, vorbis"'>?

— lazni

[new]

Hey lazni, supporting anything complex like that is not what I intended. I intentionally made it "dumb" to be quick to type out and trivial. If you can come up with a nice way to express that I'd like to see! I have considered a feature like this: you type out 'source src=video.ogv codecs=$1' and then it makes some kind of temporary yasnippet (assuming yasnippet's library lets you do that) which prints <source src="video.ogv" type="video/ogg; codecs=""> with the mark inside the 'codecs' property. So it would be a bit like a keyboard macro, but a snippet macro that you can repeat. What do you think of that? -- ChrisDone

---

Check out this article about an other implementation: http://www.smashingmagazine.com/2009/11/21/zen-coding-a-new-way-to-write-html-code

[new]
Hi Chris. Would you be able create a list of which features are implented and which ones aren't? That would make it a little easier to figure out if the syntax I want to use is supposed to be supported or not.

I'm trying to use aliases with a colon, and they are not working. (ie,  script:src). I can't tell if this is syntax is supposed to be supported or not.

Also, I'm wondering if you (or anyone) has plans to implement support for expansion of doctype declarations. (ie, html:4s). That would be rocking.

Do you intend to implement support for zen-coding's css properties? 

Thank you.


[new]
Hi. I'm using zencoding-mode in emacs 22.2.1, on ubuntu karmic with gnome. 
Ctrl-Return doesn't seem to do the expansion. I just get a return. 
The expansion works fine if I do 'M-x zencoding-expand-line' though.


I looked for info on editing keybindings, and found this page:
http://xahlee.org/emacs/keyboard_shortcuts.html
I noted that it lists 'Return' under "Keys to avoid".


I have tried to edit the keybinding by changing a line in zencoding-mode.el to:
(define-key zencoding-mode-keymap (kbd "<C-M-q>") 'zencoding-expand-line)))

However, when I hit that sequence, the minibuffer proffers:
"C-M-q is undefined"

Did anyone else have a problem with this ?
How can I fix this ?

CORRECTION: Ctrl-Return does actually work normally. It only fails to work when I use emacs in a terminal emulator. 
However, this is usually how I use emacs. Is there a way to get this keybinding to work when using emacs in a term window?

UPDATE:
Hi Chris. On another computer, I am now using the latest version of zencoding-mode.el
( Last-Updated: 2009-11-20 Fri. The previous version, which I am also using, has not date)
It seems that this latest version has even more issues when used in emacs within a term window.
As before, C-Ret doesn't do anything.
Also, the preview mode doesn't respond as expected. If I do p*5, then M-x zen-expand-line, I get the preview. But a return will just add a line break, while the preview remains open.

I really appreciate that you are providing this awesome mode. But I'd really like it if you could add support for emacs in a terminal window.

Is there any chance that you might hammer out these bugs?

[new]

Sorry guys, as you can tell by the lateness of my response, I really don't have any personal time to work on personal projects. But there are three other project collaborators on the zencoding project, so maybe you can add these issues as Issues on github? Then it keeps them in a central location and means someone other than me might have the time and go and fix them: http://github.com/chrisdone/zencoding/issues If you want to contribute some patches please fork the project and I'll pull from it and add you as a collab.

To the person above the previous, this zencoding-mode only supports what is documented above. Does support CSS classes/ids, but not aliases.

-- [[ChrisDone]]

[new]
I am running under Windows, and I quite like the changes in emacs that are finally making it competitive with other editors.  The ErgoEmacs project seems to be making the software far more convenient.  I wanted to use ZenCoding on it, but I could not get the spell-checking working in that version.  The state of emacs compatible spell-checkers on Windows is pathetic.  The unmodified versions of emacs work fine, if you accept that the version of Aspell we have was made around nine years ago (Aspell 0.50.3 alpha).  Using the emacs at EgroEmacs is a rather old version; but fortunately, they have their modifications as add-ins for other OS'es as well.  They are in ergoemacs_1.9.1.1.zip.  I was able to get them working in GNU Emacs 23.2.1; but it broke this ZenCoding add-in.  Here are the changes I had to make:

    ; Now, load ZenCoding
    (require 'cl)    ; Installs Common Lisp, so emacs 23.x doesn't break Zencoding
    (require 'zencoding-mode)
    (add-hook 'sgml-mode-hook 'zencoding-mode)

    ; The new Cua settings take over <C-enter>, much like ZenCoding itself, so you 
    can't remap it.  This sets the expansion key to <Ctrl-E> instead.
    (global-set-key "\C-e" 'zencoding-expand-line)

Thus, one must add statements to install Common Lisp, and use a different key to expand the ZenCoding, since the CUA mode has recently taken over <C-enter>; and many users will want CUA mode for more intuitive, Windows-like use.  Now, I have a Windows version of emacs that behaves far more like a Windows editor, with e.g. a helpful context menu for selected regions with copy, etc; but it also has spell-checking (a little out of date), and this ZenCoding add-in.  I even found I can click the mouse wheel on a flyspell mispelling, and get suggestions!  (I am not spamming - I just like these modernizations of emacs quite a bit.)

What I would most like to see in this ZenCoding add-in is support for the $ operator, so that:

    ul>li#item$*3

becomes

    <ul>
      <li id="item1">
      </li>
      <li id="item2">
      </li>
      <li id="item3">
      </li>
    </ul>

and $$$ becomes 001, 002, 003, etc.  The guy who wrote a Haskell version had added this, but the Git repository is now missing.  This, together with the YASnippet add-in, standard in ErgoEmacs, will make for a formidable coding environment.
