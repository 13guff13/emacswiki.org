= What it is =
Zen Coding refers to a neat way to write markup quickly.

The following blogs provide sumary and examples:

http://www.456bereastreet.com/archive/200909/write_html_and_css_quicker_with_with_zen_coding/

http://mondaybynoon.com/2009/08/17/the-art-of-zen-coding-bringing-snippets-to-a-new-level/ (skip the cruft about snippets)

I'll quote the blog:

<i>zen-coding includes an entirely new angle to writing markup, and it facilitates the feature by letting you write HTML based on CSS selectors. It’s so simple it’s confusing at first. I think it’s best explained by doing a quick before and after. If you were to type:</i>

    div#name.one.two

<i> and follow that with the zen-coding plugin keystroke (CMD+E in TextMate), the plugin will reformat the line as:</i>

    <div id="name" class="one two"></div>

== Zencoding Mode ==

=== Grab it ===

I've made an implementation in elisp as a minor-mode.

Latest raw file: http://github.com/chrisdone/zencoding/raw/master/zencoding-mode.el

Github repo.: http://github.com/chrisdone/zencoding

Please feel free to hack on it and I'll add you as a member of the github project so that you can push to it.

=== Screenshot ===

[[image:ZenCodingModeScreenshot]]

=== How to use it ===

Copy zencoding-mode.el to your load-path and add to your .emacs:

    (add-to-list 'load-path "~/Emacs/zencoding/")
    (require 'zencoding-mode)
    (add-hook 'sgml-mode-hook 'zencoding-mode) ;; Auto-start on any markup modes

At the moment zencoding-expand-line is bound to `C-<return>`, so you write your expression and just hit C-RET.

E.g.

    div#name.one.two

C-RET

    <div id="name" class="one two">
    </div>

=== Syntax ===

==== Basic Tags ====
||<code>a</code>||||<code><a></a></code>||
||<code>a.x</code>||||<code><a class="x"></a></code>||
||<code>a#q.x</code>||||<code><a id="q" class="x"></a></code>||
||<code>a#q.x.y.z</code>||||<code><a id="q" class="x y z"></a></code>||
==== Siblings ====
||<code>a+b</code>||||<code><a></a><b></b></code>||
||<code>a.x+b</code>||||<code><a class="x"></a><b></b></code>||
||<code>a#q.x+b</code>||||<code><a id="q" class="x"></a><b></b></code>||
||<code>a#q.x.y.z+b#p.l.m.n</code>||||<code><a id="q" class="x y z"></a><b id="p" class="l m n"></b></code>||
==== Parent > child ====
||<code>a>b</code>||||<code><a><b></b></a></code>||
||<code>a>b>c</code>||||<code><a>< b><c></c></b></a></code>||
||<code>a.x>b</code>||||<code><a class="x"><b></b></a></code>||
||<code>a#q.x>b</code>||||<code><a id="q" class="x"><b></b></a></code>||
||<code>a#q.x.y.z>b#p.l.m.n</code>||||<code><a id="q" class="x y z"><b id="p" class="l m n"></b></a></code>||
||<code>a>b+c</code>||||<code><a><b></b><c></c></a></code>||
||<code>a>b+c>d</code>||||<code><a><b></b><c><d></d></c></a></code>||
==== Multiplication ====
||<code>a*2</code>||||<code><a></a><a></a></code>||
||<code>a*2+b*2</code>||||<code><a></a><a></a><b></b><b></b></code>||
||<code>a*2>b*2</code>||||<code><a><b></b><b></b></a><a><b></b><b></b></a></code>||
||<code>a>b*2</code>||||<code><a><b></b><b></b></a></code>||
||<code>a#q.x>b#q.x*2</code>||||<code><a id="q" class="x"><b id="q" class="x"></b><b id="q" class="x"></b></a></code>||
==== Properties ====
||<code>a x=y</code>||||<code><a x="y"></a></code>||
||<code>a#foo x=y m=l</code>||||<code><a id="foo" x="y" m="l"></a></code>||
||<code>a#foo.bar.mu x=y m=l</code>||||<code><a id="foo" class="bar mu" x="y" m="l"></a></code>||
||<code>a x=y+b</code>||||<code><a x="y"></a><b></b></code>||
||<code>a x=y+b x=y</code>||||<code><a x="y"></a><b x="y"></b></code>||
||<code>a x=y>b x=y+c x=y</code>||||<code><a x="y"><b x="y"></b><c x="y"></c></a></code>||
==== Parentheses ====
||<code>(a>b)+c</code>||||<code><a><b></b></a><c></c></code>||
||<code>z+(a>b)+c+k</code>||||<code><z></z><a><b></b></a><c></c><k></k></code>||
||<code>(a>b)*2</code>||||<code><a><b></b></a><a><b></b></a></code>||
||<code>(a+b)*2</code>||||<code><a></a><b></b><a></a><b></b></code>||

= A Haskell Implementation =

I've implemented a program in Haskell to do what I've surmised from the examples: http://gist.github.com/223655

Save it as zencoding.hs and compile it with ghc --make zencoding -O2 and pop the resulting program wherever you want.

Here's an example:

    chris@chrisamilo:~/Haskell$ zencoding
    div#news.module>(div.header+div.body>ul>li#item-$*5)
    <div id="news" class="module">
       <div class="header">
       </div>
       <div class="body">
          <ul>
             <li id="item-1">
             </li>
             <li id="item-2">
             </li>
             <li id="item-3">
             </li>
             <li id="item-4">
             </li>
             <li id="item-5">
             </li>
          </ul>
       </div>
    </div>

=== Using it in Emacs ===

You can use it reasonably well from Emacs:

    (defun zencode ()
      "Zen Coding utility."
      (interactive)
      (shell-command-on-region
       (line-beginning-position)
       (line-end-position)
       "/home/chris/Programs/bin/zencoding" ;; change to wherever yours is
       t)
       ;; if you want it to auto indent
      (save-excursion
        (mark-page)
        (indent-for-tab-command)))
    (define-key html-mode-map (kbd "\C-c \C-v") 'zencode)

[[image:ZenCodeSample]]

= Discussion =

Any suggestions/helpful ideas please feel free.

[new]
Yes, please rewrite it in elisp ... ;-)

Would that be hard for some reason?
[new]
Haha. Yes, I originally briefly considered writing it purely in elisp, but I had very little time and my elisp-fu is weak. Just knocked it up so I can use it at work. I think it would be pretty easy work for someone who's written a couple elisp parsers. Anyhoo, the idea's out there so if anyone wants to write some Zen Coding library in elisp that would be awesome! =) -- [[ChrisDone]]

[new]
Me too hope someone will write it.

Does it require a complicated parser?
Or is a simple recursive descent parser enough?

[new]
Nah, no complicated parser. A simple recursive descent parser is enough. All you need is operator precedence ('>' vs '+') and one or two bits for tag#id.class[prop=value,prop2=value2] syntax (though I added the [prop=value] -- I don't know if this is Zen Coding proper, but it's inspired by CSS selectors). Assuming we share an approximately similar definition of "simple". -- [[ChrisDone]]

[new]
Whipped something up to get it started in elisp. http://gist.github.com/224572 My elisp is awful but it does the job... Hard part's over. Might pick this up again tomorrow to add class and identifer syntax, and properties. Anyone else wanna pick it up feel free. -- [[ChrisDone]]

[new]
How nice!
May I suggest that you use a prefix "zencode-" on all defined symbols?

[new]
Ahh, I knew there was something missing! I'll do that on my next update. Thanks! -- [[ChrisDone]]

[new]
Update! It's the weekend. https://gist.github.com/224572/7f3e0b16aa647e0e91c262a9847d7ef709efdc56 New stuff:

    (transform (car (expr "body.sub-page>div#news.content.a+div#news.content.a")))
    => [indentation added with xml-mode]
    <body class="sub-page">
      <div id="news" class="content a">
      </div>
      <div id="news" class="content a">
      </div>
    </body>

-- [[ChrisDone]]

[new]
Now with multipliers (li*5>span), a mini test suite and qualified symbol names:

http://gist.github.com/224572

    ;; Multiplication
    ("a*1"                    "<a></a>")
    ("a*2"                    "<a></a><a></a>")
    ("a*2+b*2"                "<a></a><a></a><b></b><b></b>")
    ("a*2>b*2"                "<a><b></b><b></b></a><a><b></b><b></b></a>")
    ("a>b*2"                  "<a><b></b><b></b></a>")
    ("a#q.x>b#q.x*2"          "<a id=\"q\" class=\"x\"><b id=\"q\" class=\"x\"></b><b id=\"q\" class=\"x\"></b></a>")

If you're hacking on the parser make sure to run the test cases (and add your own!).

I want to set this up as a minor mode with shortcut C-TAB or something to replace a zencoding expression with the corresponding HTML. Anyone wants to do this for me please feel free. Otherwise I may attempt it tomorrow. I'm crashing for the night.

-- [[ChrisDone]]

[new]
I sent you some changes, but I am not sure you recieved them.
I used your github mail address, is that working?
-- LennartBorgman

[new]
I received them but didn't check my mail last night! Thanks for the changes but I'm afraid I've already added zencoding- prefixes to all symbols on an updated version. I'll create a github project and add you as a project owner and then we can share push rights! It will appear under http://github.com/chrisdone/zencoding once I've set it up. -- [[ChrisDone]]

[new]
I'd like to remove the Haskell sections and possibly the resulting irrelevant discussion. Is that a faux pas or can I do that?

[new]
Please use the CSS syntax for properties/attribute selectors. I think this would also provide support for shorthand boolean attributes, e.g. "<video controls></video>". Currently I have to write such attributes as "video controls="

How can I produce <source src='video.ogv' type='video/ogg; codecs="theora, vorbis"'>?

— lazni
