: no time to learn lisp is false economy ;o)
: -- resolve

Emacs Lisp (sometimes called [[EmacsLispLegalName|Elisp]]) is a variant of MacLisp that much of Emacs is written in, as
well as being the extension language customizations and extensions are written in.

Emacs Lisp is what makes Emacs ExtensibleSoftware. Customizations and
extensions can be made quickly and portably. Some of the ways that
Emacs Lisp is used to extend Emacs include hooking custom Emacs Lisp
functions into events, binding functions to key combinations, and
creating new editing modes.

Lisp has been rumored to stand for Lots of Insignificant Silly
Parentheses, but it really means LISt Processor.

See also PlainLispForMath for an explanation of simple arithmetic
expressions in Lisp.

To read about other kinds of Lisp and how to use them in conjunction
with Emacs, see CommonLisp and [[Scheme]].

== How to learn Emacs Lisp ==

For Emacs Lisp documentation, see the EmacsLispReference node.  For Emacs Lisp SelfDocumentation, see CodingStyle.

For help on using other people's Emacs Lisp, see InstallingPackages.

An introduction from the FreeSoftwareFoundation: EmacsLispIntro.

A work-in-progress (perhaps to be perpetually unfinished) tutorial:
http://www.gnuvola.org/software/elisp-tutorial/index.html

You might prefer learning by example and then the ElispCookbook would be useful.

See also LearningEmacs.

== Emacs Lisp features ==
* ListStructure: like ##((1 . 2) . (3 . 4))##
* BackquoteSyntax: what does it mean ##`(foo ,bar baz)##
* ListModification: operations which inspect and modify lists
* [[EmacsLispIntrospection|Introspection]]: finding out about functions
* ...

If you are wondering about all the quoting syntaxes like ##?a 'b #c `(,d e) :f (g . h)## etc., then see at the symbol glossary in CategoryGlossary.


== Lisp vs. Pascal ==

From AlanJPerlis' foreword to the Wizard Book (Wiki:StructureAndInterpretationOfComputerPrograms): [http://mydatapages.com/pascal.html Pascal] is for building
pyramids – imposing, breathtaking, static structures built by armies
pushing heavy blocks into place. Lisp is for building organisms –
imposing, breathtaking, dynamic structures built by squads fitting
fluctuating myriads of simpler organisms into place. The organizing
principles used are the same in both cases, except for one
extraordinarily important difference: The discretionary exportable
functionality entrusted to the individual Lisp programmer is more than
an order of magnitude greater than that to be found within Pascal
enterprises. Lisp programs inflate libraries with functions whose
utility transcends the application that produced them. <i>[...]</i> As
a result the pyramid must stand unchanged for a millennium; the
organism must evolve or perish.

SteveYegge in his long rant on different programming languages, ''[http://steve.yegge.googlepages.com/tour-de-babel Tour de Babel]'', tells of the popularity of Emacs and in particular EmacsLisp for software developed and used internally at Amazon.com.
 
== Emergency Emacs Lisp (with C++, Java & JavaScript examples) ==

Examples with equivalent constructs in C++, Java and JavaScript:  [http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html Emergency Emacs Lisp] by Steve Yegge

== Emacs Lisp for Perl Programmers ==

Some mappings between Perl and Emacs Lisp [http://obsidianrook.com/devnotes/elisp-for-perl-programmers.html here].

== Emacs Lisp for Common Lisp, Scheme and Clojure Programmers == 

Mappings between Common Lisp, Scheme, Clojure and Emacs Lisp [http://hyperpolyglot.org/lisp a side-by-side reference sheet].

----
CategoryCode
CategoryExtensionLanguage
