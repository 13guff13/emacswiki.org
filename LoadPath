The variable ##load-path## lists all the directories where Emacs
should look for Elisp files. The first file found is used, therefore
the order of the directories is relevant.

Preference is given to compiled files when both a compiled file and a
source file are found. Therefore, make sure to recompile files after
making changes to them (or don't compile the files at all).

== Adding a directory ==

To add a single directory to the ##load-path##:

    (add-to-list 'load-path "~/.emacs.d/site-lisp/")

The final slash is required for all paths that should be treated as
directories as opposed to regular files.

[:AddSubDirectories]
== Adding sub-directories ==

Adding a directory to the ##load-path## does not add its
sub-directories also.  To add the sub-directories of the current
directory to the ##load-path## do this:

    (normal-top-level-add-subdirs-to-load-path)

This adds all sub-directories of the current directory recursively;
except those not starting with letters or digits, named ##RCS## or
##CVS## or containing a file named ##.nosearch##.

The current directory is the directory containing the currently
visited file, or if the current buffer does not visit a file the
directory from which Emacs was started.

To add any other directory to the ##load-path## (which is what you
normally want to do) the current directory has to be temporarily
changed by binding ##default-directory##:

    (let ((default-directory "~/.emacs.d/site-lisp/"))
      (normal-top-level-add-subdirs-to-load-path))

If you only want some of the sub-directories added, you can use:

    (let ((default-directory "~/.emacs.d/site-lisp/"))
      (normal-top-level-add-to-load-path '("emms" "erc" "planner"
"w3"))

Another way of changing the current directory is using the command
##cd##.  However this is intended for interactive use for its
side-effect -- which is to *permanently* set the default directory.

== Add all locally installed packages ==

Assuming that you install packages in ##~/.emacs.d/site-lisp/## and
that some of the installed packages are single libraries while others
are placed inside their own sub-directories you need to combine the
steps from the previous sections.

    (let ((default-directory "~/.emacs.d/site-lisp/"))
      (normal-top-level-add-to-load-path '("."))
      (normal-top-level-add-subdirs-to-load-path))

Since various packages store information in ##~/.emacs.d/##, it is
unwise to add all of its sub-directories to ##load-path##.  Here we
only added the sub-directory ##site-lisp## to avoid loading files that
aren't libraries.

If you are using Emacs 23 you can use ##user-emacs-directory## to
construct a path to one of its sub-directories.

    (concat user-emacs-directory
            (convert-standard-filename "site-lisp/"))

Note how we use ##convert-standard-file-name## to construct a path
which is valid on all supported platforms.

If you use an older versions of Emacs you can backport this useful
variable.

    (unless (boundp 'user-emacs-directory)
      (defvar user-emacs-directory "~/.emacs.d/"
        "Directory beneath which additional per-user Emacs-specific
files are placed.
      Various programs in Emacs store information in this directory.
      Note that this should end with a directory separator.
      See also `locate-user-emacs-file'."))

== Default value ==

The default value of ##load-path## includes two special directories
recursively: ##/usr/local/share/emacs/VERSION/site-lisp## and
##/usr/local/share/emacs/site-lisp##.  (On Windows, the equivalent
location is ##C:\Program Files\emacs-VERSION\site-lisp##.)  The first
directory contains packages for a particular Emacs version; the second
contains packages for all installed versions of Emacs.  These
directories contain files for the current ''site'', for use by the
system administrator when installing software
locally[http://www.pathname.com/fhs/pub/fhs-2.3.html#USRLOCALLOCALHIERARCHY].

On ##~/.emacs.d/## on the other hand contains files for the current
''user'', and is independent of system-wide changes.  This makes it
the best choice for storing your personal changes.  Installing all
packages in a sub-directory of ##~/.emacs.d/## also makes it very easy
to move them along with your configuration to a different machine.

== Debugging ==

First, check the value of your ##load-path## by asking for help on the
variable: `C-h v load-path RET' should give you the documentation for
the variable and its current value. If your directory is not listed,
you must add it (see above).

If your directory ''is'' listed, check for ConflictingLibraries.

== Searching for files in your load-path ==

See SearchingLoadPath.

== Discussion ==

[new]
I see that `with-temp-buffer' was replaced with `let'. Why? The
current directory is a buffer-local property, and the use of
`with-temp-buffer' ensures that all such properties are kept intact.
(What if there are other variables we've forgotten to `let'?) In
addition, ##(cd "~/.emacs.d/")## should expand the ##~## syntax
properly on Windows. In my opinion,

    (with-temp-buffer
      (cd "~/elisp/")
      (add-to-list 'load-path default-directory)
      (normal-top-level-add-subdirs-to-load-path))

is more to the point than

    (let* ((my-lisp-dir "~/elisp/")
           (default-directory my-lisp-dir))
      (add-to-list 'load-path my-lisp-dir)
      (normal-top-level-add-subdirs-to-load-path))

I also think the "Including subdirectories" section could use some
editing: the present exposition goes from snippet to snippet of
code-which-almost-works (why?), until settling on a confusing hunk
from a dead URL. It would be better to present a complete, working
solution up front, followed by a detailed explanation thereof. --
VegardOye

[new]
About the change from ##cd## to ##let## see above.

I also think that this page is quite messy (and more misleading than
helpful).  I tried to reorganize a bit by moving information to where
it is actually useful, and removing illegal examples (e.g. missing
trailing slash).  -- JonasBernoulli

[new]
The side effect of `cd' is to change the default directory of the
''current buffer''. The `with-temp-buffer' macro creates a temporary
buffer for `cd' to act on, protecting the directory of the original
buffer. So, while the older revisions started out with

    (progn
      (cd "~/elisp")
      (normal-top-level-add-subdirs-to-load-path))

and then abandoned this clear code only because they couldn't figure
out a way to contain the side effect, we can in fact work with what we
have by replacing `progn' with `with-temp-buffer'. There:

    (with-temp-buffer
      (cd "~/elisp")
      (normal-top-level-add-subdirs-to-load-path))

I think the `cd' code is ''much'' more readable, especially since most
people recognize "##cd##" from elsewhere. -- VegardOye

[new]
I agree.  The `cd' is much more readable and useful.  But for
historical reasons, that's not the way Elisp is written to change the
directory. See startup.el for example. -- AaronHawley

[new]
What are the historical reasons? Are they still relevant?

And, what is the point of having a change directory function if we're
not gonna friggin' ''use'' it? ;-) -- VegardOye

[new]
Again, as mentioned above, `cd' is meant for interactive use.  Using
something `with-temp-buffer' to counter or nullify side effects from
`cd' is bad programming style.  Embrace your inner `let'.  --
AaronHawley

[new]
+1 Embrace your inner `let'. -- JonasBernoulli

----

[new]
What is ##normal-top-level-add-to-load-path##?  It is not documented;
I quickly looked at the code and couldn't make any sense of it.  Why
is it needed? Isn't it only required during startup (and even then
why)?  How is better than manually editing ##load-path##?  If it has
benefits is it worth confusing people by suggesting to use an
undocumented function?  If it is then its use should be explained in
##Adding a directory## (without removing ##add-to-list##) but I
frankly have some doubts.  -- JonasBernoulli

----
CategoryHelp
