This page collects information for creating a usable Python programming environment in Emacs.
== Python Modes ==
There are a number of Python modes for Emacs. The major ones are [ProgrammingWithPythonDotElGallina python.el], which comes with Emacs 24.2 and up, and [ProgrammingWithPythonModeDotEl python-mode.el], which also provides Python IDE support. The older [ProgrammingWithPythonDotEl 'loveshack' python.el] from Emacs 24.1 and before has a number of fans as well.

== Emacs as a Python IDE ==
Beyond a basic Python editing, there are two actively maintained packages that provide IDE-like features for Python programming.  They provide many of the support features listed separately below and are easily installed as packages from [[MELPA]], providing quick ways to create a good Python programming environment in Emacs.
* [ProgrammingWithPythonModeDotEl python-mode.el]  Python major mode with powerful Python editing features.
* [https://github.com/jorgenschaefer/elpy Elpy], an Emacs package to bring powerful Python editing to Emacs. It combines a number of other packages, both written in Emacs Lisp as well as Python

== Extended Configuration ==
This section describes various features that can be added to Emacs to support Python editing.  Note that the IDE packages listed above already provide many of these features using packages referred to below.

===Indentation===
The defaults should see you compliant with PEP8 but see IndentingPython for detail.

===Completion===
[https://github.com/tkf/emacs-jedi Jedi.el] is a Python auto-completion package using [AutoComplete] and [https://github.com/davidhalter/jedi jedi]. It can also be used as a back end for [CompanyMode].

[https://github.com/python-rope/ropemacs Ropemacs] can be used as a backend for [AutoComplete] and [CompanyMode].

[https://github.com/tavisrudd/emacs.d/blob/master/dss-completion.el Auto-Complete support in IPython shell buffers]

===Refactoring===
[https://github.com/python-rope/ropemacs Ropemacs] is a library using [[Pymacs]] to talk with the Rope refactoring library.

[https://github.com/tkf/emacs-jedi Jedi.el] also has some refactoring support.

===Virtual Environments==
[https://github.com/aculich/virtualenv.el virtualenv.el] and [https://github.com/jorgenschaefer/pyvenv pyvenv] both support working with virtualenvs.

=== Comment/Uncomment Region ===

If you have `transient-mark-mode' on, you can just use `comment-dwim': select a region and hit `M-;'. The DoWhatIMean means that it will comment or uncomment the region as appropriate. If you do not have `transient-mark-mode' on by default, you can hit C-SPC twice to activate it temporarily.

( doesn't python-mode.el offer `py-comment-region? --CH )

Beside py-comment-region [ProgrammingWithPythonModeDotEl python-mode.el] provides commands to comment/uncomment all known forms, def, block, clause etc.

===Viewing the official Python documentation===
====Using Info====
You will first need to obtain the necessary Info files and configure Info so they can be found, e.g. using InfoPath.  These files are not available at https://www.python.org/doc/ but can be built using the instructions at https://github.com/politza/python-info, which also hosts several pre-built versions.  You will then need to configure Info so that `info-lookup-symbol' searches the Python docs, e.g. 
{{{
(require 'info-look)

(info-lookup-add-help
 :mode 'python-mode
 :regexp "[[:alnum:]_]+"
 :doc-spec
 '(("(python)Index" nil "")))
}}}
[https://bitbucket.org/jonwaltman/pydoc-info/ pydoc-info], available on MELPA, does this configuration too, and also provides more customized support for the Python docs. 
====Using a web browser====
[http://github.com/tsgates/pylookup Pylookup mode] allows searching the Python documentation from Emacs and viewing results in a web browser, either on- or off-line.

===Lint, style and syntax checkers===
Both [[Flycheck]] and [[FlyMake]] can be used to wrap checkers such as pep8, pyflakes (flake8 includes both), pylint and pychecker.
====Flycheck====
Flycheck integrates flake8 and pylint.
==== Flymake====
=====pylint=====
Flymake can be used with pylint, as documented at http://docs.pylint.org/ide-integration.

=====flake8 / pyflakes=====
https://github.com/purcell/flymake-python-pyflakes is a flymake handler for python-mode.el using pyflakes or flake8, although the author suggests you might be better served using [[Flycheck]].
[https://github.com/jorgenschaefer/elpy Elpy] uses [[FlyMake]] with flake8.  It can also be used alongside [[Flycheck]].

Alternatively pyflakes can added as a checker to FlyMake as below:
{{{
(when (load "flymake" t)
  (defun flymake-pyflakes-init ()
     ; Make sure it's not a remote buffer or flymake would not work
     (when (not (subsetp (list (current-buffer)) (tramp-list-remote-buffers)))
      (let* ((temp-file (flymake-init-create-temp-buffer-copy
                         'flymake-create-temp-inplace))
             (local-file (file-relative-name
                          temp-file
                          (file-name-directory buffer-file-name))))
        (list "pyflakes" (list local-file)))))
  (add-to-list 'flymake-allowed-file-name-masks
               '("\\.py\\'" flymake-pyflakes-init)))
}}}
This should work as long as pyflakes is installed and on your PATH.

===== Using multiple checkers =====
Flymake only natively supports a single checker per buffer. However, more than 
one code checker can be applied by using a
wrapper script that runs the desired tools and combines their output.
This has lots of issues, one being that flymake does not seem to show
more than one error message per line of code, meaning that an error or
warning which is intentionally left unfixed can mask an error or
warning that would get more attention.

There are several scripts around to do this, supporting various tools.
Each expects to find the code checking tools in your path (pep8.py,
pychecker, pylint, pyflakes, etc). Additionally this script attempts
to support virtual environments, but this is largely untested.

* Newest version of this code from the original author [https://github.com/justinvanwinkle/config-files/blob/master/bin/lintrunner.py here].

* The code [http://python.pastebin.com/f627691e0 here] or [http://pastebin.ca/1797770 here] runs pylint + pychecker + pep8

* [https://github.com/tavisrudd/pylint_etc_wrapper/blob/master/pylint_etc_wrapper.py Here] is an extended, cleaned up and bug-fixed version of the script above by Tavis Rudd (not the original author)

* [http://bitbucket.org/jek/sandbox/src/tip/pycheckers pycheckers] runs pyflakes, pep8, pydo (configurable)

: I added this code to pastebins (didn't know which to prefer, so chose three) which should be better than dumping the code here. -- [[Chris2048]]

===Testing===
[https://bitbucket.org/durin42/nosemacs nosemacs] is a mode to run the nosetests testing framework.

=== IPython ===
To enable IPython globally in Emacs's native python-mode, use:
{{{
  (setq python-shell-interpreter "ipython"
       python-shell-interpreter-args "-i")
}}}
This should work with any recent IPython, including on Windows.

[ProgrammingWithPythonModeDotEl python-mode.el] also comes with IPython support.
==== IPython debugging/pdbtrack ====

I made the following changes to python-mode.el to make debugging work again with current IPython (0.9.1):

[...]

 ;; pdbtrack constants
 (defconst py-pdbtrack-stack-entry-regexp
  "^> \\(.*\\)(\\([0-9]+\\))\\([?a-zA-Z0-9_<>]+\\)()"; this is new
 ;  "^> \\([^(]+\\)(\\([0-9]+\\))\\([?a-zA-Z0-9_]+\\)()"
 ;  "^> \\(.*\\)(\\([0-9]+\\))\\([?a-zA-Z0-9_]+\\)()"
   "Regular expression pdbtrack uses to find a stack trace entry.")

 ;(defconst py-pdbtrack-input-prompt "\n[(<]*[Pp]db[>)]+ "
 (defconst py-pdbtrack-input-prompt "\n[(<]*[Ii]?[Pp]db[>)]+ "; this is new
   "Regular expression pdbtrack uses to recognize a pdb prompt.")

[...]

            (py-pdbtrack-overlay-arrow nil)

          (setq block (ansi-color-filter-apply block)) ; this is new
          (setq target (py-pdbtrack-get-source-buffer block))

[...]

Now when I debug in the IPython console (using %run -d, or %pdb on, etc.) pdbtrack makes sure to show me the current source code and corresponding line. Note that these changes may break debugging in a standard python-shell, I have not tested this.

* [https://github.com/burakbayramli/emacs-ipython emacs-ipython], an Emacs extension that allows execution of python code inside a TeX buffer and display its results, text or graphic in the section below. The extension uses Pymacs to connect to a ipython kernel to execute code. 

====IPython notebook====
* [http://tkf.github.com/emacs-ipython-notebook/ Emacs IPython Notebook], an IPython notebook client for Emacs.

=== IronPython ===
* Install [ProgrammingWithPythonModeDotEl python-mode]
* ##(setq py-jython-command "c:/Program Files/IronPython 2.6 for .NET 4.0/ipy.exe")##
* Open a .py file. C-c C-t will toggle "jython", C-c ! will start a shell

=== Using PythonTidy to pretty-print a buffer ===

[http://lacusveris.com/PythonTidy/ PythonTidy] can be used to pretty-print a buffer in combination
with shell-command-on-region.
Installing PythonTidy somewhere on the path, and add this to your .emacs

<pre>
(defun pytidy-whole-buffer ()
  (interactive)
  (let ((a (point)))
    (shell-command-on-region (point-min) (point-max) "<Name_Of_Executable_Script>" t)
    (goto-char a)))
</pre>

Note: <Name_Of_Executable_Script> should match the name of the pythonTidy script on your path, make
sure you set execute permissions.

bind this to any key you wish, I have:

<pre>
(define-key python-mode-map  (kbd "<f9>") 'pytidy-whole-buffer)
</pre>

in my python-mode-hook.
invoking the command pretty-prints the hole buffer, you can invoke undo if something went
wrong, and the cursor stays put.

=== Unicode on Mac OS X === 
When using Emacs 24.1 on Mac OS X compiled via homebrew. The python-shell always used US-ASCII as encoding. To fix it I used:
<pre>
(setenv "LC_CTYPE" "UTF-8")
</pre>

To determine your encoding in the python-shell use:
<pre>
>>> import sys; sys.stdout.encoding
'US-ASCII'
</pre>

Not having the right encoding set leads to errors in ipython:
<pre>
ERROR - failed to write data to stream: <_io.TextIOWrapper name='<stdout>' mode='w' encoding='US-ASCII'>
</pre>

=== Shortcuts to automatically write commands ===
The code below adds some shortcuts to automatically write the frequently used python commands. 
<pre>
(define-key
  python-mode-map
  (kbd "C-c C-x l")
  (lambda () (interactive)  (insert "lambda ")))

(define-key
  python-mode-map
  (kbd "C-c C-x m")
  (lambda ()
    (interactive)
    (insert "map()")
    (backward-char) 1))

(define-key python-mode-map
  (kbd "C-c C-x r")
  (lambda ()
    (interactive)
    (insert "reduce()")
    (backward-char 1)))

(define-key python-mode-map
  (kbd "C-c C-x e")
  (lambda ()
    (interactive)
    (insert "return ")))
</pre>

----
Categories: CategoryProgramming, ProgrammingModes
