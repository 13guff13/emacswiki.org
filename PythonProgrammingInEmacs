[[ja:PythonProgrammingInEmacs-ja]]
[[ja:PythonProgrammingInEmacs-ja]]
This page collects information for creating a usable Python programming environment in Emacs.
==Quick start==
Emacs already has out-of-the-box Python support via `python-mode'.  The IDE packages listed below can be used to set up a more complete environment quickly.
== Python Modes ==
There are a number of Python major modes for Emacs. As well as basic editing these all provide a range of IDE-like features, relying on a mix of native Emacs features and external Emacs/Python packages:
* [ProgrammingWithPythonDotElGallina python.el], which comes with Emacs 24.2 and up.
* [ProgrammingWithPythonModeDotEl python-mode.el].
* [ProgrammingWithPythonDotEl 'loveshack' python.el] from Emacs 24.1 and before has a number of fans as well.
== IDE packages==
These provide powerful and relatively complete environments by combining and customizing other packages, both Emacs Lisp and Python, and resolving conflicts between them.   The first two build on the `python-mode' in python.el; python-mode.el replaces it.
* [https://github.com/jorgenschaefer/elpy Elpy]
* [https://github.com/proofit404/anaconda-mode anaconda-mode] 
* [ProgrammingWithPythonModeDotEl python-mode.el]
== Support Features ==
Various features that can be added to or improved in Emacs.  Note that the IDE packages listed above provide many of these using packages referred to below.

===Virtual Environments==
There is some built-in support for virtual environments in python.el, but these packages provide more features.
* [https://github.com/jorgenschaefer/pyvenv pyvenv] - used in elpy, written by the same author. 
* [https://github.com/tkf/emacs-python-environment python-environment] - used in jedi, written by the same author 
* [https://github.com/proofit404/pyenv-mode pyenv-mode] - uses [https://github.com/yyuu/pyenv pyenv], written by the author of anaconda-mode.
* [https://github.com/porterjamesj/virtualenvwrapper.el virtualenvwrapper]
* [https://github.com/aculich/virtualenv.el virtualenv.el] - deprecated. 

===Indentation===
The defaults should see you compliant with PEP8 but see IndentingPython for detail.

=== Comment/Uncomment Region ===
If you have `transient-mark-mode' on, you can just use `comment-dwim': select a region and hit `M-;'. The DoWhatIMean means that it will comment or uncomment the region as appropriate. If you do not have `transient-mark-mode' on by default, you can hit C-SPC twice to activate it temporarily.

[ProgrammingWithPythonModeDotEl python-mode.el] also provides `py-comment-region and commands to comment/uncomment all known forms, def, block, clause etc.

===Completion===
[https://github.com/tkf/emacs-jedi Jedi.el] is a Python auto-completion package using [AutoComplete] and [https://github.com/davidhalter/jedi jedi]. It can also be used as a back end for [CompanyMode].

[https://github.com/python-rope/ropemacs Ropemacs] can be used as a backend for [AutoComplete] and [CompanyMode].

[https://github.com/tavisrudd/emacs.d/blob/master/dss-completion.el Auto-Complete support in IPython shell buffers]

=== Code generation helpers ===
[[Yasnippet]] comes with a set of templates for Python.

===Lint, style and syntax checkers===
Both [[Flycheck]] and [[FlyMake]] can be used to wrap checkers such as pep8, pyflakes (flake8 includes both), pylint and pychecker.
====Flycheck====
[[Flycheck]] integrates flake8 and pylint.  It can be used with multiple checkers per buffer.
==== Flymake====
=====pylint=====
[[FlyMake]] can be used with pylint, as documented at http://docs.pylint.org/ide-integration.

=====flake8 / pyflakes=====
https://github.com/purcell/flymake-python-pyflakes is a flymake handler for python-mode.el using pyflakes or flake8, although the author suggests you might be better served using [[Flycheck]].

[https://github.com/jorgenschaefer/elpy Elpy] uses [[FlyMake]] with flake8.  It can also be used alongside [[Flycheck]].

Alternatively pyflakes can added as a checker to FlyMake as below:
{{{
(when (load "flymake" t)
  (defun flymake-pyflakes-init ()
     ; Make sure it's not a remote buffer or flymake would not work
     (when (not (subsetp (list (current-buffer)) (tramp-list-remote-buffers)))
      (let* ((temp-file (flymake-init-create-temp-buffer-copy
                         'flymake-create-temp-inplace))
             (local-file (file-relative-name
                          temp-file
                          (file-name-directory buffer-file-name))))
        (list "pyflakes" (list local-file)))))
  (add-to-list 'flymake-allowed-file-name-masks
               '("\\.py\\'" flymake-pyflakes-init)))
}}}
This should work as long as pyflakes is installed and on your PATH.

===== Using multiple checkers =====
Flymake only natively supports a single checker per buffer. However, more than 
one code checker can be applied by using a
wrapper script that runs the desired tools and combines their output.
This has lots of issues, one being that flymake does not seem to show
more than one error message per line of code, meaning that an error or
warning which is intentionally left unfixed can mask an error or
warning that would get more attention.

There are several scripts around to do this, supporting various tools.
Each expects to find the code checking tools in your path (pep8.py,
pychecker, pylint, pyflakes, etc). Additionally this script attempts
to support virtual environments, but this is largely untested.

* Newest version of this code from the original author [https://github.com/justinvanwinkle/config-files/blob/master/bin/lintrunner.py here].

* The code [http://python.pastebin.com/f627691e0 here] or [http://pastebin.ca/1797770 here] runs pylint + pychecker + pep8

* [https://github.com/tavisrudd/pylint_etc_wrapper/blob/master/pylint_etc_wrapper.py Here] is an extended, cleaned up and bug-fixed version of the script above by Tavis Rudd (not the original author)

* [http://bitbucket.org/jek/sandbox/src/tip/pycheckers pycheckers] runs pyflakes, pep8, pydo (configurable)

: I added this code to pastebins (didn't know which to prefer, so chose three) which should be better than dumping the code here. -- [[Chris2048]]

===Refactoring===
====Refactoring libraries====
[https://github.com/python-rope/ropemacs Ropemacs] is a library using [[Pymacs]] to talk with the Rope refactoring library.

[https://github.com/tkf/emacs-jedi Jedi.el] also has some refactoring support.

====Reformatting and PEP8 conformance====
=====yapf=====
[https://github.com/google/yapf Yapf] attempts to format Python code to the best formatting that conforms to a style guide, even if the original code didn't violate the style guide.  The style guide can be customized; predefined ones include pep8 and google.

Both [https://melpa.org/#/py-yapf py-yapf] and [https://github.com/jorgenschaefer/elpy Elpy] support applying yapf to the current buffer.

=====autopep8=====
[https://pypi.python.org/pypi/autopep8/ autopep8] formats Python code to conform to the PEP 8 style guide using [https://pypi.python.org/pypi/pep8 the pep8 tool].

Both [https://melpa.org/#/py-autopep8 py-autopep8] and [https://github.com/jorgenschaefer/elpy Elpy] support applying autopep8 to the current buffer.

===Running tests===
[https://bitbucket.org/durin42/nosemacs nosemacs] is a mode to run the nosetests testing framework.

===Reporting test coverage===
[https://github.com/mattharrison/pycoverage.el pycoverage.el] generates reports using  [https://pypi.python.org/pypi/coverage coverage] and provides a minor mode for displaying coverage by overriding `linum-mode'.  Alternatively, a [[Flycheck]] checker could be used to display coverage.

===Viewing the official Python documentation===
====Using Info====
You will first need to obtain the necessary Info files and configure Info so they can be found, e.g. using InfoPath.  These files are not available at https://www.python.org/doc/ but can be built using the instructions at https://github.com/politza/python-info, which also hosts several pre-built versions.  You will then need to configure Info so that `info-lookup-symbol' searches the Python docs, e.g. 
{{{
(require 'info-look)

(info-lookup-add-help
 :mode 'python-mode
 :regexp "[[:alnum:]_]+"
 :doc-spec
 '(("(python)Index" nil "")))
}}}
[https://bitbucket.org/jonwaltman/pydoc-info/ pydoc-info], available on MELPA, does this configuration too, and also provides more customized support for the Python docs. 
====Using a web browser====
[http://github.com/tsgates/pylookup Pylookup mode] allows searching the Python documentation from Emacs and viewing results in a web browser, either on- or off-line.

=== Interactive environments - Shells, REPLs and notebooks ===
====Using IPython as the Python shell==
In Emacs's native python-mode, use:
{{{
  (setq python-shell-interpreter "ipython"
       python-shell-interpreter-args "-i")
}}}
This should work with any recent IPython, including on Windows.

[ProgrammingWithPythonModeDotEl python-mode.el] also comes with IPython support. 
====Emacs IPython Notebook (EIN)====
[https://github.com/millejoh/emacs-ipython-notebook Emacs IPython Notebook (EIN)] provides a IPython Notebook client and integrated REPL (like SLIME) in Emacs. It is available on MELPA as 'ein'.  Replaces [https://github.com/tkf/emacs-ipython-notebook tkf's EIN], which it was [https://github.com/tkf/emacs-ipython-notebook/issues/156 forked from] to keep up with IPython/Jupyter development. 
==== ob-python====
[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html ob-python] provides Org-Babel support for evaluating Python source code.  Python source code blocks in Org Mode can be used to define functions, filter and analyze data, create graphics and figures, and produce reproducible research papers using a style similar to literate programming. It is included in the 'org-plus-contrib' package from [http://orgmode.org/elpa.html the Org Mode ELPA] or [[MELPA]].
====ob-ipython====
[https://github.com/gregsexton/ob-ipython ob-ipython] provides Org-Babel support for evaluating Python source code using an IPython kernel.  It provides similar features to ob-python (and tries to be more robust) as well as IPython-specific features like magics.  
====LaTeX or MarkDown====
[https://github.com/burakbayramli/emacs-ipython emacs-ipython], an Emacs extension that allows execution of python code inside a LaTeX or MarkDown buffer and display its results, text or graphic in the section below. The extension uses Pymacs to connect to an ipython kernel to execute code. 
====Live coding====
[https://github.com/donkirkby/live-py-plugin live-py-mode] is a Python minor mode supporting live coding, inspired by Bret Victor's [https://vimeo.com/36579366 "Inventing on Principle"] .
=== IronPython ===
* Install [ProgrammingWithPythonModeDotEl python-mode]
* ##(setq py-jython-command "c:/Program Files/IronPython 2.6 for .NET 4.0/ipy.exe")##
* Open a .py file. C-c C-t will toggle "jython", C-c ! will start a shell

=== Unicode on Mac OS X === 
When using Emacs 24.1 on Mac OS X compiled via homebrew. The python-shell always used US-ASCII as encoding. To fix it I used:
<pre>
(setenv "LC_CTYPE" "UTF-8")
(setenv "LC_ALL" "en_US.UTF-8")
(setenv "LANG" "en_US.UTF-8")
</pre>

To determine your encoding in the python-shell use:
<pre>
>>> import sys; sys.stdout.encoding
'US-ASCII'
</pre>

Not having the right encoding set leads to errors in ipython:
<pre>
ERROR - failed to write data to stream: <_io.TextIOWrapper name='<stdout>' mode='w' encoding='US-ASCII'>
</pre>

===How to improve this page===
Round out support features in line with https://lists.gnu.org/archive/html/emacs-devel/2015-10/msg00669.html

Add sections on: debugging, profiling, semantic editing (?)

Extend sections on: documentation lookup, refactoring, completion 
----
Categories: CategoryProgramming, ProgrammingModes
