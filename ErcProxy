We don't have HTTP proxy support for [[ERC]], yet.

Here's some background material:

* RFC 3143 -- Known HTTP Proxy/Caching Problems
* RFC 3205 -- On the use of HTTP as a Substrate.  ESR says “good design advice for anyone considering using HTTP as the underlayer of an application protocol.”
* [http://www.nocrew.org/software/httptunnel.html GNU httptunnel] -- “httptunnel creates a bidirectional virtual data connection tunnelled in HTTP requests. The HTTP requests can be sent via an HTTP proxy if so desired.
This can be useful for users behind restrictive firewalls. If WWW access is allowed through a HTTP proxy, it's possible to use httptunnel and, say, telnet or PPP to connect to a computer outside the firewall.”
* [http://sourceforge.net/projects/desproxy/ desproxy] -- “Bored of having HTTP-only connection to the Internet? Tired of being unable to connect to irc through a HTTP proxy? desproxy (a TCP tunnel for HTTP proxies) just makes you able to tunnel all your TCP traffic through a HTTP proxy!”

[[Khmar]] thinks socks is easier.

[[aadis]] says to look how irc-via-proxy is done in the gaim code.

[[alephnull]] says: You could run desproxy-socksserver on localhost and tunnel through your HTTP proxy.

== ERC through a socks proxy ==

Apparently, this turned out to be a lot easier than I first thought. :)

socks.el is a file that comes with [[w3]]. It has routines to redefine open-network-stream to a socksified version. I'm not sure how this is called/handled but the following snippet does the trick. The socks-override-functions is something defined inside socks.el Immediately after the definition, it's checked and if it's true, the network functions are overridden. 

 (setq socks-override-functions 1)
 (setq socks-noproxy '("localhost"))
 (require 'socks)
 ;; (defalias 'open-network-stream 'socks-open-network-stream)
 ;; the following works for just ERC
 (setq erc-server-connect-function 'socks-open-network-stream)

The location of the socks server is in the variable socks-server which you can customise after you require socks. 
socks-noproxy is a variable also defined in socks.el which holds a list of regexps for which the network calls are not socksified. I've excluded localhost from the connections so that I can still connect to bitlbee. 

As of emacs 23 socks.el has become part of Emacs distribuution, so no need to download any additional files.
"defalias" approach works for any web enabled packages.

==  tor (http://tor.eff.org/) == 

To use ERC with Tor requires you to have Privoxy installed and configured, as well as the socks.el code from above.  In addition, you need to set socks-server with M-x customize-variable RET socks-server RET.  

Set the server to "localhost" if you are running Tor/Privoxy on the localhost, or set it to the server where Tor/Privoxy is running.  Set the port to "9050", and select the "Socks v5" radio button.


[[offby1]] just discovered that ##torify emacs##, followed by ##M-x erc-select##, works fine.

Does this solutions [http://wiki.torproject.org/noreply/TheOnionRouter/TorFAQ#SOCKSAndDNS leak dns?]


-----
[[ERC]]
