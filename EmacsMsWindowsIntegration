There are at least four ways you may want to integrate Emacs into Windows:

# run from cmd window
# Start from shortcut (taskbar or Start menu)
# Double-click .txt/.el/.org files (or other extensions)
# set as editor for git/mercurial/etc.

First, for #1, put the emacs bin dir in the Windows PATH (right-click Computer, Properties, Advanced, Environment Variables).  This handles #1 and simplifies the other steps (no paths needed).

For #2, the right code for the desktop/task-bar shortcut is exactly this:
{{{
emacsclientw.exe -na runemacs.exe -c
}}}
This shortcut will start emacs from scratch if it's not running, and open a new frame if it is.
The -c is key: without it, you have to pass a file to open (even if it's "", which does work but is uglier) or emacsclient will exit with an error.
(Right-click on desktop, New Shortcut, etc., then drag the shortcut into taskbar if you want.)

For #3, use ftype and assoc:

    ftype txtfile=emacsclientw -na runemacs "%1"
    ftype EmacsLisp=emacsclientw -na runemacs "%1"
    ftype CodeFile=emacsclientw -na runemacs "%1"
    assoc .txt=txtfile
    assoc .text=txtfile
    assoc .log=txtfile
    assoc .el=EmacsLisp
    assoc .c=CodeFile
    assoc .h=CodeFile

For #4, I don't know a general solution, but this almost works for me:
{{{
  git config --global core.editor "emacsclient -a runemacs '%*'"
}}}
The problem is, if emacs wasn't already running, it starts emacs fine, but it returns right away -- doesn't wait.  So the git commit fails (because the default message was unchanged).  Anyone know how to make emacsclient wait in the case where it has to start the alt editor?  (Do NOT use emacsclientw here; it doesn't wait.)
