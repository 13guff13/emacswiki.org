markdown-mode is a major mode for GNU Emacs which provides syntax highlighting and supporting commands for editing Markdown files. It provides keybindings and commands for inserting Markdown elements and to assist in calling Markdown to parse the source code or preview the document in a browser. It also, optionally, provides syntax highlighting for wiki links and embedded itex mathematical expressions.

http://jblevins.org/projects/markdown-mode/

markdown-mode version 2.0 was released on March 24, 2013.  Release notes can be found here:

http://jblevins.org/projects/markdown-mode/rev-2-0

Debian have `elpa-markdown-mode' package.

== Customization ==

It can be useful to enforce certain static constraints on Markdown files; for example, the heavy use of brackets and parentheses in link syntax mean it is easy to omit a closing parentheses, especially if one is linking something inside a natural language digression (where one will have 2 or more closing parentheses). Balance can be checked with [[DebuggingParentheses|'check-parens']], and it can be automatically invoked after file saves with the usual hooks, eg.

    (add-hook 'markdown-mode-hook
            (lambda ()
              (when buffer-file-name
                (add-hook 'after-save-hook
                          'check-parens
                          nil t))))

A similar logic applies to double-quotes, especially if one is frequently adding tooltips to links. 'check-parens' works off the buffer syntax table, and double-quotes are not special to markdown-mode, so one must do a more invasive hook:

    ; warning, may yield wrong results in edge-cases like single double-quotes in code block.
    ; Use only if your files usually are balanced w/r/t double-quotes
    ; <http://stackoverflow.com/questions/9527593/>
    (add-hook 'markdown-mode-hook (lambda () (modify-syntax-entry ?\" "\"" markdown-mode-syntax-table)))

== Usage notes ==

Useful markdown-specific editing features:

* Change heading level two ways: by cycling with `C-c C--' or `C-c C-=' or by re-issuing a heading insertion command when the point is at a heading (e.g., `C-c C-t 4' will replace the current heading with a level-four heading).
* Section navigation via outline-minor-mode using the same keybindings as in org-mode (`C-c C-f', `C-c C-b', `C-c C-u', `C-c C-p', and `C-c C-n').
* Reorder list items with `M-<up>' and `M-<down>'.

== HTML 5 and UTF-8 ==

Assuming you are using the Perl script `markdown` which is called without a filename, and assuming you write all your files using UTF-8, then this is for you:

{{{
(eval-after-load "markdown-mode"
  '(defalias 'markdown-add-xhtml-header-and-footer 'as/markdown-add-xhtml-header-and-footer))

(defun as/markdown-add-xhtml-header-and-footer (title)
    "Wrap XHTML header and footer with given TITLE around current buffer."
    (goto-char (point-min))
    (insert "<!DOCTYPE html5>\n"
	    "<html>\n"
	    "<head>\n<title>")
    (insert title)
    (insert "</title>\n")
    (insert "<meta charset=\"utf-8\" />\n")
    (when (> (length markdown-css-paths) 0)
      (insert (mapconcat 'markdown-stylesheet-link-string markdown-css-paths "\n")))
    (insert "\n</head>\n\n"
	    "<body>\n\n")
    (goto-char (point-max))
    (insert "\n"
	    "</body>\n"
	    "</html>\n"))
}}}

This does the following:

* generates a HTML 5 header instead of an XHTML header
* adds a UTF-8 charset declaration and ignores ##markdown-content-type## and ##markdown-coding-system##
* ##markdown-xhtml-header-content## is also ignored

----
MarkupModes
