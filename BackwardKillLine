{{{
;; define the function to kill the characters from the cursor 
;; to the beginning of the current line
(defun backward-kill-line (arg)
  "Kill chars backward until encountering the end of a line."
  (interactive "p")
  (kill-line 0))

;; you may want to bind it to a different key
(global-set-key "\C-u" 'backward-kill-line)
}}}
[new]
Doesn't `kill-line' already do this, when you give it a prefix argument of 0? (`C-u 0 C-k')

[new]
Yes, I've changed the code accordingly. Thanks!

[new]
I use `C-0 C-k' to do the same thing.

[new]
If you're using this to delete stuff in the minibuffer, `C-M-backspace' (command `backward-kill-sexp') is also handy. It doesn't always delete to the line beginning, but it is very simple and quick to repeat.

[new]
: Note though, that `C-M-backspace' is also usually bound to restarting X Windows, so beware.

[new]
I'd like a backward-kill-line that, if the cursor is at the beginning of the line, only erases the previous linefeed. I.e. more similar to kill-line in function. How would I achieve this? /zrajm [2008-09-21]

[new]
: You mean the <backspace> key (`DEL')? -- AaronHawley

[new]
Please try this piece of code:
{{{
(defun my-kill-line (arg) 
  "Delete the linefeed and carriage return of the previous line when point is at the beginning of the current line"
  (interactive "p")
  (let ((prev-char (char-before (point)))
        (at-beginning-of-line nil))
    (while (and (characterp prev-char)
             (or (char-equal prev-char 10)
                 (char-equal prev-char 13)))
      (setq at-beginning-of-line t)
      (backward-delete-char 1)
      (setq prev-char (char-before (point))))
    (if (and (characterp prev-char)
             (not at-beginning-of-line))
        (kill-line arg))))
}}}

[new]
I don't think Emacs Lisp has a `characterp' function.  The alternatives here are the Emacs commands available from `DEL' (backspace on most keyboards) or `C- M-^'. -- AaronHawley

----
CategoryKeys
CategoryEditing

