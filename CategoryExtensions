Extensions (using the category name from `finder-by-keyword'), are utility libraries intended to be used by programmers writing Emacs Lisp.

**These extension libraries offer no (or little) user-facing functionality.**

== Comprehensive Utility Frameworks ==

* APortableEmacsLibrary (APEL)
* [[mon-utils.el]]

== Data Structures and Types ==

* ArrayExtension -- Support for arrays, and matrixes.
* [[AVLtrees]] -- AVL tree data structures (self-balancing binary trees)
* DictionaryTrees -- Advanced dictionary data structures
* [[Heaps]] -- Heap data structures (a.k.a. priority queues)
* [[Queues]] -- Queue data structures
* RecordType -- Definition of a new type: record. A record is a set of named fields with their associated type.
* TernarySearchTrees -- ternary search tree data structures (obsolete - use [[Tries]] instead)
* [[Tries]] -- General trie data structures (including ternary search trees)

== Algorithms ==

* TaggedNFA -- Tagged non-deterministic finite state automata (generally used for regular expression matching algorithms)

== Strings ==

* StringUtils -- General string-manipulation utilities
* UcsUtils -- General utilities for Unicode characters, strings, and vectors
* [[ucs-cmds.el]] -- Create commands that insert Unicode chars

== Numbers and Mathematics ==

* [http://www.astro.princeton.edu/~rhl/skyserver/bigint.el bigint.el]
* [[Infix]]    -- Writing infix math expressions

== Sequences ==

* VectorModificationLibrary -- Functions to modify vectors

== Macros ==

* MacroUtilities -- Utilities for writing macros.

== Concurrency ==

* LaterDo -- Calling functions later, thus do some sort of fake threading

== Parsers and Lexers ==

* ElispParser -- A small parser tool written in EmacsLisp.
* ParserCompiler -- A macro that compiles Recursive Descent parsers in elisp.
* SemanticBovinator -- A flex/bison lexer and parser generator written in EmacsLisp.
* XmlParser -- Writing code which reads and manipulates XML.  Pointers to DOM, XPath, etc.

== Buffer Text ==

* ThingAtPoint -- Functions to return various kinds of Emacs Lisp entity at or near point. For example, return the Lisp symbol name nearest point.

== User Interface ==

* IncrementalRead -- support building libraries that act incrementally on input.
* LuiMode -- A Linewise User Interface
* UseCustomizeForKeyBindings -- Widget and `defcustom' code to let users use Customize for key bindings.
* GIT:emacs-lisp/tabulated-list.el -- display and interact with tables
* ButtonLockMode -- Clickable text defined by regular expression
* [[Alert]] -- Alternatives to `message'
* NavFlash -- Briefly highlight the current line
* UnicodeEnbox -- Surround a string with box-drawing characters
* AutoOverlays -- Overlays defined by regexps, automatically created, updated and destroyed as buffer is modified.
* DoReMi -- Incremental change using arrow keys or mouse wheel.

== Windows ==

* WindowEndVisible --  Find the last visible point in a window
* [https://github.com/kiwanami/emacs-window-layout window-layout.el] -- window layout manager

== Frames ==

* Lisp:frame-fns.el

== Buffers ==

* BufferUtils

== Modes ==

* GIT:emacs-lisp/easy-mmode.el -- easy definition for major and minor modes (included with Emacs)
* ModeLocal -- Causing a variable or function to have a value/behavior based on major mode.

== Networking ==

* TcpClient -- Network interface to ease the creation of network related script
* [[Websocket]] -- Emacs <nowiki>WebSocket</nowiki> client and server
* Lisp:elnode.el -- simple emacs async HTTP server

== Filesystem ==

* SubdirsToList -- Adding subdirectories to a list recursively

== Persistence ==

* [http://cedet.sourceforge.net/eieio.shtml Eieio] -- provided with Emacs (GIT:emacs-lisp/eieio.el)
* [https://github.com/sigma/pcache Pcache] -- persistent caching
* PersistentSoft -- persistent storage, returning nil on failure
* EmacsDataBase -- a flexible system for defining, accessing, modifying, summarizing, and generally playing with, a set of records.  You can view each record individually or summarized (with other records) in separate buffer. Record format (field names and their types) can be arbitrarily complex.
* TinyDb -- A mini-database, smaller than EmacsDataBase

== Security ==

* PasswordGenerator

== Project Management ==

* ProjectBufferMode

== Testing ==

* See UnitTesting

== Web APIs ==

* [https://github.com/rsanders/github-api-v3.el github-api-v3.el] -- Emacs library for the v3 GitHub API

== See Also ==

* CategoryProgrammerUtils
* CategoryCode
