The easiest way by far is to use `ctags' for ETAGS generation, as `ctags' has an <code>-R</code> option for recursing into directories. See below.

== ctags ==

 From: those who know me have no need of my name
 Subject: Re: etags help
 Newsgroups: gnu.emacs.help
 Date: 28 Jun 2001 01:13:39 GMT

 cd c:\source-root
 ctags [other-flags-if-any] -R *.hpp *.cpp *.h

If you want ETAGS output, remember to add the <code>-e</code> option, i.e.,

 ctags -e -R *.hpp *.cpp *.h

== etags ==

Here's how to create a TagFile for an entire directory tree as posted
on one of the EmacsNewsgroups:

 From: Alexander
 Subject: Re: etags help
 Newsgroups: gnu.emacs.help
 Date: Wed, 27 Jun 2001 17:51:27 GMT

win:

 cd c:\source-root
 dir /b /s *.cpp *.h *.hpp | etags --your_options -

unix

 cd /source-root
 find `pwd` | egrep 'cpp$|h$|hpp$' | xargs etags --your_options -


== Recursive etags ==
Create a [[tags file]] for all ##*.cpp *.h## files in current dir and all subdirectories:

 find .   -name "*.cpp" -print   -or   -name "*.h" -print    | etags -

[new]
Here, the 5.7 version of etags don't have the - option. So I had to do it this way:

 find .   -name "*.cpp" -print   -or   -name "*.h" -print    | xargs etags

== recursive etags: the full blooded version ==

This shell script will plough through a source tree and
produce a [[tags file]] on standard output with GNU `etags'.
(it mimics the exuberant `ctags' recursive functionality):

 for src in `find . -type f`;
 do
   ETAGS=/usr/bin/etags;
   case "${src}" in
     *.ad[absm]|*.[CFHMSacfhlmpsty]|*.def|*.in[cs]|*.s[as]|*.src|*.cc|\\
     *.hh|*.[chy]++|*.[ch]pp|*.[chy]xx|*.pdb|*.[ch]s|*.[Cc][Oo][Bb]|\\
     *.[eh]rl|*.f90|*.for|*.java|*.[cem]l|*.clisp|*.lisp|*.[Ll][Ss][Pp]|\\
     [Mm]akefile*|*.pas|*.[Pp][LlMm]|*.psw|*.lm|*.pc|*.prolog|*.oak|\\
     *.p[sy]|*.sch|*.scheme|*.[Ss][Cc][Mm]|*.[Ss][Mm]|*.bib|*.cl[os]|\\
     *.ltx|*.sty|*.TeX|*.tex|*.texi|*.texinfo|*.txi|*.x[bp]m|*.yy|\\
     *.[Ss][Qq][Ll])
           ${ETAGS} -o- "${src}";
           ;;
       *)
           FTYPE=`file ${src}`;
           case "${FTYPE}" in
               *script*text*)
                   ${ETAGS} -o- "${src}";
                   ;;
               *text*)
                   if head -n1 "${src}" | grep '^#!' >/dev/null 2>&1;
                   then
                       ${ETAGS} -o- "${src}";
                   fi;
                   ;;
           esac;
           ;;
   esac;
 done;

== Multiple languages in a project ==

If you have several languages such as C++ and python, no problem.  The
`etags' program will recognize language based on extension.  If you want
to customize this behaviour to suit your specific project, I recommend
ExuberantCtags.

== Build tags with traverselisp ==

You can build a [[tags file]] recursively in a directory tree with Lisp:traverselisp.el :

M-x traverse-build-tags-in-project

then you have just to choose the extension of file you want.

Multi extension is allowed, you can add to the prompt more than one ext

separated with space ==> .el .py etc...


----
CategoryExternalUtilities
