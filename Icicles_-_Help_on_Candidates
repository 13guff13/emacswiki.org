: [[image:iciclesimage]]

|| *Previous:*  [[Icicles - Sorting Candidates]] || '''[[Icicles]]''' || IciclesIndex || *Next:* [[Icicles - Multi-Commands]] ||

----


== Help on Candidates ==

General '''Icicles''' help is available at any time during [[minibuffer]]
input, by hitting '''`##C-?##'''' (`icicle-minibuffer-help').  This section
is about specific help on ''individual'' completion
candidates instead.

When you [[Icicles - Cycling Completions|cycle]] among candidates for input, help on the current candidate is shown in the [[mode line]], provided [[user option]] '''`<tt>[[Icicles - Customization and General Tips#icicle-help-in-mode-line-flag|icicle-help-in-mode-line-flag]]</tt>'''' is non-‘nil’.  This makes it easy to see what each candidate means or does.  Similarly, this help is shown whenever your input is completed entirely to one of the
candidates.  If you use library '''LaCarte''' (<tt>[[lacarte.el]]</tt>), then mode-line
candidate help is even available for menu-item candidates.

Typically, this candidate mode-line help is the first line of the
candidate's [[doc string]], but alternative help sources can be used
(and a doc string is not available for some kinds of candidates).

To see more help than what is shown in the mode-line, for each candidate or any given candidate as you
cycle, press and
hold the Control key while using the vertical arrow keys, for [[prefix completion]], or the `prior' and `next' keys (often labeled '''Page Up''' and '''Page Down'''), for [[apropos completion]].  To
show help on any individual candidate, just navigate to it
(by cycling or using [[completion]]), and hit '''`C-M-RET''''  -- or
press Control and click it with `mouse-2' ('''`C-M-mouse-2'''') in [[buffer]]
`*Completions*'.

For example, if you use standard [[command]] `switch-to-buffer' and
you cycle among candidate buffer names using `C-M-end' (prefix completion), then the [[major mode|major]] and
[[minor mode]]s of each candidate buffer are described in buffer
`*Help*' as the buffer name appears in the minibuffer.

By default, you need not use the Meta key for candidate help; the
same bindings work with just the Control key.  So, for example,
you can click `C-mouse-2' to get help on a candidate or use
`C-next' to cycle candidate help information.  
However, '''Icicles''' [[multi-command]]s often have a different
use for these bindings that do not include Meta.  It is only by
default, when a multi-command has not bound a more specific action
to the plain Control bindings, that you can use the sans-Meta
bindings for help on candidates.

For example, '''Icicles''' binds `M-x', `C-x b', and `C-x C-f' to
multi-commands that execute a command, switch to a buffer, and
open a file, respectively.  If you use only the Control key,
without the Meta key, when choosing candidates for these commands,
you will not get help on the candidates; instead, you will execute
a candidate command, switch to a candidate buffer, and open a
candidate file, respectively.  For more information,
see [[Icicles - Multi-Commands]].




[:CandidateHelpAsApropos]
=== Use Candidate Help Like You Use Emacs Command `apropos' ===

You can use this candidate-help functionality as a kind of expanded `apropos'
function.  As an example, type `C-h v out', then type `S-TAB' to
display all [[variable]]s that match "<code>out</code>" (in buffer `*Completions*').
Then use `C-M-next' repeatedly to cycle among those variables, displaying
their documentation in the `*Help*' buffer as they appear one by one
in the minibuffer.  Or click individual variable names with
`C-M-mouse-2', to display their documentation.

The standard `apropos' commands show only the
first doc-string line. '''Icicles''' shows that automatically in the mode-line, and it shows the complete doc string on demand when you use `C-M-'.
This can be handy, for instance, when you are unsure which of
several similarly named candidates to choose.  Seeing a
candidate's documentation along with its name can help you decide.

You can click links in buffer `*Help*' to look up more info,
and then resume `C-M-next' where you left off, all without leaving
completion.

This also works with menu items, if you load library
'''<tt>[[lacarte.el]]</tt>''' (see '''LaCarte''') as well as '''Icicles'''.  As you cycle among
matching menu items, the corresponding command documentation is
displayed in `*Help*'.


If you also use library <tt>[[help-fns+.el]]</tt> (Emacs 22 or later) or
library <tt>[[help+.el]]</tt> (or <tt>[[help+20.el]]</tt> for Emacs 20), then you can use these '''Icicles'''
features with additional help commands such as `describe-file'
('''`C-h M-f''''), `describe-keymap'
('''`C-h M-k''''), `describe-command' ('''`C-h C-c''''), `describe-option' ('''`C-h o''''), and `describe-option-of-type'.

'''`C-h C-o'''', which is bound by those libraries to command
`describe-option-of-type', is bound in ''Icicle'' mode to
'''`icicle-describe-option-of-type'''' instead, which uses
multi-completion and is therefore more powerful.
See [[Icicles - Multi-Completions]].  `C-h C-o' describes a [[user option]]
that is of a particular custom type: you match the type and the
option name at the same time.

As an example, try `C-h C-o ici C-M-j string S-TAB' (`C-M-j' just
separates the option name and type parts).  In buffer
`*Completions*', you see all options whose name contains `ici' and
whose type (or an inherited type) definition contains `string'.  That means not only options that are strings, but options that are
lists that contain string elements, options that can be a string
or something else, and so on.

Browse the doc for these options, one after the other, using
`C-M-next'.  This is a way to see, at the same time, the
documentation for individual options (in buffer `*Help*') and the
types their values must satisfy (in `*Completions*').

And remember that you can leave the option-name part or the type
part empty, to see all options of a certain type or options of all
types with a certain name pattern.  For example, `##C-h C-o .* C-M-j
string S-TAB##' or `C-h C-o ici S-TAB'.

And you can of course use
''[[progressive completion]]'' as well, to match, say, a type that has a
`string' component and an `integer' component -- or whatever.  The type part of a completion candidate
is an entire `defcustom' type, so its `##:tag##' values are also
included.  This means that you can also match against the
descriptive text (tag) that appears next to a value component in
[[Customize]].

`C-h C-o' is a powerful way to browse
options and their documentation. See the doc string of `icicle-describe-option-of-type' for more possibilities.

Candidate help (prefix `C-M-') is available for these types of completion candidates, by default:

* menu items
* [[command]]s and other functions
* [[keymap]] variables (if `describe-keymap' is defined -- see HelpPlus)
* [[user option]]s and other [[variable]]s
* [[face]]s
* fonts
* command abbreviations (using `apropos-command' for matches)
* [[plist|property lists]] (plists)
* [[buffer]]s
* files

Starting with Emacs 22, if the candidate names an image file and
you have command-line tool `exiftool' installed and in your
`##$PATH##' or `exec-path', then EXIF information (metadata)
about the image is included.  See standard Emacs library ##image-dired.el## for
more information about `exiftool'.


If the same candidate names a function, a variable, and a face, or
any two of these, then all such documentation is shown (Emacs 22
and later).

In addition to the candidate types listed above, any command that uses completion can define its own
candidate help action function and bind it to
'''`icicle-candidate-help-fn''''.

A command can also provide its own
mode-line and tooltip help for any individual candidate.  See [[Icicles - Candidates with Text Properties#StartWithPropertizedString|Applying Text Properties to a Candidate String]].

For more information about the types of candidates and their
associated documentation, see the documentation for command '''`icicle-help-on-candidate''''.
This command is bound to '''`C-M-RET'''', '''`C-M-mouse-2'''', `<code>C-help</code>', `<code>C-M-help</code>', `<code>C-f1</code>', and `<code>C-M-f1</code>'.  When no specific action is defined for candidates, it is also bound to `C-RET' and `C-mouse-2'. You
can use this to get help on any completion candidate during
completion.  See also the related help-cycling commands, `icicle-next-candidate-per-mode-help',
`icicle-help-on-next-apropos-candidate', and so on, bound to '''`C-M-down'''', and '''`C-M-up'''',
'''`C-M-next'''', '''`C-M-prior'''', '''`C-M-end'''', and '''`C-M-home''''.

If you use one-[[buffer]]-per-[[frame]] (`pop-up-frames' non-`nil'), then displaying `*Help*' in one
frame might interfere with viewing `*Completions*' in another.  For
that reason, the `*Completions*' frame is raised to the front.
Also, if user option '''`<tt>[[Icicles - Customization and General Tips#icicle-Completions-frame-at-right-flag|icicle-Completions-frame-at-right-flag]]</tt>'''' is
non-`nil' (default value: `t'), then the `*Completions*' frame is moved to the right, out
of the way, whenever you access help on a candidate.




[:OtherAproposCommands]
=== Other Icicles Apropos Commands ===

There are also '''Icicles''' replacements for the usual `apropos'
commands.  They act similarly, but they also let you see the list
of [[regexp]] matches incrementally (as with all '''Icicles''' commands),
using `S-TAB'.  If you also use my library '''<tt>[[apropos-fn+var.el]]</tt>''',
then these '''Icicles''' commands take advantage of the apropos
enhancements in that library.  

The '''Icicles''' apropos commands
are: `icicle-apropos', `icicle-apropos-command',
`icicle-apropos-function', `icicle-apropos-option', 
`icicle-apropos-variable', and `icicle-apropos-zippy'.

Another feature of these '''Icicles''' commands is that when more than
one type of object can be a candidate, candidates of a certain
type are shown in buffer `*Completions*' using face
`icicle-special-candidate'.  For example, command `icicle-apropos'
shows function names as special candidates, to help you
distinguish them from variable names.

In addition, '''Icicles''' commands `icicle-doc', `icicle-fundoc', and
`icicle-vardoc' provide the functionality of standard Emacs
command `apropos-documentation', but with additional features -- see [[Icicles - Multi-Completions]].    In addition, you can use command
`icicle-plist' to find symbols with certain property-list keys and
values, and you can use command `icicle-describe-option-of-type' (bound to `C-h C-o')
to find user options of a certain type.

Command '''`icicle-customize-apropos-options-of-type'''' is similar to
`icicle-describe-option-of-type', in that it lets you specify the
type of matching options.  But instead of describing an option, it
opens [[Customize]] for all options of the specified type that match
your input regexp.  (Unlike `icicle-describe-option-of-type',
however, it is not a multi-completion command: you first specify
the type, then the regexp to match.)

One difference between '''Icicles''' apropos commands and the standard
commands, besides the '''Icicles''' enhancements already described, is
that (starting with Emacs 22) the standard commands let you input a set of ''keywords'', as an
alternative to inputting a regexp.  '''Icicles''' apropos commands do
not allow for keyword input, as such.  However, '''Icicles'''
[[progressive completion]] provides a more powerful way to search with multiple keywords (in
fact, multiple regexps) -- you can of course use it with the
'''Icicles''' apropos commands.  Also, there are several problems with
the standard Emacs apropos commands, with respect to interpreting
your input as either a set of keywords or a regexp. Because they allow two very different syntaxes as input, the
standard apropos commands are
forced to  make some limiting compromises for keyword searching.

'''See Also:''' [[Icicles - Progressive Completion]].


----



|| *Previous:*  [[Icicles - Sorting Candidates]] || '''[[Icicles]]''' || IciclesIndex || *Next:* [[Icicles - Multi-Commands]] ||


DrewsElispLibraries referenced here: Lisp:lacarte.el, Lisp:apropos-fn+var.el, Lisp:icicles.el

CategoryCommands 
CategoryCompletion
CategoryRegexp
CategoryDocumentation
CategoryHelp
CategoryProgrammerUtils
CategoryCode




