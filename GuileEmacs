Guile Emacs is a variant of Emacs which is integrating the
[[Guile]] extension language in addition to EmacsLisp so to
provide a better programming environment for both Emacs
users and Guile users.  Guile is in fact [[Scheme]], a much simpler and cleaner
dialect of Lisp than CommonLisp.

Some original work was by KeisukeNishida and was based on Emacs 20.7 and Guile 1.5.  The last work on this project was 2000-06-01.  The goal was to support both Guile and EmacsLisp.  The project's
aim was not intended to rip out EmacsLisp from the guts of Emacs and replace
it with Guile.

You can find more information at
http://sourceforge.net/projects/gemacs/

Matthias Neubauer and Michael Sperber studied the possibility of automatically translating Emacs Lisp Code into Scheme.  See DownWithEmacsLisp.

On 2001-11-03, NeilJerram was working on an EmacsLisp reader.  A
posting [http://mail.gnu.org/pipermail/guile-devel/2001-November/004136.html] to guile-devel@gnu.org on showed an elisp
reader reading 3279 lines ("wc -l") of elisp code already.  He says: "I think progress beyond this point basically means implementing
multilingual and multibyte strings properly for Guile.  Which is a _lot_
of work and requires IMO a very clear plan for Guile's role with
respect to Emacs."

KenRaeburn started a project as early as 1999 to replace Lisp with Guile in Emacs starting at the very lowest levels, i.e., object representation, allocation, GC; with evaluating Scheme code coming later.  Working with EmacsFromCVS he could isolate the implementation to some of the simpler Lisp types (those that could most easily be shared with Scheme) from the rest of the Emacs code.  Even if the project succeeded in getting Guile into Emacs, the handling of the current evaluator code was an open issue.

On 2002-07-16, there was a discussion started on [[emacs-devel]] about [http://lists.gnu.org/archive/html/emacs-devel/2002-07/msg00589.html emacs and guile].

By 2006-01-03, according to Ken "Some stuff does work, actually. Non-tty displays don't".  This was for reasons that "have less to do directly with Guile than with the fact that the Guile library isn't unexec-safe".  Consequently, Ken was not doing the unexec step.  Guile Emacs in a terminal window has a "shell mode, browses directories, does font-lock coloring of C source files, etc."

As of 2009-06-11, Ken has provide an updated snapshot of the work.

To subscribe to a mailing list about about Guile Emacs send a blank messsage to
mailto:guile-emacs-subscribe@sources.redhat.com

[new]
Seems GuileEmacs lacks a clear goal and clear deliverable designations. How about these (all points must be met):
# Having an [[Emacs]] Editor (an executable built from a set of C source files) with [[Scheme]] as an extension language provided by [[Guile]].
# The possibility to run any EmacsLisp code on GuileEmacs without any rewritting.
# Clearly make the distinction between Scheme code and Emacslisp code, encouraging the development of Scheme programs for GuileEmacs.

Deliverables:
For Goal 1: The GuileEmacs Editor integrating the [[Guile]] library for extension and nothing else (no EmacsLisp extension provided natively)
For Goal 2: An EmacsLisp compiler (written in Scheme) to produce GuileEmacs byte code.
Goal 3 is achieved by the fact that you cannot interpret EmacsLisp code using GuileEmacs. You must recompile EmacsLisp code targetting GuileEmacs.
With these deliverables, we can have a GuileEmacs, interpreting pure [[Scheme]] code only and having access to all the extraordinary set of EmacsLisp libraries.

As these goals can't be achieved in a few months, 
OldEmacs will continue to evolve. People will use GuileEmacs and code it in Scheme only if they have all features of OldEmacs and access to all EmacsLisp libraries. -- JeromeRadix

----
CategoryExtensionLanguage
EmacsImplementations
