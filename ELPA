[[zh:ELPA_(中文)]]
ELPA is the *Emacs Lisp Package Archive*, originally by TomTromey, now included in Emacs 24 after contributions from others.

== ELPA  ==
//“Our goal is to make it simple to install, use, and upgrade Emacs Lisp packages. We supply// ##package.el## //a simple package manager for Emacs, and a repository of pre-packed Emacs Lisp code.”//

##package.el## is a package manager included in Emacs since version 24. It includes a built-in repository of FSF sanctioned Emacs packages, also called ELPA and found at [[http://elpa.gnu.org/|ELPA repository]].

The Emacs version of ##package.el## supports multiple repositories.  You can use the GNU ELPA plus other repositories like this:

create a .emacs file in your ~ folder and add:

{{{
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))
}}}

Any combination of repositories is fine.  You should probably always include GNU's core repository but it's not required.

Package archives may also be [[LocalElpaArchive|local to your machine]].

=== Adding transactionally ===
You can also do it transactionally.

Adding [[Marmalade]]:

  (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))

Adding [[MELPA]]:

  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"))

=== Using customize ===

You can also customize `package-archives'. Try:

{{{
M-x customize-variable [RET] package-archives [RET]
}}}

=== Contributing to the official repo ===

Package authors may wish (or be invited) to contribute their packages to the official ELPA respository. The first step is making sure you've completed your FSF copyright assignment. Then visit the [[https://savannah.gnu.org/|Savannah GNU website]], and create an account. Once the account is created, you can request inclusion in the "emacs" group. Once that is granted, clone the ELPA repository as shown on [[https://savannah.gnu.org/git/?group=emacs|this page]], using the instructions from the "Member clone" section. Be sure to read the README file in the repository! You should now be able to push to the official repo.

==Note On Usage==

This is my first edit, so bear with me.

I didnt see anything here about actually using the program. After setting the variable `package-archives' via the intstructions above, you want to refresh, via:
`M-x package-refresh-contents'

Then to install a program, for example `geiser', use:
 `M-x package-install' [RET] `geiser' 

*note that geiser requires the marmalade repo.

Another hint, if the installed package doesn't seem to work, is to confirm that the program actually installed via `package-list-packages', seach for the package name, and see if it is said to be installed on uninstalled. The reason I added this step was that I had use install a few times before it actually was verified as installed, after which it worked. During each installation, I got a question about saving the contents to a local file, and Im not sure what that was about. But in the end, I was able to get this running.

== How Packages work in Emacs 24 ==

[[http://www.gnu.org/software/emacs/manual/html_node/elisp/Packaging-Basics.html#Packaging-Basics|The Elisp Manual describes how the package system is initialized]]:
: Whenever Emacs starts up, it automatically calls the function `package-initialize' to load installed packages. This is done after loading the init file and abbrev file (if any) and before running `after-init-hook' (see Startup Summary). Automatic package loading is disabled if the user option package-enable-at-startup is nil.

So packages are initialized //AFTER// the init.el is loaded.  This means you should //NOT// put package specific initialization into your init.el except in a few ways:

* customization variables for a package are fine, they can be set before a package has loaded
* auto-mode-alist changes can be made in a way that does not require the package to be loaded before they are setup:

{{{
    (add-to-list 'auto-mode-alist '("\\.gradle" . groovy-mode))
}}}

* mode specific customization of a package could go in a package hook which can be set before the package is loaded, for example:

{{{
    (add-hook 'groovy-mode-hook (lambda () (setq tab-width 4)))
}}} 

* key bindings can also be done in such a way to not cause init failure, even if the package is not loaded:

{{{
    (global-set-key
     "\M-?"
     (lambda ()
       (interactive)
       (call-interactively 'magit-status)))

    (global-set-key (kbd "C-'")     'shell-switcher-switch-buffer)
}}}
* some package specific initialization can be done with eval-after-load, see [[ELPA#eval-after-load|eval-after-load]]

* it could be easier just to move package-initialize to another point during startup so you can (require) ELPA packages;
this takes care of a lot of the described issues:
{{{
    ;; basic initialization, (require) non-ELPA packages, etc.
    (setq package-enable-at-startup nil)
    (package-initialize)
    ;; (require) your ELPA packages, configure them as normal
}}}

* if all these tricks don't work you can still postpone config until after the packages have been loaded like this:

{{{
    (add-hook 'after-init-hook 'cycbuf-init)
}}}

=== Using the `after-init-hook' for package config ===

Some people think that using //after-init-hook// seems like a last resort because it may force the load of the package you're referring to (thus slowing down Emacs). Others point out that moving your whole initialization to after ELPA is loaded makes things easier to use. 

You can do that by putting this in your init file:

{{{
(add-hook 'after-init-hook (lambda () (load "<real init file>")))
}}}

and moving all your normal init to the ##<<real init file>>##. 

[[NicFerrier#PackagesForConfig|See also PackagesForConfig]]

[:eval-after-load]
=== Using `eval-after-load' for package config ===

Using `eval-after-load' is one way of achieving fine grained configuration per-package. It falls back gracefully if the package is not present. 

The following code is an example of customizing a hypothetical major mode called abcd-mode using eval-after-load:

{{{
    (eval-after-load "abcd-mode" ; <-- "abcd-mode", not 'abcd-mode
      '(progn
         (setq-default abcd-basic-offset 7) ; setting some option
         (add-to-list 'abcd-globals-list "console") ; appending to a list option
         (add-hook 'abcd-mode-hook 'prepare-some-abcd-soup) ; things to do for abcd mode buffers
         (define-key abcd-mode-map (kbd "C-c C-c") 'play-some-abcd-song) ; add some key binding for abcd mode
     ))
}}}

And here is an example for a hypothetical global minor mode called broccoli mode.

{{{
    (eval-after-load "broccoli-autoloads" ; <-- "broccoli-autoloads", not "broccoli"
      '(progn
         (if (require 'broccoli nil t)
             (progn
               (broccoli-mode 1) ; Turn on Broccoli global minor mode if broccoli-autoloads.el doesn't do it.
               (setq-default broccoli-how 'steamed) ; set some option.
               (add-to-list 'broccoli-additional-stuff 'salt) ; add to a list option.
               )
           (warn "broccoli is not found."))))
}}}

=== ELPA policy ===

ELPA policy for Emacs 24 was discussed here: http://thread.gmane.org/gmane.emacs.devel/132634/focus=132640

== How packages work in Emacs 23 ==

You can make packages work in Emacs 23, you need to add something like this to your //init.el//:

{{{
(require 'package)
;; Any add to list for package-archives (to add marmalade or melpa) goes here
(add-to-list 'package-archives 
    '("marmalade" .
      "http://marmalade-repo.org/packages/"))
(package-initialize)
}}}

In order to use package.el in Emacs 23, the following package.el (link found on github) version is needed:
http://bit.ly/pkg-el23 (source of info:https://github.com/technomancy/package.el)

== Other Repositories ==

AndrewHyatt has written an [http://code.google.com/p/elpa-on-appengine/ implementation of ELPA for AppEngine], written in Go.  It is not yet running publicly yet, as of April 2013.

----
CategoryCode CategoryPackaging
