This page is about using '''[[Isearch+]]''', that is,  library '''<tt>[[isearch+.el]]</tt>''', to dynamically add and remove any number of Isearch filter predicates while searching incrementally.  This feature is available starting with Emacs 24.3.

The predicate that is the value of '''`isearch-filter-predicate'''' is
''advised'' by additional predicates that you add, creating a complex suite of predicates that act together.

This lets you search only given zones of text, where those zones can be defined on the fly in complex ways that are easy to specify.

This is opposite to the feature provided by companion library '''<tt>[[isearch-prop.el]]</tt>''', which also lets you constrain search to zones of text.  When you use that library you first define the zones, and then search is limited to them.  With dynamic filtering, search is not limited a priori, to any zones, but when a search hit is found the filters are applied to see if it should be retained as a search hit. This is ''a posteriori'' filtering, whereas '''<tt>[[isearch-prop.el]]</tt>''' uses ''a priori'' filtering. Each has its advantages.

The following commands are available with '''[::Isearch+]''', all on prefix key '''`##M-?##'''':

* '''`##M-? &##'''' (`isearchp-add-filter-predicate') adds a filter predicate, ''AND''-ing it as an additional `:after-while' filter.

* '''`##M-? |##'''' (`isearchp-or-filter-predicate') adds a filter predicate, ''OR''-ing it as an additional `:before-until' filter.

* '''`##M-? ~##'''' (`isearchp-complement-filter') ''complements'' the current filter.  It either adds an `:around' filter that complements or it removes an existing top-level complementing filter.

* '''`##M-? -##'''' (`isearchp-remove-filter-predicate') ''removes'' the last added filter predicate.

* '''`##M-? !##'''' (`isearchp-set-filter-predicate') ''sets'' the overall filter predicate (advised `isearch-filter-predicate') to a single predicate.

* '''`##M-? 0##'''' (`isearchp-reset-filter-predicate') ''resets'' `isearch-filter-predicate' to its original (default) value.

* '''`##M-? s##'''' (`isearchp-save-filter-predicate') ''saves'' the current filter-predicate suite for subsequent searches.  Unless you save it, the next Isearch starts out from scratch, using the default value of `isearch-filter-predicate'.

* '''`##M-? n##'''' (`isearchp-defun-filter-predicate') ''names'' the current suite of filter predicates, creating a named predicate that does the same thing.  With a prefix arg it can also set or save (i.e., do what `##M-? !##' or `##M-? s##' does).

* '''`##M-? M-h##'''' (`isearchp-show-filters') echoes the current suite of filter predicates (advice and original, advised predicate).

* '''`##M-? @##'''', '''`##M-? <##'''', and '''`##M-? >##'''' (`isearchp-near', `isearchp-near-before', and `isearchp-near-after') constrain searching to be ''near'' (within a given distance of) another search pattern.  You are prompted for the pattern and the distance.  You can also use functions `isearch-near-predicate', `isearchp-near-before-predicate', and `isearchp-near-before-predicate' to define your own nearness predicates, which incorporate particular patterns and distances.  You can then simply add such a predicate using `##M-? &##' (no prompting for pattern or distance).

When you use one of these commands that adds a filter predicate as advice to `isearch-filter-predicate' you can be prompted for two things: (1) a name for the predicate and (2) text to add to the Isearch prompt as a reminder of filtering.  Two user options control this prompting:

* '''`isearchp-prompt-for-filter-name'''' says whether to prompt you always, never, or only when the predicate that you provide is not a symbol (it is a lambda form).  The last of these is the default behavior.  If you are prompted and provide a name, you can use that name with `##M-? -##' to remove that predicate.

* '''`isearchp-prompt-for-isearch-prompt-prefix'''' says whether to prompt you for a prefix to add to the Isearch prompt. You are prompted by default, but if you don't care to see such a prompt prefix and you don't want to be bothered by prompting, you can customize this to skip prompting.

In addition, whatever the value of these options, when you add a filter predicate you can override the option values by using a [[prefix argument]].  A non-positive prefix arg overrides the option for name prompting, and a non-negative prefix arg overrides the option for prompt-prefix prompting.  (So zero, e.g., `M-0', overrides both.)





----

'''See Also:'''  '''[[Isearch+]]'''




----

CategorySearchAndReplace
