Page for PlannerMode user RaymondZeitler.

I use Emacs.  I've gone from Brief to Zeus with a tiny diversion to Vedit before switching on July 10, 2000. I'm currently running v23.2.1 on Windows XP Professional SP3.

My background is electrical engineering, but I spend more time designing photomasks and surface acoustic wave devices, and writing code in Visual Basic, Basic, NTScript, VBScript, Fortran and Perl.  My specialty is in applying the techniques of computer automation to design processes, data processing and computer maintenance.  Emacs is also my HTML editor.

I also sometimes use PlannerMode to organize my many endless work projects.  I originally used PlannerMode for a personal journal and a work plan, so I came up with a quick and dirty way of having two planner-directories.  I called this "select-planner-directory" and I posted the snippet in PlannerModeContrib.  "select-planner-directory" was intended to work with the version of Planner that's based on emacs-wiki.

On June 8, 2010 I upgraded to Emacs 23.2, and I changed my .emacs to remove unnecessary packages (like gnuserv).  My Planner settings reside in a separate .plan file.  In addition to Planner settings, .plan contains a new version of "select-planner-directory", which I named "select-planner-project".

I read the following Emacs mailing lists regularly:

 - http://lists.gnu.org/mailman/listinfo/help-emacs-windows
 - https://mail.gna.org/listinfo/planner-el-discuss
 - https://mail.gna.org/listinfo/muse-el-discuss
 - http://lists.nongnu.org/mailman/listinfo/emacs-wiki-discuss (deprecated).

I am an Officer for an IEEE Section in Region 1.

I can be reached at r.zeitler&#64;ieee&#46;org.  But questions or comments that pertain to Emacs or Planner should be posted to one of the above lists.

My .emacs:
<pre>
;;; .emacs for version 23.2+ Raymond Zeitler's work computer.
;; Time-stamp: <2010-06-09 16:32:44 rayz>
;;
(setq initial-frame-alist '((top . 0) (left . 285)
			    (width . 135) (height . 68)
			    (cursor-type . bar)
			    (font . "-outline-Bitstream Vera Sans Mono-normal-r-normal-normal-12-90-96-96-c-70-iso8859-1")))
(setq frame-title-format '("Emacs-23.2: %b" (buffer-file-name ": %f")))
;; Always end a file with a newline
(setq require-final-newline t)
(setq printer-name "LPT2")
(add-hook 'write-file-hooks 'time-stamp)

(load "c:/emacs-23.2/mylisp/csrshp")
(load "c:/emacs-23.2/mylisp/fill-mod")
(load "c:/emacs-23.2/mylisp/msc.el")
(load "c:/emacs-23.2/mylisp/m2c.el")
(load "c:/emacs-23.2/mylisp/remcr.kbm")
(load "c:/emacs-23.2/mylisp/cpr.kbm")
(load "c:/emacs-23.2/mylisp/stp2scr.kbm")
(load "c:/emacs-23.2/mylisp/rep2csv.kbm")
(load "c:/emacs-23.2/mylisp/exeln")
(load "c:/emacs-23.2/mylisp/unfill.kbm")
(load "~/.abbrev_defs")

(load "c:/emacs-23.2/site-lisp/patn-insert")

(require 'hfyview)
(setq hfyview-quick-print-in-files-menu t)

;; Function to insert the current date
(defun insert-date-and-time ()
  "Insert the date and time into the current buffer."
  (interactive)
  (insert (format-time-string "%Y-%m-%d" (current-time))))

(defun shellfn ()
  "Invokes the shell using the current buffer file name as a parameter."
  (interactive)
  (shell-command (concat "start " (buffer-file-name))))


;;; Keybindings
(global-set-key [f6] 'query-replace-regexp)
(global-set-key [f5] 'nonincremental-re-search-forward)
(global-set-key [S-f5] 'nonincremental-repeat-re-search-forward)
(global-set-key [C-tab] 'next-buffer)
(global-set-key [C-S-tab] 'previous-buffer)
(global-set-key "\C-cx" 'exeln)
(global-set-key "\C-cc" 'shellfn)
(global-set-key [M-q] 'fill-region-or-paragraph)
(global-set-key "\C-cd" 'insert-date-and-time)
(global-set-key "\C-cf" 'find-file-at-point)
(global-set-key "\C-ch" 'hfyview-buffer)
(define-key function-key-map [C-kp-home] [?\M-<])
(define-key function-key-map [C-kp-end] [?\M->])
; The following is from Francis Litterio <franl@world.std.com>
(global-set-key [S-left] #'(lambda () (interactive) (scroll-left 1)))
(global-set-key [S-right] #'(lambda () (interactive) (scroll-right 1)))

;;; Modes
(autoload 'visual-basic-mode "visual-basic-mode" "Visual Basic mode." t)
(autoload 'dos-mode "dos" "Edit Dos scripts." t)
(load "c:/emacs-23.2/nxhtml/autostart.el")
(column-number-mode t)
(abbrev-mode t)
(tool-bar-mode nil)
(global-font-lock-mode 1)
(delete-selection-mode t)
(global-auto-revert-mode 1)
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'text-mode-hook 'flyspell-mode)

(setq auto-mode-alist (append '(
				("\\.\\(frm\\|bas\\|asp\\|vbs\\|wsc\\|cls\\)$" . visual-basic-mode)
                                ("\\.plan$" . emacs-lisp-mode)
				("\\.\\(dev\\|dxf\\|str\\|ebc\\|mat\\|and\\|stp\\|scr\\|csv\\|pat\\|mmm\\|msk\\)$" . fundamental-mode)
				("\\.\\(bat\\|cmd\\)$" . dos-mode)) auto-mode-alist))

;; Ispell addition
(setq ispell-dictionary-alist
      '((nil "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil raw-text-dos)
        ("american" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B")
         nil raw-text-dos)
        ("british" "[A-Za-z]" "[^A-Za-z]" "[']" nil
         ("-B" "-d" "british") nil raw-text-dos)
        ("english" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B")
         nil raw-text-dos)))

(load "C:/Emacs-23.2/RZHome/.plan")

(server-start)

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(column-number-mode t)
 '(inhibit-startup-screen t)
 '(major-mode (quote text-mode))
 '(printer-name "LPT2")
 '(read-quoted-char-radix 10)
 '(require-final-newline t)
 '(truncate-lines t))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
</pre>

My .plan:
<pre>
;;; .plan --- Initialize planner-mode.
;; Time-stamp: <2008-06-02 12:34:05 rayz>
;; 
(add-to-list 'load-path "C:/Emacs22/remember-2.0")
(add-to-list 'load-path "C:/Emacs22/planner-3.42")
(add-to-list 'load-path "C:/Emacs22/muse-3.12/lisp")
(require 'planner)
(require 'planner-diary)
(require 'planner-multi)
(require 'remember-planner)
(setq planner-diary-use-diary t)
(planner-diary-insinuate)
(setq planner-carry-tasks-forward 0)
(setq planner-reverse-chronological-notes nil)
(setq planner-tasks-file-behavior 'close)
(setq planner-tasks-never-suppress-fixing-flag t)
(setq remember-handler-functions '(remember-planner-append))
(setq remember-annotation-functions planner-annotation-functions)

(setq calendar-latitude 99.9)
(setq calendar-longitude 99.9)
(setq calendar-location-name "MyTown, CT")
(setq calendar-timezone -300)
(setq calendar-standard-time-zone-name "EST")
(setq calendar-daylight-time-zone-name "EDT")
(setq planner-diary-include-all-output-flag t)
(setq planner-day-page-template "<lisp>(planner-diary-entries-here)</lisp>\n\n* Tasks\n\n\n* Schedule\n\n\n* Notes")
(planner-insinuate-calendar)
(planner-install-extra-task-keybindings)

(define-key planner-mode-map [tab] nil)
(define-key planner-mode-map [(control ?i)] nil)
(define-key planner-mode-map "\C-c\C-n" nil)
(define-key planner-mode-map "\C-c\C-t\C-n" nil)
(global-set-key " p" 'select-planner-project)
(global-set-key (kbd "\C-c\C-t\C-n") 'planner-create-task-from-note)
(global-set-key (kbd "\C-c\C-n\C-t") 'planner-create-note-from-task)
(global-set-key (kbd "<f9> r") 'remember)

;; These settings are for select-planner-project...
(setq spp-planner-personal-project "Journal")
(setq spp-planner-work-project "Plans")
(setq spp-save-buffers-before-kill t)


(setq planner-project "Plans") ; default project is for work.
(setq muse-project-alist
      '(("Plans"        ;; use value of `planner-project'
         ("C:/jrnl/Work"           ;; where your Planner pages are located
          :major-mode planner-mode
          :visit-link planner-visit-link)

         ;; This next part is for specifying where Planner pages
         ;; should be published and what Muse publishing style to
         ;; use.  In this example, we will use the XHTML publishing
         ;; style.

         (:base "planner-xhtml"
                ;; value of `planner-publishing-directory'
                :path "C:/JOBS/Plans"))
	("Journal"
	  ("C:/jrnl/PERSONAL/muse"
          :major-mode planner-mode
          :visit-link planner-visit-link)
         (:base "planner-xhtml"
                ;; value of `planner-publishing-directory'
                :path "C:/jrnl/PERSONAL/pub"))))

(defun select-planner-project (&optional arg)
  "Change `planner-project' to one of two different projects,
such as personal project and a professional project.  Use
\\[universal-argument] to set `planner-project' to
`spp-planner-personal-project'.  Otherwise set it to
`spd-planner-work-project'.  Setting
`spp-save-buffers-before-kill' forces a save of all planner
buffers before killing them.  If nil, user is prompted before
unsaved buffers are killed."
  (interactive "*P")
  (let ((spp spp-planner-work-project))
    (if arg
	(setq spp spp-planner-personal-project))
    (if (eq spp planner-project)
	(message "Planner is already using %s." spp)
      (if spp-save-buffers-before-kill
	  (planner-save-buffers))
      (spp-kill-buffers)
      (setq planner-project spp)
      (message "Planner is switching to %s." spp)
      (plan))))

(defun spp-kill-buffers ()
  "Kill all planner buffers.
Copied from `planner-save-buffers'."
  (interactive)
  (let ((buffers (delq nil
                  (mapcar
                   (lambda (buf)
                     (with-current-buffer buf
                       (when (and (planner-derived-mode-p 'planner-mode)
                                  (planner-page-name))
                         buf)))
                   (buffer-list)))))
    (while buffers
      (when (buffer-live-p (car buffers))
        (kill-buffer (car buffers)))
      (setq buffers (cdr buffers)))))

(message "Loaded: %s" (buffer-file-name))
</pre>

----
CategoryHomepage
