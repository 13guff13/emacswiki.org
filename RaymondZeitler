Page for PlannerMode user RaymondZeitler.

I use Emacs.  I've gone from Brief to Zeus with a tiny diversion to Vedit before switching on July 10, 2000. I'm currently running v22.0.50.1 on Windows 2000 Professional SP4.

My background is electrical engineering, but I spend more time designing photomasks and surface acoustic wave devices, and writing code in Visual Basic, Basic, NTScript, VBScript, Fortran and Perl.  My specialty is in applying the techniques of computer automation to design processes, data processing and computer maintenance.  Emacs is my HTML editor.

I am an Officer for an IEEE Section in Region 1.

I use PlannerMode to maintain a Personal Journal.  But I found it to be such a cool tool, I decided to use it to organize my many endless work projects.  So I came up with a quick and dirty way of having two planner-directories.  I called this "select-planner-directory" and I posted the snippet in PlannerModeContrib.  "select-planner-directory" was intended to work with the version of Planner that's based on emacs-wiki.

Recently I upgraded to Emacs 22 and the muse-based Planner.  I changed my .emacs completely, and put my Planner settings into .plan.  In addition to Planner settings, .plan contains a new version of "select-planner-directory", which I named "select-planner-project".

I read the following Emacs mailing lists regularly:

 - http://lists.gnu.org/mailman/listinfo/help-emacs-windows
 - https://mail.gna.org/listinfo/planner-el-discuss
 - https://mail.gna.org/listinfo/muse-el-discuss
 - http://lists.nongnu.org/mailman/listinfo/emacs-wiki-discuss (deprecated).

I can be reached at r.zeitler&#64;ieee&#46;org .  But questions or comments that pertain to Emacs or Planner should be posted to one of the above lists.

My .emacs:
<pre>
;;; .emacs for version 22+ Raymond Zeitler's work computer.
;; Time-stamp: <2008-06-04 09:58:42 rayz>
;;
(setq initial-frame-alist '((top . 0) (left . 285)
			    (width . 135) (height . 68)
			    (cursor-type . bar)
			    (font . "-outline-Bitstream Vera Sans Mono-normal-r-normal-normal-12-90-96-96-c-70-iso8859-1")))
(setq frame-title-format '("Emacs22: %b" (buffer-file-name ": %f")))
;; Always end a file with a newline
(setq require-final-newline t)
;; Stop at the end of the file, not just add lines
(setq next-line-add-newlines nil)
(add-hook 'write-file-hooks 'time-stamp)
(setq w32-enable-italics t)
(setq printer-name "//SERVER-DC2/OKIB4350 Front Hall")
(require 'color-theme)
(color-theme-blue-sea)

(load "c:/emacs22/mylisp/csrshp")
(load "c:/emacs22/mylisp/fill-mod")
(load "c:/emacs22/mylisp/msc.el")
(load "c:/emacs22/mylisp/m2c.el")
(load "c:/emacs22/mylisp/remcr.kbm")
(load "c:/emacs22/mylisp/cpr.kbm")
(load "c:/emacs22/mylisp/stp2scr.kbm")
(load "c:/emacs22/mylisp/rep2csv.kbm")
(load "c:/emacs22/mylisp/exeln")
(load "c:/emacs22/mylisp/unfill.kbm")
(load "~/.abbrev_defs")
;; Function to insert the current date
(defun insert-date-and-time ()
  "Insert the date and time into the current buffer."
  (interactive)
  (insert (format-time-string "%m/%d/%y" (current-time))))

(load "c:/emacs22/lisp/patn-insert")
(load "desktop")
(global-set-key [C-S-w] 'desktop-clear)

;; dictionary.el from http://me.in-berlin.de/~myrkr/dictionary/index.html
(add-to-list 'load-path "C:/Emacs22/dictionary-1.8.7")
(load "dictionary-init")
(global-set-key " s" 'dictionary-lookup-definition)

;(autoload 'visual-basic-mode "visual-basic-mode" "Visual Basic Mode" t)
(autoload 'basic-mode "basic-mode" "Visual Basic Mode" t)
(setq auto-mode-alist (append '(
                                ("\\.cls$" . basic-mode)
                                ("\\.asp$" . basic-mode)
                                ("\\.wsc$" . basic-mode)
                                ("\\.vbs$" . basic-mode)
                                ("\\.bas$" . basic-mode)) auto-mode-alist))
;;; End Visual Basic Stuff

(defun shellfn ()
  "Invokes the shell using the current buffer file name as a command."
  (interactive)
  (shell-command buffer-file-name))

;;; Keybindings
(global-set-key [f6] 'query-replace-regexp)
(global-set-key [f5] 'nonincremental-re-search-forward)
(global-set-key [S-f5] 'nonincremental-repeat-re-search-forward)
(global-set-key [C-tab] 'next-buffer)
(global-set-key [C-S-tab] 'previous-buffer)
(global-set-key " x" 'exeln)
(global-set-key " c" 'shellfn)
(global-set-key (kbd "M-q") 'fill-region-or-paragraph) 
(global-set-key " d" 'insert-date-and-time)
(global-set-key " f" 'find-file-at-point)
(global-set-key "  " 'append-to-file)
(define-key function-key-map [C-kp-home] [?\M-<])
(define-key function-key-map [C-kp-end] [?\M->])
; The following is from Francis Litterio <franl@world.std.com>
(global-set-key [S-left] #'(lambda () (interactive) (scroll-left 1)))
(global-set-key [S-right] #'(lambda () (interactive) (scroll-right 1)))

;;; Modes
(global-font-lock-mode 1)
(delete-selection-mode t)
(resize-minibuffer-mode 1)
(global-auto-revert-mode 1)
(hscroll-global-mode 1)
(setq auto-mode-alist (append '(("\\.\\(dev\\|dxf\\|str\\|ebc\\|mat\\|and\\|stp\\|scr\\|csv\\|pat\\|mmm\\|msk\\)$" . fundamental-mode)) auto-mode-alist))
(load "batch-mode")
(setq auto-mode-alist (append '(("\\.[cC][mM][dD]\\'" . batch-mode)("\\.[bB][aA][tT]\\'" . batch-mode)) auto-mode-alist))
(setq default-major-mode 'text-mode)
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'text-mode-hook 'flyspell-mode)
(defun set-compile-command ()
  "Set the value of (compile-command) to the name of the current buffer."
  (interactive)
  (setq compile-command buffer-file-name)
)

;; start gnuserv
(load "gnuserv")
(setq gnuserv-frame (selected-frame))
(gnuserv-start)

;; Ispell addition
(setq ispell-dictionary-alist
      '((nil "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B") nil raw-text-dos)
        ("american" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B")
         nil raw-text-dos)
        ("british" "[A-Za-z]" "[^A-Za-z]" "[']" nil
         ("-B" "-d" "british") nil raw-text-dos)
        ("english" "[A-Za-z]" "[^A-Za-z]" "[']" nil ("-B")
         nil raw-text-dos)))

(load "C:/Emacs22/RZHome/.plan")

; (add-to-list 'load-path "c:/emacs22/Icicles")
; (require 'icicles)
; (icicle-mode 1)

(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(abbrev-mode t)
 '(column-number-mode t)
 '(icicle-reminder-prompt-flag 19)
 '(read-quoted-char-radix 10)
 '(safe-local-variable-values (quote ((allout-layout * 0 :))))
 '(server-kill-new-buffers nil)
 '(tool-bar-mode nil)
 '(transient-mark-mode t)
 '(truncate-lines t))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )
</pre>

My .plan:
<pre>
;;; .plan --- Initialize planner-mode.
;; Time-stamp: <2008-06-02 12:34:05 rayz>
;; 
(add-to-list 'load-path "C:/Emacs22/remember-2.0")
(add-to-list 'load-path "C:/Emacs22/planner-3.42")
(add-to-list 'load-path "C:/Emacs22/muse-3.12/lisp")
(require 'planner)
(require 'planner-diary)
(require 'planner-multi)
(require 'remember-planner)
(setq planner-diary-use-diary t)
(planner-diary-insinuate)
(setq planner-carry-tasks-forward 0)
(setq planner-reverse-chronological-notes nil)
(setq planner-tasks-file-behavior 'close)
(setq planner-tasks-never-suppress-fixing-flag t)
(setq remember-handler-functions '(remember-planner-append))
(setq remember-annotation-functions planner-annotation-functions)

(setq calendar-latitude 99.9)
(setq calendar-longitude 99.9)
(setq calendar-location-name "MyTown, CT")
(setq calendar-timezone -300)
(setq calendar-standard-time-zone-name "EST")
(setq calendar-daylight-time-zone-name "EDT")
(setq planner-diary-include-all-output-flag t)
(setq planner-day-page-template "<lisp>(planner-diary-entries-here)</lisp>\n\n* Tasks\n\n\n* Schedule\n\n\n* Notes")
(planner-insinuate-calendar)
(planner-install-extra-task-keybindings)

(define-key planner-mode-map [tab] nil)
(define-key planner-mode-map [(control ?i)] nil)
(define-key planner-mode-map "\C-c\C-n" nil)
(define-key planner-mode-map "\C-c\C-t\C-n" nil)
(global-set-key " p" 'select-planner-project)
(global-set-key (kbd "\C-c\C-t\C-n") 'planner-create-task-from-note)
(global-set-key (kbd "\C-c\C-n\C-t") 'planner-create-note-from-task)
(global-set-key (kbd "<f9> r") 'remember)

;; These settings are for select-planner-project...
(setq spp-planner-personal-project "Journal")
(setq spp-planner-work-project "Plans")
(setq spp-save-buffers-before-kill t)


(setq planner-project "Plans") ; default project is for work.
(setq muse-project-alist
      '(("Plans"        ;; use value of `planner-project'
         ("C:/jrnl/Work"           ;; where your Planner pages are located
          :major-mode planner-mode
          :visit-link planner-visit-link)

         ;; This next part is for specifying where Planner pages
         ;; should be published and what Muse publishing style to
         ;; use.  In this example, we will use the XHTML publishing
         ;; style.

         (:base "planner-xhtml"
                ;; value of `planner-publishing-directory'
                :path "C:/JOBS/Plans"))
	("Journal"
	  ("C:/jrnl/PERSONAL/muse"
          :major-mode planner-mode
          :visit-link planner-visit-link)
         (:base "planner-xhtml"
                ;; value of `planner-publishing-directory'
                :path "C:/jrnl/PERSONAL/pub"))))

(defun select-planner-project (&optional arg)
  "Change `planner-project' to one of two different projects,
such as personal project and a professional project.  Use
\\[universal-argument] to set `planner-project' to
`spp-planner-personal-project'.  Otherwise set it to
`spd-planner-work-project'.  Setting
`spp-save-buffers-before-kill' forces a save of all planner
buffers before killing them.  If nil, user is prompted before
unsaved buffers are killed."
  (interactive "*P")
  (let ((spp spp-planner-work-project))
    (if arg
	(setq spp spp-planner-personal-project))
    (if (eq spp planner-project)
	(message "Planner is already using %s." spp)
      (if spp-save-buffers-before-kill
	  (planner-save-buffers))
      (spp-kill-buffers)
      (setq planner-project spp)
      (message "Planner is switching to %s." spp)
      (plan))))

(defun spp-kill-buffers ()
  "Kill all planner buffers.
Copied from `planner-save-buffers'."
  (interactive)
  (let ((buffers (delq nil
                  (mapcar
                   (lambda (buf)
                     (with-current-buffer buf
                       (when (and (planner-derived-mode-p 'planner-mode)
                                  (planner-page-name))
                         buf)))
                   (buffer-list)))))
    (while buffers
      (when (buffer-live-p (car buffers))
        (kill-buffer (car buffers)))
      (setq buffers (cdr buffers)))))

(message "Loaded: %s" (buffer-file-name))
</pre>

----
CategoryHomepage
