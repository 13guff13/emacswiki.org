SteveYegge has written a new JavaScriptMode:

http://code.google.com/p/js2-mode/

http://steve-yegge.blogspot.com/2008/03/js2-mode-new-javascript-mode-for-emacs.html

[[https://github.com/mooz/js2-mode|GitHub fork with some improvements]]

[[SmartTabs#Js2Mode|Smart Tabs: Js2Mode]]

The js2-mode has a nice feature in that it highlights undeclared variables, but sometimes you want to ignore these for certain symbols (perhaps you know the global is defined properly in another file). The jslint tool will look for a globals comment at the top of a file and consider any symbols defined in there to be valid globals, the following elisp code installs a hook into js2-mode so it that it respects the same declaration -- TimMeadowcroft

    ;; After js2 has parsed a js file, we look for jslint globals decl comment ("/* global Fred, _, Harry */") and
    ;; add any symbols to a buffer-local var of acceptable global vars
    ;; Note that we also support the "symbol: true" way of specifying names via a hack (remove any ":true"
    ;; to make it look like a plain decl, and any ':false' are left behind so they'll effectively be ignored as
    ;; you can;t have a symbol called "someName:false"
   (add-hook 'js2-post-parse-callbacks 
          (lambda ()
            (let ((btext (replace-regexp-in-string
                          ": *true" " "
                          (replace-regexp-in-string "[\n\t ]+" " " (buffer-substring-no-properties 1 (buffer-size)) t t))))
              (setq js2-additional-externs
                    (split-string
                     (if (string-match "/\\* *global *\\(.*?\\) *\\*/" btext) (match-string-no-properties 1 btext) "")
                     " *, *" t))
              )))

