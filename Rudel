== Introduction ==

Rudel is a [CollaborativeEditing collaborative editing] environment
for GNU Emacs. Its purpose is to share buffers with other users in
order to edit the contents of those buffers collaboratively. It
supports multiple backends to enable communication with other
collaborative editors using different protocols (most notably
[http://gobby.0x539.de/trac/ Gobby] and possibly
[http://www.codingmonkeys.de/subethaedit/ SubEthaEdit]).

Rudel mostly works in the background to change the behavior of the set
of Emacs buffers for which it has been activated. These do not even
have to have a certain [MinorMode minor mode] enabled.

The user interface of Rudel consists of a set of key bindings, a menu
entry and some visual status indicators, which are added to the text
and mode line of buffers for which Rudel has been activated. This user
interface is implemented as a global minor mode.

The image below shows a collaborative editing session with one Gobby
and two Rudel clients (only one of these is visible).

http://rudel.sourceforge.net/images/screenshots/emacs-with-gobby.png

== Download ==

Archives of released versions can be downloaded from the
[https://sourceforge.net/project/platformdownload.php?group_id=249139
download area] of the [http://sourceforge.net/projects/rudel
Sourceforge project page].

Development versions are available via

* the [[Bazaar]] repository on Sourceforge:
  {{{
  bzr branch bzr://rudel.bzr.sourceforge.net/bzrroot/rudel/trunk rudel
  }}}

* the [[SubVersion]] repository on Sourceforge:
  {{{
  svn co https://rudel.svn.sourceforge.net/svnroot/rudel/trunk rudel
  }}}

* the (experimental, but hopefully properly synchronized) [[Git]]
  [http://github.com/scymtym/rudel repository] at 
  [http://www.github.com GitHub]:
  {{{
  git clone git://github.com/scymtym/rudel.git
  }}}


== Installation ==

=== Requirements ===

To use Rudel, the following software is required:

* *GNU Emacs 22 or above*
   Rudel should work with recent versions of GNU Emacs starting from
   version 22. Older versions of GNU Emacs or XEmacs may or may not work
   but are not actively tested.

* *Collection of Emacs Development Environment Tools*
  [[CEDET]] contains the object system [[EIEIO]], which is used in
  Rudel's object-oriented implementation. [[CEDET]] can be obtained
  from [http://cedet.sourceforge.net/]. It is necessary to use at least
  version 1.0pre6 of [[CEDET]] since a serious problem in the object
  system [[EIEIO]] was fixed in that release.

[new]
If you are using Emacs from trunk (as of October 2009), CEDET is
included and doesn't need to be installed separately. Using Rudel from
trunk will be much easier to install.

On earlier versions of Emacs, CEDET can be difficult to install, (and
unfortunately is not in ELPA due to the maintainer's
uncooperativeness), so here's some help:

<pre>
(defun load-rudel ()
  (interactive)
  ;; Do these in a shell in ~/src:
  ;; cvs -d:pserver:anonymous@cedet.cvs.sourceforge.net:/cvsroot/cedet login
  ;; cvs -z3 -d:pserver:anonymous@cedet.cvs.sourceforge.net:/cvsroot/cedet co -P cedet
  ;; cd cedet && make && cd ..
  ;; svn co https://rudel.svn.sourceforge.net/svnroot/rudel/rudel/trunk rudel
  (add-to-list 'load-path "~/src/cedet/eieio")
  (add-to-list 'load-path "~/src/cedet/common")
  (add-to-list 'load-path "~/src/rudel/")
  (add-to-list 'load-path "~/src/rudel/jupiter")
  (add-to-list 'load-path "~/src/rudel/obby")
  (require 'rudel-mode)
  (require 'rudel-obby)
  (global-rudel-minor-mode))
</pre>

Autoloads and byte-compilation don't work for me due to a strange cedet
dependency problem, but this should get you in a working state.
[new]

* *!GnuTLS (optional)*
  Connections to Gobby servers require the gnutls-cli program.

=== Installing ===

To install Rudel, download a released version or the current
development version from [http://sourceforge.net/projects/rudel/] and
place the code in any directory you like.

To make Rudel available for use, perform these steps:

# If there is no file ##rudel-loaddefs.el## in your version of Rudel, open and evaluate ##rudel-compile.el## (see below) to generate the file. If ##rudel-loaddefs.el## is already present, no action is required.

# Add the following to your personal Emacs configuration:

  (load-file "/PATH/TO/RUDEL/rudel-loaddefs.el")

This will set Rudel up to be loaded on demand (see [[AutoLoad]])
when one of the commands `rudel-join-session', `rudel-host-session' or
`global-rudel-minor-mode' is invoked. The auto loading information in
##rudel-loaddefs.el## is distributed with older versions of Rudel, but has
to be generated using ##rudel-compile.el## in more recent versions.

=== Compiling ===

In order to achieve better performance, Emacs can byte-compile the
Rudel code. This can be done by opening <tt>rudel-compile.el</tt> in
Emacs and invoking M-x eval-buffer. In recent versions of Rudel, this also
generates auto loading information (see above).

== Development ==

If you would like to contribute to Rudel by submitting patches or
reporting bugs, use the Questions and Feedback section below,
[http://sourceforge.net/mail/?group_id=249139 the mailing list] or
[http://sourceforge.net/tracker/?group_id=249139 the issue tracker].
You can also try #rudel on irc.freenode.net.

When reporting bugs, please make sure to include the Emacs version, the CEDET version,
the Rudel version and a descriptions of the steps that lead to the
bug.

For long term contributions, becoming a member of the Sourceforge
project is more appropriate.

== Questions and Feedback ==

/Paste questions and feedback here./

[new]
I would like to use rudel with auctex (with inline preview) for collaborative LaTeX documents.  Unfortunately, this is too hard for most mathematicians (me for example) to install.  How can this be simplified?  With a script or package of some kind?  reply here or something.

[new]
Probably not the answer you are looking for, but with regard to installing Rudel, the procedure depends on your operating system, the Emacs version and desired install location. 

In case you are on a Debian GNU/Linux system (Ubuntu Linux should be equivalent in this case, I suppose), you could try to use the packages provided here: http://www.gergely.risko.hu/cedet/. I have not tried these myself, though.

Alternatively, for a recent version (23) of Emacs, downloading Rudel from http://sourceforge.net/projects/rudel/files/rudel/0.2-4/rudel-0.2-4.tar.gz/download and extracting it somewhere should work. The only additional work in this case is adding

 (load-file "/PATH/TO/EXTRACTED_RUDEL_FILES/rudel-loaddefs.el")
 (global-rudel-minor-mode 1)

to the .emacs init file. After the next restart of Emacs, a "Rudel" menu item should appear. 

In case you need additional assistance, try the #rudel IRC channel periodically. Sooner or later somebody who can help should be there. --JanMoringen

[new]
Okay... I just had a major system crash and ended up doing a new install of Ubuntu Lucid. I've installed emacs23 and cedet, etc., but I'm getting the following error (from --debug-init) when rudel-loaddefs.el runs:

<pre>
͂͂͂͂͂͂͂͂͂͂͂͂Debugger entered--Lisp error: (wrong-type-argument listp :static)
  eieio-defmethod(rudel-get-factory (:static ((this rudel-backend-factory) category) "Return the factory responsible for CATEGORY.\nIf there is no responsible factory, create one and return it." (with-slots (factories) this (or ... ...))))
  (defmethod rudel-get-factory :static ((this rudel-backend-factory) category) "Return the factory responsible for CATEGORY.\nIf there is no responsible factory, create one and return it." (with-slots (factories) this (or ... ...)))
  eval-buffer(#<buffer  *load*<3>> nil "/usr/share/emacs/site-lisp/rudel/rudel-backend.el" nil t)  ; Reading at buffer position 3636
  load-with-code-conversion("/usr/share/emacs/site-lisp/rudel/rudel-backend.el" "/usr/share/emacs/site-lisp/rudel/rudel-backend.el" nil t)
  (rudel-add-backend (rudel-backend-get-factory (quote protocol)) (quote infinote) (quote rudel-infinote-backend))
  eval-buffer(#<buffer  *load*<2>> nil "/usr/share/emacs/site-lisp/rudel/rudel-loaddefs.el" nil t)  ; Reading at buffer position 4075
  load-with-code-conversion("/usr/share/emacs/site-lisp/rudel/rudel-loaddefs.el" "/usr/share/emacs/site-lisp/rudel/rudel-loaddefs.el" nil nil)
  load("/usr/share/emacs/site-lisp/rudel/rudel-loaddefs.el" nil nil t)
  load-file("/usr/share/emacs/site-lisp/rudel/rudel-loaddefs.el")
  eval-buffer(#<buffer  *load*> nil "/home/michael/.emacs" nil t)  ; Reading at buffer position 3813
  load-with-code-conversion("/home/michael/.emacs" "/home/michael/.emacs" t t)
  load("~/.emacs" t t)
</pre>

There's more but there's high high-ascii in it, so won't copy, of course. Hopefully you can get the jist from this. :)
-- Michael

[new]
Your error looks like the error in [http://sourceforge.net/tracker/?func=detail&aid=2864765&group_id=249139&atid=1126346 this bug report] which was caused by an old CEDET version installed via the Debian package manager (The CEDET version can be checked using ##M-x cedet-version##). Also, Emacs 23 includes a version of CEDET. Installing it via the package manager should not be required (and may even cause harm as in the linked bug report).
--JanMoringen

[new]
Well... I tried uninstalling CEDET (via the package manager) and it uninstalled eieio as well. And, apparently (at least on a clean install of Lucid) CEDET is *not* installed as part of deb emacs23. I couldn't find it anywhere after I removed the CEDET package and then reinstalled just emacs23. Also, I get the same errors with just a core install as without CEDET. So I reinstalled eieio. It required only "cedet-common", rather than the all the deb cedet packages. Fine. But it still generates the same errors, either way. It appears I need need a way to install cedet and eieio other than via Canonical.

-- Michael

[new]
The [CollectionOfEmacsDevelopmentEnvironmentTools CEDET] page says:
: In Emacs 23.2, CEDET was merged into the main Emacs distribution.

Maybe the Ubuntu version is older? In conclusion, I still assume the CEDET variants you tried were too old. Sorry for the confusion.

The easiest solution, although quite unsatisfactory, is probably to install CEDET from CVS.
--JanMoringen

[new]
No, Debian is just strange. They have their own unique way of doing emacs. There's a collection of emacs startup.el files in the etc tree that look like the rc.d directory. =snort= 

But okay... I finally got the CVS version of CEDET working -- at least, I can get the rudel menu up without any errors showing up ( in --debug-init mode). But when I try to join a session I *now* get: 

{{{
Warning (rudel): Could not load backend `zeroconf': Wrong type argument: arrayp, nil
Warning (rudel): Could not load backend `zeroconf': Wrong type argument: arrayp, nil
Warning (rudel): Could not load backend `infinote': Wrong type argument: arrayp, nil
Warning (rudel): Could not load backend `obby': Wrong type argument: arrayp, nil
}}}

This is turning into an ordeal. :P

-- michael

[new]
I'm really sorry that Rudel causes so many problems for you. I hope you can endure this a bit longer. We are probably getting close. Unfortunately, I have no idea how installation of Emacs extensions can be made easier or at least less error prone.

What happens without the ##--debug-init## option?

Did you delete and regenerate ##rudel-loaddefs.el## since you reinstalled CEDET?

Alternatively, you can put the following into your ##.emacs##:
{{{
(load-file "rudel-loaddefs.el") ;; this should already be there, maybe just similar
(require 'rudel-zeroconf
(require 'rudel-infinote)
(require 'rudel-obby)
}}}
This should immediately load the backends, hopefully working around the problems that happen when auto loading them.
--JanMoringen
[new]
No, I did not delete the ##rudel-loaddefs.el##. I //did// recompile rudel, though.

So now I deleted ##loaddefs## and regenerated it. It changed the errors:

Here's the non--debug-init version:

{{{
Warning (initialization): An error occurred while loading `/home/michael/.emacs':

error: Given parent class rudel-protocol-backend is not a class

To ensure normal operation, you should investigate and remove the
cause of the error in your initialization file.  Start Emacs with
the `--debug-init' option to view a complete error backtrace.
}}}
And here's what debug-init output:
{{{
Debugger entered--Lisp error: (error "Given parent class rudel-protocol-backend is not a class")
  signal(error ("Given parent class rudel-protocol-backend is not a class"))
  error("Given parent class %s is not a class" rudel-protocol-backend)
  eieio-defclass(rudel-infinote-backend (rudel-protocol-backend) ((capabilities :initform (quote ...))) (""))
  (progn (eieio-defclass (quote rudel-infinote-backend) (quote ...) (quote ...) (quote ...)))
  (eval-and-compile (eieio-defclass (quote rudel-infinote-backend) (quote ...) (quote ...) (quote ...)))
  (defclass rudel-infinote-backend (rudel-protocol-backend) ((capabilities :initform ...)) "")
  eval-buffer(#<buffer  *load*<2>> nil "/usr/share/emacs23/site-lisp/rudel/rudel-loaddefs.el" nil t)  ; Reading at buffer position 4486
  load-with-code-conversion("/usr/share/emacs23/site-lisp/rudel/rudel-loaddefs.el" "/usr/share/emacs23/site-lisp/rudel/rudel-loaddefs.el" nil nil)
  load("/usr/share/emacs23/site-lisp/rudel/rudel-loaddefs.el" nil nil t)
  load-file("/usr/share/emacs23/site-lisp/rudel/rudel-loaddefs.el")
  eval-buffer(#<buffer  *load*> nil "/home/michael/.emacs" nil t)  ; Reading at buffer position 3814
  load-with-code-conversion("/home/michael/.emacs" "/home/michael/.emacs" t t)
  load("~/.emacs" t t)
}}}
Also, rudel will no not start //at all//. The command ##global-rudel-minor-mode## no longer exists.

--michael

P.S. I'm not blaming you and rudel, Jan. This is on Ubuntu, IMO. They've known that the emacs build for Lucid (which is supposed to be their flagship LTS release) was screwed up for nearly 9 months. They even it marked as "important" (if memory serves) -- and they've done nothing about it. And whose brainy idea was it at Canonical to remove rudel (and a good many other fine emacs packages) from the repositories, anyway? (Maybe it's because they all use VI, who knows. :P )

[new]
Hey Michael,

is it possible that ##rudel-loaddefs.el## has been generated without eieio loaded? //Normally//, this should not happen since eieio is required in ##rudel-compile.el##, but your ##rudel-loaddefs.el## has ##(defclass rudel-infinote-backend ...## which should be ##(eieio-defclass-autoload 'rudel-infinote-backend ...##. I'm pretty sure this causes the error you now see. You could try to recreate ##rudel-loaddefs.el##, if you have any idea what went wrong.

If fixing ##rudel-loaddefs.el## is not possible, you can also delete it and put the following into your ##.emacs## (at the expense of loading most of Rudel at Emacs startup):
{{{
(let* ((rudel-dir "/usr/share/emacs23/site-lisp/rudel/")
        (subdirs   (mapcar 
		   (lambda (subdir)
		     (concat rudel-dir subdir))
		   '("."
		     "jupiter" "adopted" 
		     "socket" "tls" "xmpp" "telepathy"
		     "obby" "infinote"
		     "zeroconf")))) 
  (dolist (subdir subdirs) 
    (add-to-list 'load-path subdir)))

(require 'rudel-mode)
(require 'rudel-socket)
(require 'rudel-tls)
(require 'rudel-obby)
}}}
This method should even work with a freshly extracted Rudel, without compiling or anything.

--JanMoringen
[new]
Hmm... Okay... Your hack seems to have gotten rudel to work. I'll have a chance to try a session later, but clicking on joining/creating didn't generate any errors.

That said.. If eieio isn't being loaded then the logical conclusion is that the CVS version of cedet isn't properly installed and accessible. So I ran the the cit-test.sh script included in the package (just found it -- I can be a bit slow at times). Here's what it returned:

{{{
Debugger entered--Lisp error: (error "Compilation failed!")
  signal(error ("Compilation failed!"))
  error("Compilation failed!")
  (progn (error "Compilation failed!"))
  (if (re-search-backward " Error " nil t) (progn (error "Compilation failed!")))
  (when (re-search-backward " Error " nil t) (error "Compilation failed!"))
  (save-excursion (set-buffer "*compilation*") (goto-char (point-max)) (when (re-search-backward " Error " nil t) (error "Compilation failed!")))
  cit-wait-for-compilation()
  (let ((bufftokill ...)) (ede-proj-regenerate) (compile (concat ede-make-command ...)) (cit-wait-for-compilation) (kill-buffer bufftokill))
  cit-compile-and-wait()
  cit-srecode-fill-cpp("Make")
  cedet-integ-test-proj("Make")
  cedet-integ-test-Make()
  command-line-1(("-l" "../common/cedet.el" "-l" "cit-load.el" "-f" "toggle-debug-on-error" "-f" "toggle-debug-on-quit" "-f" "cedet-integ-test-Make"))
  command-line()
  normal-top-level()
}}}


(I'd really like to get this damned thing working //right//. :P)

--- michael

== Contributed Code ==

=== Send Chat Messages (obby Protocol only) ===

Since this was requested once but is not suitable for Rudel itself, it's probably the best solution  to share it here:
{{{
(defun rudel-chat-send-message (text)
  (interactive
   (list (read-string "Text: ")))
  (let ((connection (oref rudel-current-session :connection)))
    (rudel-send connection "obby_message" text)))

(defun rudel-chat-send-current-line ()
  (interactive)
  (let ((end   (point))
	(start (save-excursion
		 (beginning-of-line)
		 (point))))
    (rudel-chat-send-message (buffer-substring start end))
    (delete-region start end)))

;; eval in *rudel-chat-log-buffer*:
(local-set-key (kbd "RET") #'rudel-chat-send-current-line)
}}}
