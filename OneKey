OneKey is designed to help you remember keybindings.  It saves you time and frees up your head!

[new]
Please send suggestions and bug reports to [http://www.emacswiki.org/emacs/JoeBloggs JoeBloggs], he's the new maintainer. Thanks! -- AndyStewart

[new]
JoeBloggs, why don't you put this on github.  This way you get issue tracking, git repo, etc all for free. -- LeWang

==What is OneKey ?==
OneKey is a popup help window which appears when you type a *Top Key*.
It shows *Keystrokes* and *Commands* in a help window.

==Why do I need OneKey ?==
* *I am new to emacs and want to learn the common keybindings*
:: By default OneKey comes with a *top-level* menu containing submenus for all the common prefix keys and commands.
:: The emacs keybindings are displayed next to the commands to help you learn them. More frequently accessed items
:: are highlighted to help you quickly pick them out.
* *I have too many commands I need to remember*:
:: When I install lots of useful extension in Emacs I always forget the bindings for their commands because there are so many to remember.
:: OneKey contains a *major-mode* menu which contains the keybindings and menu items for the current major-mode, and it
:: also allows you to quickly find a command by filtering by regular expressions.
:: You can also easily create your own menus.
* *I don't have a spare, easy keystroke free to bind to a command.*:
:: Emacs has so many handy commands, but I don't have any keystrokes free to bind new commands to.

: OneKey provides a single top-level keystroke, which gives you access to kestroke menus in a pop-up window. 
: You simply type the keystroke shown in the window, which executes the corresponding command, or press the left/right
: arrow key to change to a different menu. You can also easily create your own menus.
: So you just need remember the Top keystroke, and the other keystrokes will be displayed in a pop-up window.


: [http://www.emacswiki.org/cgi-bin/emacs/OneKey#toc11 Here] is a screenshot to show how OneKey works.

==To Install==
: Add Lisp:one-key.el in your load-path, then add 
{{{
        (require 'one-key)
        (global-set-key (kbd "<menu>") 'one-key-open-default-menu-set)
}}}
: in ~/.emacs (replace "<menu>" with whatever key you want to use).

==Usage==


==Customize==
All the options below can be customized by M-x customize-group RET one-key RET

;; `one-key-default-menu-keys' : A list of chars which may be used as the default keys in automatically generated 
;;                               `one-key' menus.
;; `one-key-min-keymap-submenu-size' : The minimum number of elements allowed in a submenu when creating menus from 
;;                                     keymaps.
;; `one-key-popup-window' : Whether to popup window when `one-key-menu' is run for the first time.
;; `one-key-buffer-name' : The buffer name of the popup menu window.
;; `one-key-column-major-order' : If true then menu items are displayed in column major order, otherwise row major order.
;; `one-key-force-multi-column-keymap-menus' : If non-nil then one-key menus created from keymaps will have command 
;;                                             descriptions shortened to fit two columns.
;; `one-key-menu-window-max-height' : The max height of popup menu window.
;; `one-key-menus-save-file' : The file where `one-key' menus are saved.
;; `one-key-autosave-menus' : If non-nil then one-key menus will automatically be saved when created or changed.
;; `one-key-exclude-from-save' : List of regular expressions matching names of menus which should not be autosaved.
;; `one-key-include-menubar-items' : Whether or not to include menu items with no keybinding when creating one-key menus 
;;                                   from keymaps.
;; `one-key-item-foreground-colour' : Foreground colour of highlighted items in `one-key' menus.
;; `one-key-auto-brighten-used-keys' : If non-nil then set brightness of menu items colours according to how often the 
;;                                     keys are pressed.
;; `one-key-submenus-replace-parents' : If non-nil then when a submenu of a `one-key' menu is opened it will replace the 
;;                                      parent menu.
;; `one-key-major-mode-remap-alist' : A list of cons cells mapping major modes to one-key-menus.
;; `one-key-toplevel-alist' : The `one-key' top-level alist.
;; `one-key-sets-of-menus-alist' : Saved menu sets (sets of menus).
;; `one-key-default-menu-set' : The default menu set. It's value should be the car of one of the items in 
;;                              `one-key-sets-of-menus-alist'.
;; `one-key-default-sort-method-alist' : An alist of sorting methods to use on the `one-key' menu items.
;; `one-key-special-keybindings' : An list of special keys; labels, keybindings, descriptions and associated functions.
;; `one-key-default-special-keybindings' : List of special keys to be used if no other set of special keys is defined for 
;;                                         a given one-key menu type.
;; `one-key-menu-sets-special-keybindings' : List of special keys to be used for menu-sets menus (see 
;;                                           `one-key-default-special-keybindings' for more info).
;; `one-key-disallowed-keymap-menu-keys' : List of keys that should be excluded from one-key menus created from keymaps.
;; `one-key-types-of-menu' : A list of names of different types of `one-key' menu, and associated functions.
;; `one-key-persistent-menu-number' : If non-nil then when the default menu set is opened it will start with the same 
;;                                    menu as when previously opened.
;; `one-key-mode-line-message' : Form that when evaluated should produce a string for the mode-line in the *One-Key* 
;;                               buffer.


* Major mode associations

: You can associate a different one-key menu with each major mode which is opened by default for that mode.

==Tips==

: Type "?" to toggle help window display.
: Type "C-?" followed by one of the keys in the menu to show a description of the associated command.
: Type "q" to quit OneKey and hide help window.
: Type "C-b" to go back to the previous or toplevel menu

:: NOTE: The keystrokes above are built-ins for controlling the help window.  Of course if you bind them to another command, OneKey will instead execute that. 

:: And whatever your binding, you can use the keystroke "C-g" to abort OneKey. 

==Description==
The core function is `one-key-menu'.  Here is some more detail about its arguments.

* title:

: The title information shown in echo-area or help window for identified.

* info-alist:

: The alist contains help information, with the format (("KEY" . "HELP") . COMMAND)

* miss-match-exit-p

: Whether to hide the help window when you type a *mismatched* keystroke.

* recursion-p

: Whether recursion execute self until you type "q".

* protect-function

: The protect function to make OneKey execute it when exception abort OneKey.

* alternate-function

: The last function call after OneKey command execute.

* execute-last-command-when-miss-match

: Whether to execute last input command when miss matched keystroke alist.

==Related==

* LazySearch -- A new search mode base on OneKey.

:: You can find it at Lisp:lazy-search.el .
:: And have some enhanced functions for LazySearch, at Lisp:lazy-search-extension.el .


==Screenshot==
OneKey show help window for remember:

[[image:OneKeyScreenshot]]

==Dialog==
: Do you know OneTwoThreeMenu? -- [[rubikitch]]
:: Wow, i have never heard it, and looks have same design purpose for remember keystroke.
:: At the beginning, i just want write a mode to help me remember keystroke and *free* my handy keystrokes for other extensions.
:: So i write OneKey, just for lazy.  -- AndyStewart

[new]
 I have a problem when assigning, for example, `mark-paragraph' function to a key, the paragraph is not marked. While using `M-x mark-paragraph' works! Any idea what is wrong?

[new]
I found Lisp:one-key-default.el a bit annoying: after loading it, I can't bind key to `C-x j',`C-x p' etc any longer (as `C-x' is no longer a prefix key), and I can't use `C-x C-h' to query the keybindings list either. Thus it is only useful for learning Emacs default keys. 

I wrote a new routine to bind e.g. `ESC C-x' to the one-key-menu. `C-x' is still a prefix key. You can add keybindings to `C-x j', you can use `C-x C-h' to query keybindings list and you can use `one-key-refresh-menu' to refresh the menu (after adding `C-x j', `C-x p' etc).
{{{
    (defun one-key-bind-keymap (key keymap-prefix)
      "Generate an one-key menu for keys starting with `keymap-prefix', and bind it to `key'.

    It also bind `keymap-prefix'-? to the same one-key menu, if not in use.

    For example, when called with ('ESC <f1>', '<f1>'), it would
    generate one-key menu 'one-key-menu-<f1>', and bind 'ESC <f1>'
    and '<f1> ?' to one-key-menu-<f1>.
    "
      (if (keymapp (key-binding (read-kbd-macro keymap-prefix)))
          (let ( (one-key-menu-sym (intern (format "one-key-menu-%s"
                               (replace-regexp-in-string " " "-" keymap-prefix)))) )
        (let ( (prefixed-?-key (read-kbd-macro (concat keymap-prefix " ?"))) )
          (unless (key-binding prefixed-?-key)
            (global-set-key prefixed-?-key one-key-menu-sym)))
        (with-temp-buffer
          (one-key-insert-template keymap-prefix keymap-prefix)
          (eval-buffer))
        (global-set-key (read-kbd-macro key) one-key-menu-sym))
        (message "'%s' is not a keymap-prefix" keymap-prefix)))

    ;; use it this way in your ~/.emacs
    (one-key-bind-keymap "ESC C-x" "C-x")


    (defun one-key-refresh-menu (fkey)
      (interactive "sfkey: ")
      (one-key-bind-keymap (concat "ESC " fkey) fkey))

    ;;use `M-x one-key-refresh-menu' at anytime to refresh the menu
    
}}}

[new]

I found that when I have (one-key-default-setup-keys) in my .emacs, I do not get the eshell prompt.
[new]
That is strange, it works fine for me [[JoeBloggs]]

[new]
