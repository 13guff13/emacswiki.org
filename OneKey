OneKey is designed to help you remember keybindings.  It saves you time and frees up your head!

: Please send suggestions and bug reports to [http://www.emacswiki.org/emacs/JoeBloggs JoeBloggs], he's the new maintainer. Thanks! -- AndyStewart

[new:JoeBloggs:2012-02-23 04:38 UTC]
: OneKey is currently undergoing some major improvements, however it's going to take a while for me to write up the documentation.
Stay tuned... -- JoeBloggs Thu Feb 23 04:44:18 2012



==What is OneKey ?==
OneKey is a popup help window which appears when you type a *Top Key*.
It shows *Keystrokes* and *Commands* in a help window.

==Why I needed OneKey ?==
* *I had too many commands I needed to remember*:
:: When I install lots of useful extension in Emacs, I always forget the bindings for their commands, because there are so many to remember.
* *I don't have a spare, easy keystroke free to bind to a command.*:
:: Emacs has so many handy commands, but I don't have any keystrokes free to bind new commands to.

: OneKey provides a single top-level keystroke, which gives you a kestroke menu in a pop-up window. 
: You simply type the keystroke shown in the window, which executes the corresponding command.
: So you just need remember the Top keystroke with the group command, and the other keystrokes will be displayed in a pop-up window.
: You can also have different menus displayed depending on the current major mode.

: [http://www.emacswiki.org/cgi-bin/emacs/OneKey#toc11 Here] is a screenshot to show how OneKey works.
: [[rubikitch]] wrote Lisp:one-key-default.el for learning Emacs's default keymaps, [http://www.emacswiki.org/cgi-bin/emacs/OneKey#toc10 here] you can find the install tutorial.

==To Install==
: Add Lisp:one-key.el in your load-path, then add 
{{{
        (require 'one-key)
}}}
: in ~/.emacs .

==Usage==
* Move to ~/.emacs and run command `one-key-insert-template', 
: you will get the Keymap prompt:
:: "Keymap to One-Key: ", type the some keystroke, example "C-x r".
: And then you will got Title prompt:
:: "Title: ", input any name you like, example "bookmark".
: This will then insert the following template code in ~/.emacs:

{{{
        (defvar one-key-menu-bookmark-alist nil
          "The `one-key' menu list for BOOKMARK.")
       
        (setq one-key-menu-bookmark-alist
           '(
             (("C-@" . "point-to-register") . point-to-register)
             (("SPC" . "point-to-register") . point-to-register)
             (("+" . "increment-register") . increment-register)
             (("b" . "bookmark-jump") . bookmark-jump)
             (("c" . "clear-rectangle") . clear-rectangle)
             (("d" . "delete-rectangle") . delete-rectangle)
             (("f" . "frame-configuration-to-register") . frame-configuration-to-register)
             (("g" . "insert-register") . insert-register)
             (("i" . "insert-register") . insert-register)
             (("j" . "jump-to-register") . jump-to-register)
             (("k" . "kill-rectangle") . kill-rectangle)
             (("l" . "bookmark-bmenu-list") . bookmark-bmenu-list)
             (("m" . "bookmark-set") . bookmark-set)
             (("n" . "number-to-register") . number-to-register)
             (("o" . "open-rectangle") . open-rectangle)
             (("r" . "copy-rectangle-to-register") . copy-rectangle-to-register)
             (("s" . "copy-to-register") . copy-to-register)
             (("t" . "string-rectangle") . string-rectangle)
             (("w" . "window-configuration-to-register") . window-configuration-to-register)
             (("x" . "copy-to-register") . copy-to-register)
             (("y" . "yank-rectangle") . yank-rectangle)
             (("C-SPC" . "point-to-register") . point-to-register)
             ))
       
        (defun one-key-menu-bookmark ()
          (interactive)
          (one-key-menu "BOOKMARK" one-key-menu-bookmark-alist))
}}}

* Add the following to your ~/.emacs:
{{{
    (global-set-key (kbd "C-x r") 'one-key-menu-bookmark)
}}}

* Execute command: M-x eval-buffer RET.

: That's all. Then, when you type "Ctrl+x" and "r", OneKey will popup a help window to show commands and key descriptions.  Then you type, for example, "w" to execute the command "window-configuration-to-register".  In the same way you can type any key shown in the help window.

==Generate Template Code==
* You can use the command `one-key-insert-template" to insert template code in the current buffer.
* Or you can use command `one-key-show-template'.  It is like `one-key-insert-template', instead of inserting the template code, it shows it in a buffer called "One-Key-Template". 

: Thanks [[rubikitch]] add this feature! Very convenient! ;) -- AndyStewart

* I have added a major mode for the "One-Key-Template" buffer which binds some keys to useful functions to help you create your menu (E.g. "C-c C-t" to load the menu, "M-<up>/<down>" to move the current entry up/down, functions to sort the entries, etc.). I have also made a one-key menu for this mode so you just need to type M-x one-key-get-menu (or press the associated keybinding) in this mode to see the available helper functions. -- JoeBloggs
* Also, when you use the `one-key-show-template' or `one-key-insert-template' command, the default choices for keymap and title will be chosen according to the current major mode.
* Also you can edit an existing menu by pressing "C-/" in the menu. This keybinding can be configured (along with the
* keybindings for other fixed keys).

==Example Template Code==
: Lisp:one-key-config.el has many examples of template code for use with OneKey . 
:: Note: Lisp:one-key-config.el depends on many packages.  It is intended as an *example* of OneKey usage, not a standalone package.  Copy any code you like.

==Customize==
All the options below can be customized by M-x customize-group RET one-key RET

* Don't popup help window automatically:

: You can setup option `one-key-popup-window' with 'nil' if you don't like help window popup automatically the fist time call it.

* Number of items per line.

: You can setup option `one-key-items-per-line' to customize the number of items per line.
: If the value of this option is `nil', the number will be calculated by `window-width'.

* Maximum height of help window:

: Option `one-key-help-window-max-height' is the maximum height of the help window. 

* Name of help window.

: You can customize `one-key-buffer-name' to change the name of the help buffer.

* Buffer name for generate template code.

: You can customize `one-key-template-buffer-name' to change the buffer name that contain template code.

* Auto-load one-key menus

: If you have a lot of one-key menus you may want to keep them in seperate files instead of cluttering your .emacs file.
: You can define a directory in which to keep your one-key menus as seperate .el files, and have them automatically
: loaded at startup.

* Major mode associations

: You can associate a different one-key menu with each major mode which is opened by default for that mode.

==Tips==

: Type "?" to toggle help window display.
: Type "C-?" followed by one of the keys in the menu to show a description of the associated command.
: Type "q" to quit OneKey and hide help window.
: Type "C-b" to go back to the previous or toplevel menu

:: NOTE: The keystrokes above are built-ins for controlling the help window.  Of course if you bind them to another command, OneKey will instead execute that. 

:: And whatever your binding, you can use the keystroke "C-g" to abort OneKey. 

==Description==
The core function is `one-key-menu'.  Here is some more detail about its arguments.

* title:

: The title information shown in echo-area or help window for identified.

* info-alist:

: The alist contains help information, with the format (("KEY" . "HELP") . COMMAND)

* miss-match-exit-p

: Whether to hide the help window when you type a *mismatched* keystroke.

* recursion-p

: Whether recursion execute self until you type "q".

* protect-function

: The protect function to make OneKey execute it when exception abort OneKey.

* alternate-function

: The last function call after OneKey command execute.

* execute-last-command-when-miss-match

: Whether to execute last input command when miss matched keystroke alist.

==Related==
* Lisp:one-key-default.el -- default One Key configuration for learn Emacs keymaps.

:: Just add below code at the *bottom* of your ~/.emacs:
{{{
        (require 'one-key-default)
        (one-key-default-setup-keys)
}}}

* LazySearch -- A new search mode base on OneKey.

:: You can find it at Lisp:lazy-search.el .
:: And have some enhanced functions for LazySearch, at Lisp:lazy-search-extension.el .


==Screenshot==
OneKey show help window for remember:

[[image:OneKeyScreenshot]]

==Dialog==
: Do you know OneTwoThreeMenu? -- [[rubikitch]]
:: Wow, i have never heard it, and looks have same design purpose for remember keystroke.
:: At the beginning, i just want write a mode to help me remember keystroke and *free* my handy keystrokes for other extensions.
:: So i write OneKey, just for lazy.  -- AndyStewart

[new]
 I have a problem when assigning, for example, `mark-paragraph' function to a key, the paragraph is not marked. While using `M-x mark-paragraph' works! Any idea what is wrong?

[new]
I found Lisp:one-key-default.el a bit annoying: after loading it, I can't bind key to `C-x j',`C-x p' etc any longer (as `C-x' is no longer a prefix key), and I can't use `C-x C-h' to query the keybindings list either. Thus it is only useful for learning Emacs default keys. 

I wrote a new routine to bind e.g. `ESC C-x' to the one-key-menu. `C-x' is still a prefix key. You can add keybindings to `C-x j', you can use `C-x C-h' to query keybindings list and you can use `one-key-refresh-menu' to refresh the menu (after adding `C-x j', `C-x p' etc).
{{{
    (defun one-key-bind-keymap (key keymap-prefix)
      "Generate an one-key menu for keys starting with `keymap-prefix', and bind it to `key'.

    It also bind `keymap-prefix'-? to the same one-key menu, if not in use.

    For example, when called with ('ESC <f1>', '<f1>'), it would
    generate one-key menu 'one-key-menu-<f1>', and bind 'ESC <f1>'
    and '<f1> ?' to one-key-menu-<f1>.
    "
      (if (keymapp (key-binding (read-kbd-macro keymap-prefix)))
          (let ( (one-key-menu-sym (intern (format "one-key-menu-%s"
                               (replace-regexp-in-string " " "-" keymap-prefix)))) )
        (let ( (prefixed-?-key (read-kbd-macro (concat keymap-prefix " ?"))) )
          (unless (key-binding prefixed-?-key)
            (global-set-key prefixed-?-key one-key-menu-sym)))
        (with-temp-buffer
          (one-key-insert-template keymap-prefix keymap-prefix)
          (eval-buffer))
        (global-set-key (read-kbd-macro key) one-key-menu-sym))
        (message "'%s' is not a keymap-prefix" keymap-prefix)))

    ;; use it this way in your ~/.emacs
    (one-key-bind-keymap "ESC C-x" "C-x")


    (defun one-key-refresh-menu (fkey)
      (interactive "sfkey: ")
      (one-key-bind-keymap (concat "ESC " fkey) fkey))

    ;;use `M-x one-key-refresh-menu' at anytime to refresh the menu
    
}}}

[new]

I found that when I have (one-key-default-setup-keys) in my .emacs, I do not get the eshell prompt.
[new]
That is strange, it works fine for me [[JoeBloggs]]

[new]
