OneKey is designed to help you remember keybindings.  It saves you time and frees up your head!

[new]
Please send suggestions and bug reports to [http://www.emacswiki.org/emacs/JoeBloggs JoeBloggs], he's the new maintainer. Thanks! -- AndyStewart

[new]
JoeBloggs, why don't you put this on github.  This way you get issue tracking, git repo, etc all for free. -- LeWang

==What is OneKey ?==
OneKey is a popup help window which appears when you type a *Top Key*.
It shows *Keystrokes* and *Commands* in a help window.

With so many Emacs extensions, you have a lot of keystrokes to remember, and you probably forget most of them.

This package fixes that problem, and helps new users to learn the common keybindings.

One Key provides a single keystroke that when pressed presents you with a menu of choices in a popup window
for commands to execute with a further keystroke. By default menus for common prefix keys and commands are defined.

Just type one of the listed keystrokes to execute the corresponding command.

You can delete, edit, sort, highlight and filter the menu items, add new menu items and even add new menus.
You can have access to several different menus from the same window which can be navigated with the arrow keys.
Such a collection of menus is called a menu set and you can define several different menu sets containing different
types of menus.
Several different types of menus are defined (and more may be added) for holding different types of menu items.
For example the "major-mode" type opens the menu corresponding to the current major-mode.
More different types are defined by one-key extension libraries (e.g. `one-key-dir' for fast directory
tree navigation), or you can create your own types. See "Creating menus" below.

==Why do I need OneKey ?==
* *I am new to emacs and want to learn the common keybindings*
:: By default OneKey comes with a *top-level* menu containing submenus for all the common prefix keys and commands.
:: The emacs keybindings are displayed next to the commands to help you learn them. More frequently accessed items
:: are highlighted to help you quickly pick them out.
* *I have too many commands I need to remember*:
:: When I install lots of useful extension in Emacs I always forget the bindings for their commands because there are so many to remember.
:: OneKey contains a *major-mode* menu which contains the keybindings and menu items for the current major-mode, and it
:: also allows you to quickly find a command by filtering by regular expressions.
:: You can also easily create your own menus.
* *I don't have a spare, easy keystroke free to bind to a command.*:
:: Emacs has so many handy commands, but I don't have any keystrokes free to bind new commands to.

: OneKey provides a single top-level keystroke, which gives you access to kestroke menus in a pop-up window. 
: You simply type the keystroke shown in the window, which executes the corresponding command, or press the left/right
: arrow key to change to a different menu. You can also easily create your own menus.
: So you just need remember the Top keystroke, and the other keystrokes will be displayed in a pop-up window.


: [http://www.emacswiki.org/cgi-bin/emacs/OneKey#toc11 Here] is a screenshot to show how OneKey works.

==To Install==
: Add Lisp:one-key.el in your load-path, then add 
{{{
        (require 'one-key)
        (global-set-key (kbd "<menu>") 'one-key-open-default-menu-set)
}}}
: in ~/.emacs (replace "<menu>" with whatever top key you want to use).

==Usage==

Press the top key (e.g. "<menu>") and the *One-Key* buffer will popup.

===The *One-Key* buffer===

Running the command `one-key-open-default-menu-set' or `one-key-open-menu-set' opens the *One-Key* buffer.
(these commands may be bound to keys - see "Installation" below).

Within the *One-Key* buffer you will see a list of command descriptions each with a corresponding key in square
brackets to its left. Pressing the key executes the command.
Along the top of the buffer in the header line you will see a list of menu names. One of these names will be
highlighted and indicates the current menu. You can navigate between the different menus by pressing the left/right
arrow keys (unless these have been redefined to other keys in `one-key-special-keybindings', see below).

You can toggle the size of the window holding the *One-Key* buffer by pressing the appropriate special key (see below).
The window size is toggled between default size, large size (so that all items fit in the window), and hidden (window
is closed, but one-key is still active). This is useful if there are a large number of items in the menu, or when you
need to see part of the buffer that is obscured by the *One-Key* window.

By default one-key will quit and the *One-Key* window will close after pressing a key corresponding to one of the
menu items. If you want one-key to stay active after pressing an item key you should toggle the menu persistence
by pressing the appropriate special key (C-menu by default, see "Special keybindings" below).
To quit one-key and close the *One-Key* window press ESC. If you want to quit but keep the window open (e.g. to see
the keybindings for a major mode), press C-ESC.

===Special keybindings===

For each different type of menu certain "special" keybindings are defined which activate menu specific commands,
such as sorting or editing the menu items, adding new menus, etc.
These special keybindings are specific to each menu type, though many of them will be the same for all menu types.
For example the arrow keys are defined as special keybindings for navigating around menus.

Pressing the f1 key displays a help message listing all the special keybindings for the current menu.

By default, when a menu is created one-key will ensure that the keys corresponding to menu items do not clash with
the special keybindings for that menu type. However, if for some reason there is a clash then the menu item gets
priority over the special keybinding unless the help window is displayed (by pressing f1), in which case the special
keybinding gets priority.

You can alter or add new special keybindings by customizing `one-key-special-keybindings',
and `one-key-default-special-keybindings'.
Extension libraries (such as `one-key-dir' or `one-key-regs') may also define customizable special keys specific
to the menu type defined in the library.


===Creating menus===
 
All of the menus are stored in the file `one-key-menus-save-file' (customizable), but you should never need to
edit this file. Instead you can create and edit menus from within the *One-Key* buffer.
If you press the special key corresponding to "Add a menu" you will be prompted for the type of menu to add.
By default the following menu types are defined, but more may be added with extension libraries, or by creating
them yourself (see `one-key-types-of-menu'):

===Default menu types===

top-level         : contains items defined in `one-key-toplevel-alist', which by default contains common prefix key
                    menus, and menus for common commands to help new users learn emacs
blank menu        : creates a blank menu with no items
major-mode        : contains items corresponding to the current major mode (keybindings and menu-bar items)
existing menu     : prompts for an existing menu to use
existing keymap   : contains items in a given keymap (prompted for)
prefix key keymap : contains items whose usual keybindings begin with a given prefix key (prompted for)
menu-sets         : contains items for opening menu sets (see below)

===Saving menus===

If `one-key-autosave-menus' is non-nil then any new menus or menus that have been changed will be saved
on Emacs exit, unless they are listed in `one-key-exclude-from-save'
Alternatively you may save individual menus by pressing the special key for "Save the current state of menu"
(C-s by default).

===Menu sets===

A menu set is a collection of menu names. When you open the *One-Key* buffer with `one-key-open-default-menu-set'
it opens the default set of menus `one-key-default-menu-set'. You can define other sets of menus by customizing
`one-key-sets-of-menus-alist'. Each menu set consists of a name for the menu set, and a list of menu names.
one-key reconstructs a menu from its name by searching `one-key-types-of-menu' for a matching entry, and applying
the associated function to create the menu.
You can see what menu sets are currently defined, and switch menu sets, using the "menu-sets" menu.
See "Creating menus" above for info on how to add the "menu-sets" menu to the *One-Key* buffer.

===Other features===

Item help: to get help on a particular menu item press C-h followed by the key for the item. The help page
for the associated command will be displayed. If part of the *Help* buffer is obscured by the *One-Key* buffer,
you can hide the *One-Key* buffer by pressing the special key to toggle the display (<menu> by default).

Item brightening: By default the background colour of a menu item is increased relative to the brightness
of other items each time the item is executed. This means you can quickly find the most frequently used items
in a large menu. To turn this feature off set `one-key-auto-brighten-used-keys' to nil.

Sorting/ordering: you can sort the items in a menu by pressing the appropriate special key, and add new sort
methods by customizing `one-key-default-sort-method-alist'. The current sort method is displayed in the mode-line,
however this information is not guaranteed to be correct when the *One-Key* menu is initially opened.
You can also toggle between row/column ordering of items, and reverse the order of items.
By trying out different sort and ordering combinations you can find a configuration which is most readable,
or fits most items on screen. The order of menu items is persistent between sessions if the menus are saved
(see "Saving menus").

Filtering and colouring items: you can filter the items displayed to match a regular expression, or specify
the background colour of items that match a given regular expression (press f1 to see which key to press).
This can make the menus more readable. The background colours will be saved with the menu.

Editing menus: you can add, delete and edit menu items, and also copy or kill (i.e. cut) and yank (i.e. paste)
menu items from one menu to another. To copy or kill a bunch of items first make sure they are all highlighted
with the same background colour (doesn't matter if they have different brightness levels), and then press the
appropriate special key (press f1 for help). You will be prompted for an item in the group, and whether or not
you want to also kill (cut) the items from the current menu. The items will be saved in `one-key-copied-items' and
can be then be yanked (pasted) into another menu.
Any further copy/kills will overwrite the value of `one-key-copied-items', and you cannot retrieve previous kills
so take care.
You can also reposition items in a menu:
   1) press the appropriate specialkey
   2) press the key of the item to be moved
   3) use the up/down arrow keys to move the item
   4) exit one-key to fix the item

==Customize==
All the options below can be customized by M-x customize-group RET one-key RET

;; `one-key-default-menu-keys' : A list of chars which may be used as the default keys in automatically generated 
;;                               `one-key' menus.
;; `one-key-min-keymap-submenu-size' : The minimum number of elements allowed in a submenu when creating menus from 
;;                                     keymaps.
;; `one-key-popup-window' : Whether to popup window when `one-key-menu' is run for the first time.
;; `one-key-buffer-name' : The buffer name of the popup menu window.
;; `one-key-column-major-order' : If true then menu items are displayed in column major order, otherwise row major order.
;; `one-key-force-multi-column-keymap-menus' : If non-nil then one-key menus created from keymaps will have command 
;;                                             descriptions shortened to fit two columns.
;; `one-key-menu-window-max-height' : The max height of popup menu window.
;; `one-key-menus-save-file' : The file where `one-key' menus are saved.
;; `one-key-autosave-menus' : If non-nil then one-key menus will automatically be saved when created or changed.
;; `one-key-exclude-from-save' : List of regular expressions matching names of menus which should not be autosaved.
;; `one-key-include-menubar-items' : Whether or not to include menu items with no keybinding when creating one-key menus 
;;                                   from keymaps.
;; `one-key-item-foreground-colour' : Foreground colour of highlighted items in `one-key' menus.
;; `one-key-auto-brighten-used-keys' : If non-nil then set brightness of menu items colours according to how often the 
;;                                     keys are pressed.
;; `one-key-submenus-replace-parents' : If non-nil then when a submenu of a `one-key' menu is opened it will replace the 
;;                                      parent menu.
;; `one-key-major-mode-remap-alist' : A list of cons cells mapping major modes to one-key-menus.
;; `one-key-toplevel-alist' : The `one-key' top-level alist.
;; `one-key-sets-of-menus-alist' : Saved menu sets (sets of menus).
;; `one-key-default-menu-set' : The default menu set. It's value should be the car of one of the items in 
;;                              `one-key-sets-of-menus-alist'.
;; `one-key-default-sort-method-alist' : An alist of sorting methods to use on the `one-key' menu items.
;; `one-key-special-keybindings' : An list of special keys; labels, keybindings, descriptions and associated functions.
;; `one-key-default-special-keybindings' : List of special keys to be used if no other set of special keys is defined for 
;;                                         a given one-key menu type.
;; `one-key-menu-sets-special-keybindings' : List of special keys to be used for menu-sets menus (see 
;;                                           `one-key-default-special-keybindings' for more info).
;; `one-key-disallowed-keymap-menu-keys' : List of keys that should be excluded from one-key menus created from keymaps.
;; `one-key-types-of-menu' : A list of names of different types of `one-key' menu, and associated functions.
;; `one-key-persistent-menu-number' : If non-nil then when the default menu set is opened it will start with the same 
;;                                    menu as when previously opened.
;; `one-key-mode-line-message' : Form that when evaluated should produce a string for the mode-line in the *One-Key* 
;;                               buffer.


==Tips==

: Type "?" to toggle help window display.
: Type "C-?" followed by one of the keys in the menu to show a description of the associated command.
: Type "q" to quit OneKey and hide help window.
: Type "C-b" to go back to the previous or toplevel menu

:: NOTE: The keystrokes above are built-ins for controlling the help window.  Of course if you bind them to another command, OneKey will instead execute that. 

:: And whatever your binding, you can use the keystroke "C-g" to abort OneKey. 

==Description==
The core function is `one-key-menu'.  Here is some more detail about its arguments.

* title:

: The title information shown in echo-area or help window for identified.

* info-alist:

: The alist contains help information, with the format (("KEY" . "HELP") . COMMAND)

* miss-match-exit-p

: Whether to hide the help window when you type a *mismatched* keystroke.

* recursion-p

: Whether recursion execute self until you type "q".

* protect-function

: The protect function to make OneKey execute it when exception abort OneKey.

* alternate-function

: The last function call after OneKey command execute.

* execute-last-command-when-miss-match

: Whether to execute last input command when miss matched keystroke alist.

==Related==

* LazySearch -- A new search mode base on OneKey.

:: You can find it at Lisp:lazy-search.el .
:: And have some enhanced functions for LazySearch, at Lisp:lazy-search-extension.el .


==Screenshot==
OneKey show help window for remember:

[[image:OneKeyScreenshot]]

==Dialog==
: Do you know OneTwoThreeMenu? -- [[rubikitch]]
:: Wow, i have never heard it, and looks have same design purpose for remember keystroke.
:: At the beginning, i just want write a mode to help me remember keystroke and *free* my handy keystrokes for other extensions.
:: So i write OneKey, just for lazy.  -- AndyStewart

[new]
 I have a problem when assigning, for example, `mark-paragraph' function to a key, the paragraph is not marked. While using `M-x mark-paragraph' works! Any idea what is wrong?

[new]
I found Lisp:one-key-default.el a bit annoying: after loading it, I can't bind key to `C-x j',`C-x p' etc any longer (as `C-x' is no longer a prefix key), and I can't use `C-x C-h' to query the keybindings list either. Thus it is only useful for learning Emacs default keys. 

I wrote a new routine to bind e.g. `ESC C-x' to the one-key-menu. `C-x' is still a prefix key. You can add keybindings to `C-x j', you can use `C-x C-h' to query keybindings list and you can use `one-key-refresh-menu' to refresh the menu (after adding `C-x j', `C-x p' etc).
{{{
    (defun one-key-bind-keymap (key keymap-prefix)
      "Generate an one-key menu for keys starting with `keymap-prefix', and bind it to `key'.

    It also bind `keymap-prefix'-? to the same one-key menu, if not in use.

    For example, when called with ('ESC <f1>', '<f1>'), it would
    generate one-key menu 'one-key-menu-<f1>', and bind 'ESC <f1>'
    and '<f1> ?' to one-key-menu-<f1>.
    "
      (if (keymapp (key-binding (read-kbd-macro keymap-prefix)))
          (let ( (one-key-menu-sym (intern (format "one-key-menu-%s"
                               (replace-regexp-in-string " " "-" keymap-prefix)))) )
        (let ( (prefixed-?-key (read-kbd-macro (concat keymap-prefix " ?"))) )
          (unless (key-binding prefixed-?-key)
            (global-set-key prefixed-?-key one-key-menu-sym)))
        (with-temp-buffer
          (one-key-insert-template keymap-prefix keymap-prefix)
          (eval-buffer))
        (global-set-key (read-kbd-macro key) one-key-menu-sym))
        (message "'%s' is not a keymap-prefix" keymap-prefix)))

    ;; use it this way in your ~/.emacs
    (one-key-bind-keymap "ESC C-x" "C-x")


    (defun one-key-refresh-menu (fkey)
      (interactive "sfkey: ")
      (one-key-bind-keymap (concat "ESC " fkey) fkey))

    ;;use `M-x one-key-refresh-menu' at anytime to refresh the menu
    
}}}

[new]

I found that when I have (one-key-default-setup-keys) in my .emacs, I do not get the eshell prompt.
[new]
That is strange, it works fine for me [[JoeBloggs]]

[new]
