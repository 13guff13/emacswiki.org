OneKey help your remember keybinding, it save your time and free your head!

: Please send suggestions and bug reports to [http://www.emacswiki.org/emacs/JoeBloggs JoeBloggs], he's the new maintainer. Thanks! -- AndyStewart

==What's is OneKey ?==
OneKey is a mode popup help window when you type a *Top Key*.
And show *Keystroke* and *Command* in help window.

==Why need OneKey ?==
* *Too many command need to remember*:
:: When install so many useful extension in Emacs, i always forgot the keybinding for speical command, because so many command need to remember.
* *Haven't keystroke for binding handy command*:
:: Emacs have so many handy commands, but i can not found any keystroke for binding new command.

: OneKey provide a handle with TOP keystroke, and when you type TOP keystore, you will get a keystroke menu with pop-up window, and will show a group keystroke in pop-up window.
: Then you just type keystroke in window show, you can execute command corresponding. 
: So you just need remember the TOP keystroke with group command, others keystroke notify will dispal in pop-up window.

: [http://www.emacswiki.org/cgi-bin/emacs/OneKey#toc11 Here] have a screenshot to describe OneKey how to work.
: [[rubikitch]] have wrote Lisp:one-key-default.el for learn Emacs's default keymaps, [http://www.emacswiki.org/cgi-bin/emacs/OneKey#toc10 here] have install tutorial.

==Install==
: Add Lisp:one-key.el in your load-path, then add 
{{{
        (require 'one-key)
}}}
: in ~/.emacs .

==Usage==
* Move to ~/.emacs and run command `one-key-insert-template', 
: you will got Keymap prompt:
:: "Keymap to One-Key: ", type the some keystroke, example "C-x r".
: And then you will got Title prompt:
:: "Title: ", input any name you like, example "bookmark".
: Then will insert below template code in ~/.emacs:

{{{
        (defvar one-key-menu-bookmark-alist nil
          "The `one-key' menu list for BOOKMARK.")
       
        (setq one-key-menu-bookmark-alist
           '(
             (("C-@" . "point-to-register") . point-to-register)
             (("SPC" . "point-to-register") . point-to-register)
             (("+" . "increment-register") . increment-register)
             (("b" . "bookmark-jump") . bookmark-jump)
             (("c" . "clear-rectangle") . clear-rectangle)
             (("d" . "delete-rectangle") . delete-rectangle)
             (("f" . "frame-configuration-to-register") . frame-configuration-to-register)
             (("g" . "insert-register") . insert-register)
             (("i" . "insert-register") . insert-register)
             (("j" . "jump-to-register") . jump-to-register)
             (("k" . "kill-rectangle") . kill-rectangle)
             (("l" . "bookmark-bmenu-list") . bookmark-bmenu-list)
             (("m" . "bookmark-set") . bookmark-set)
             (("n" . "number-to-register") . number-to-register)
             (("o" . "open-rectangle") . open-rectangle)
             (("r" . "copy-rectangle-to-register") . copy-rectangle-to-register)
             (("s" . "copy-to-register") . copy-to-register)
             (("t" . "string-rectangle") . string-rectangle)
             (("w" . "window-configuration-to-register") . window-configuration-to-register)
             (("x" . "copy-to-register") . copy-to-register)
             (("y" . "yank-rectangle") . yank-rectangle)
             (("C-SPC" . "point-to-register") . point-to-register)
             ))
       
        (defun one-key-menu-bookmark ()
          (interactive)
          (one-key-menu "BOOKMARK" one-key-menu-bookmark-alist))
}}}

* Add below to ~/.emacs:
{{{
    (global-set-key (kbd "C-x r") 'one-key-menu-bookmark)
}}}

* Execute command: M-x eval-buffer RET.

: That's all, then you type "Ctrl+x" and "r", OneKey will popup a help window for show command and key describe, then you type "w" to execute command "window-configuration-to-register", alike you can type any key that show in help window.

==Generate Template Code==
* You can use command `one-key-insert-template" to insert template code in current buffer.
* Or you can use command `one-key-show-template', it similar with `one-key-insert-template', it show template code in buffer "One-Key-Template" instead insert.

: Thanks [[rubikitch]] add this feature! Very convenient! ;) -- AndyStewart

==Example Template Code==
: Lisp:one-key-config.el have many example template code to use OneKey . 
:: Note: Lisp:one-key-config.el need many depend packages, it just for show *example* of OneKey, not a standalone package for install, so copy any code you like.

==Customize==
All below option can customize by: M-x customize-group RET one-key RET

* Don't popup help window automatically:

: You can setup option `one-key-popup-window' with 'nil' if you don't like help window popup automatically when fist time call it.

* Number item per line.

: You can setup option `one-key-items-per-line' to customize number of items per line.
: If the value of this option is `nil', will calculated by `window-width'.

* Maximum height with help window:

: Option `one-key-help-window-max-height' is the maximum height that help window allowed.

* Name of help window.

: You can customize `one-key-buffer-name' to change the name of help buffer.

* Buffer name for generate template code.

: You can customize `one-key-template-buffer-name' to change the buffer name that contain template code.

==Tips==

: Type "?" for toggle help window display.
: Type "q" for quit OneKey and hide help window.
: Type "C-n" or "C-p" to scroll help window one line when it show.
: Type "C-j" or "C-k" to scroll help window one screen when it show.

:: NOTE: default above keystroke is build-in for control help window, of course you can define same keystroke to override them, and then OneKey is not respond build-in command, instead it execute command you binding.
:: And whatever you binding, you can use keystroke "C-g" to abort OneKey. 

==Describe==
The core function is `one-key-menu', now i describe some argument it used.

* title:

: The title information show in echo-area or help window for identified.

* info-alist:

: The alist contain help information, with format as (("KEY" . "HELP") . COMMAND)

* miss-match-exit-p

: Whether hide help window when you type a *mismatch* keystroke.

* recursion-p

: Whether recursion execute self until you type "q".

* protect-function

: The protect function to make OneKey execute it when exception abort OneKey.

* alternate-function

: The last function call after OneKey command execute.

* execute-last-command-when-miss-match

: Whether execute last input command when miss match keystroke alist.

==Related==
* Lisp:one-key-default.el -- default One Key configuration for learn Emacs keymaps.

:: Just add below code at the *bottom* of your ~/.emacs:
{{{
        (require 'one-key-default)
        (one-key-default-setup-keys)
}}}

* LazySearch -- A new search mode base on OneKey.

:: You can find it at Lisp:lazy-search.el .
:: And have some enhanced functions for LazySearch, at Lisp:lazy-search-extension.el .


==Screenshot==
OneKey show help window for remember:

[[image:OneKeyScreenshot]]

==Dialog==
: Do you know OneTwoThreeMenu? -- [[rubikitch]]
:: Wow, i have never heard it, and looks have same design purpose for remember keystroke.
:: At the beginning, i just want write a mode to help me remember keystroke and *free* my handy keystrokes for other extensions.
:: So i write OneKey, just for lazy.  -- AndyStewart

[new]
 I have a problem when assigning, for example, `mark-paragraph' function to a key, the paragraph is not marked. While using `M-x mark-paragraph' works! Any idea what is wrong?
