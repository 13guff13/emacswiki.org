The '''Thrush''' operators of [[ClojureMode|Clojure]], ##->>## and ##->##, let one chain functions together. For example,

    (->> (seq accounts)
         (filter #(= (:type %) 'savings))
         (map :balance)
         (apply +))

expands to

    (apply +
      (map :balance
        (filter #(= (:type %) 'savings)
          (seq accounts))))

It's analogous to the [http://en.wikipedia.org/wiki/Pipeline_%28Unix%29 Unix pipeline] operator.

== Elisp implementation ==

The following macros implement Thrush operators in Emacs Lisp.

    (defmacro ->> (&rest body)
      (let ((result (pop body)))
        (dolist (form body result)
          (setq result (append form (list result))))))

    (defmacro -> (&rest body)
      (let ((result (pop body)))
        (dolist (form body result)
          (setq result (append (list (car form) result)
                               (cdr form))))))

== External links ==

* [http://debasishg.blogspot.com/2010/04/thrush-in-clojure.html Thrush in Clojure]

[new]
Why do `Clojure people' insist on reinventing lisp?  How is this any different the various forms of reduce, curry, rcurry, etc. that have been around since Maclisp days??? That these macros can so readily be implemented in elisp is a case in point.  Down with immutable objects. Down with R. Hickey's kool aid and the sheep drinking it!!! Pages like this should go to the Elisp cookbook not used as banners for promoting the Java VM --[[mon_key]]

[new] 
Hm, I don't see any link to anything like the JVM.  What do you think about, say, ABCL?  In addition to that I don't understand why you are so annoyed?  Some people, especially programmers without a lisp background, like the ##->## operator (I happen to disagree since for me it reduces readability).  And I don't see how you would thread an expression through the following expressions with reduce, curry and rcurry.  But maybe I'm just too stupid. And immutability is more related to functional programming in general than it is to Clojure, or?  Kind regards -- StefanKamphausen

[new]
Hey monkey, where were you in 2009? I don't remember seeing your contributions
in 
[http://groups.google.com/group/comp.lang.lisp/browse_thread/thread/0d05837df1efe075 this]
very kool discussion on c.l.l. (and you sound like you *really* should have
been there).
On topic (hopefully) though, I have no idea what Clojure or "thrush" have to
do with CategoryExtensionLanguage -- is Emacs gonna run on JVM? So I second
the cookbook suggestion.
[new]
This page has little if anything to do with Emacs or Elisp (nor does this rant). Period. Clojure is a tacit endorsement of the JVM. I'm annoyed by Clojure devotees b/c they tend to pollute wikis (not just this one) with Clojure idioms as definitive examples of Lisp style/language. This type of behaviour is often propogandistic at best and generally comes across as shortsighted where it fails to acknowledge/understand the _long_ history of Lisp before Clojure. FWIW you don't find Common Lisp bozos spamming this site with examples of how to make Emacs lisp do reader marcros... nor do you find them taking the time to point out that Common Lisp didn't _need_ to make `thrush' like idioms first class objects because it provided reader macros, readtable, define-symbol-macro, make-dispatch-macro-character, etc. For my part, I was looking at Clojure in Autumn 2008 and was generally impressed (I still am). I'm sure you can search my posts on the gg group if you're freaky like that. However, my overall feeling about Clojure is that there are too many things about it it that preclude it from being a lisp. and this is what disillusioned me w/ Clojure. At the time I was following Clojure Hickey was explict about not wanting to include reader macros w/ the language. I found his rationale silly esp. as with them it is no longer particulary necessary (or good) to hardwire procedures like thrush and the user is free to design/modify them as needed.  W/re immutability it is related to Clojure b/c its design ontop of the Java/JVM _requires_ immutability; that some other languages with immutable data structurs employ a `functional' styles as a matter of course does not mean immutability of itself has anything to do with whether a programming language is of the `functional paradigm'. My impression is that RH promoted Clojure's immutableness as functional because the alternative view may lead many to conclue that that the language isn't a lisp and is crippled by its dependence on Java/JVM. --[[mon_key]]

[new] 
While I don't agree with all of your statements about the Clojure language (I do with some, or have other issues with that dialect of lisp) I absolutely agree that this page has little to do with Emacs.  Yesterday I tried to find a suitable place for this content and failed.  Maybe in the nifty tricks or in CategoryCode?  I wouldn't object to deletion of this content, or at least moving it somewhere else.  And while we're at it, we might as well remove this little discussion thread.  What do you think? -- StefanKamphausen

[new]
Discussion? I'm ranting :P By all means delete this trash. But, move the useful `thrush' code examples to the Elisp cookbook if you are so inclined. --[[mon_key]]
----
CategoryCode
