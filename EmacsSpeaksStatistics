Notice: The content from this page is being migrated to:

http://www.emacswiki.org/emacs/CategoryESS


Emacs Speaks Statistics (also sometimes called EmacsStatisticalSystem, but usually called ESS) is a package that integrates various statistical software with Emacs. S, R (a free implementation of S), Stata, and SAS modes are all supported by ESS, making it possible to hook writing and programming in Emacs right into your stats. It's pretty slick.

* ESS: http://ESS.R-project.org/

* R: http://www.r-project.org/

== ess-tracebug ==

[[http://code.google.com/p/ess-tracebug/|ess-tracebug]]  is a visual debugger and error tracer for ESS. 

== Icicles Completion for ESS ==

You can use [[Icicles]] [[completion]] in various ESS modes. Whenever there are multiple completion candidates, Icicles completion is used (if Icicle minor mode is on). This means you can [[Icicles - Cycling Completions|cycle]] to choose a candidate, complete using one or more substrings or [[regexp]]s ([[progressive completion]]), and so on. See [[Icicles - Completion in Other Buffers#ShellCommandCompletion|Icicles - Completion in Comint Modes]].

== Cool Key Binding: Use Shift+Enter to do Everything ==

The following lines on my .emacs allow me to do three things with just one key binding:

* if R if not running, it starts automatically and opens an inferior frame

* if a region is selected, executes the region

* otherwise, it runs the current line

This is quite useful, saves many keystrokes, especially starting R.


  (setq ess-ask-for-ess-directory nil)
  (setq ess-local-process-name "R")
  (setq ansi-color-for-comint-mode 'filter)
  (setq comint-prompt-read-only t)
  (setq comint-scroll-to-bottom-on-input t)
  (setq comint-scroll-to-bottom-on-output t)
  (setq comint-move-point-for-output t)

  (defun my-ess-start-R ()
    (interactive)
    (if (not (member "*R*" (mapcar (function buffer-name) (buffer-list))))
      (progn
	(delete-other-windows)
	(setq w1 (selected-window))
	(setq w1name (buffer-name))
	(setq w2 (split-window w1))
	(R)
	(set-window-buffer w2 "*R*")
	(set-window-buffer w1 w1name))))

  (defun my-ess-eval ()
    (interactive)
    (my-ess-start-R)
    (if (and transient-mark-mode mark-active)
	(call-interactively 'ess-eval-region)
      (call-interactively 'ess-eval-line-and-step)))


  (add-hook 'ess-mode-hook
	    '(lambda()
	       (local-set-key [(shift return)] 'my-ess-eval)))

  (add-hook 'inferior-ess-mode-hook
	    '(lambda()
	       (local-set-key [C-up] 'comint-previous-input)
	       (local-set-key [C-down] 'comint-next-input)))
  (require 'ess-site)

-- FelipeCsaszar

[new]
Be careful with the code above: 
(setq comint-prompt-read-only t)
appears to break ESS in the case where your prompt looks something like this as a result of successive evaluations from source code buffer:
> + + + > foo
>
Now if you put the cursor on this line and do C-c <RET>, which should normally copy foo to the current input line, you will lose the ability to communicate with R, and the only solution is to kill it.  Furthermore, it breaks some other modes that rely on comint (for instance, matlab.el).  I'd recommend commenting out that line.


== Show a tooltip summarizing the object at point ==

I wrote a blog entry showing how to get a tooltip to show a summary of the object at point in an R source buffer.  I use this a lot for interactive data analysis. You can read about it and watch a screencast at http://www.sigmafield.org/2009/10/01/r-object-tooltips-in-ess

== How can I get Emacs to automatically close brackets and parentheses? ==

Add the following to your .emacs file (from ESS mailing list https://stat.ethz.ch/pipermail/ess-help/2009-June/005411.html)

  ;; enable skeleton-pair insert globally
   (setq skeleton-pair t)
  ;;(setq skeleton-pair-on-word t)
   (global-set-key (kbd "(") 'skeleton-pair-insert-maybe)
   (global-set-key (kbd "[") 'skeleton-pair-insert-maybe)
   (global-set-key (kbd "{") 'skeleton-pair-insert-maybe)
   (global-set-key (kbd "\"") 'skeleton-pair-insert-maybe)
   (global-set-key (kbd "\'") 'skeleton-pair-insert-maybe)
   (global-set-key (kbd "\`") 'skeleton-pair-insert-maybe)
   (global-set-key (kbd "<") 'skeleton-pair-insert-maybe)

See also AutoPairs.


== Outline mode for .R files ==

I now have the following in my ~/.emacs file to enable Emacs' standard outline mode for .R files:

  (add-hook 'ess-mode-hook
            '(lambda ()
               (outline-minor-mode)
               (setq outline-regexp "\\(^#\\{4,5\\} \\)\\|\\(^[a-zA-Z0-9_\.]+ ?<- ?function(.*{\\)")
               (defun outline-level
                 (lambda () (interactive) (cond ((looking-at "^##### ") 1)((looking-at "^#### ") 2)((looking-at "^[a-zA-Z0-9_\.]+ ?<- ?function(.*{") 3) (t 1000)))
               )))

This can be seen as an adapted version of Heinz Tuechler's outline suggestion he postet to the ESS-help mailing list on 2007-05-11. The above will define the following heading levels in .R files:

  lines starting with #####  --> level 1
  lines starting with ####   --> level 2
  R functions                --> level 3

Although R functions are no "headings" really, I still imagine this could be a nice way of getting an overview over a larger .R file. I can't yet say whether it will prove useful for me in the long run.

-- Sven


== Question: ==
[new]
I like emacs and ess. I display 2 windows in the emacs frame when I run R in ess, one shows ess transcript, the other shows text output of R. When I plot, the graphic/image output is shown in a x11() device outside emacs.
I have to switch back and forth between emacs and the graphic/image output x11() frequently. Is it possible to integrate/embed the graphic/image output x11() into emacs windows. What I want is to display 3 windows in emacs frame, the third one is the realtime graphic/image output of x11(). Then I can run R, show text and graphic/image output together in the same emacs frame interactively.
[new]
Sounds like it could be a stretch to accomplish in Emacs, but it would also better support things like LogoMode, too.

Why not just tell X to display the R graphics window at one side of the Emacs window? This is the line I use in my .Xresources file: "R_x11*geometry: 500x500+658+0" (after editing the file, remember to run "xrdb -merge ~/.Xresources")  --FelipeCsaszar

[new]
I have another idea to accomplish this, and I think I'll try it myself and report back here when I do.  

Step 1: Set options(device = pdf)

This way, plotting functions will write to Rplots.pdf in the current directory

Step 2: Visit the Rplots.pdf file in an Emacs window using the doc-view package.  

Step 3:  Set Auto-revert mode for .pdf files (I have a hook in my .emacs that does this already).  

I think that would get done what you want.  --ErikIverson


== MS Windows Users: Get Started with Emacs, ESS, and R ==

I've been advising Windows users and setting up Windows systems this
week, and before I forget I need to write down what 
I've learned.  There are a few little details that people miss.

1. Install R from http://www.r-project.org.  If you let R install itself
into the folder it likes (##C:\Program Files\R##), 
your life may be easier later on.  (I say that even though I hate
directories with spaces in them.)

I usually have a reasonably current copy of that at
http://pj.freefaculty.org/software/WinProgs, but  you can always go 
to the source for the latest and greatest.

After you install R, you have the problem of installing additional
packages from CRAN.  I have a script called 
R_InstallFaves-2.R that I run inside R.  It downloads a ton of packages.
If you don't know how to run that inside R, 
then I'd suggest you either paste the whole program into an open R
session or use the source() function inside R.  Maybe 
you could wait and do that after you have completed the rest of the
steps here.

2. Install the newest version of Professor Goulet's Emacs modified for
Windows. His page is 
http://vgoulet.act.ulaval.ca/en/ressources/emacs/. It has ESS (Emacs
Speaks Statistics) setup inside there, along with 
other handy Emacs addons.  Professor Goulet's effort to package all of
that amazes me.

I keep a copy of that at http://pj.freefaculty.org/software/WinProgs

Inside the Emacs installation, notice there is a bin directory with a
program called "addpm.exe".  Run that to add known 
file types to your Windows Registry.

3. Get my customized startup configuration file for Emacs

http://pj.freefaculty.org/stat/ps706/50emacs-ess-ku.el

Install that in your Emacs folder. It MUST go under
site-lisp/site.start.d. It won't work if you put it anywhere else.

This has many features that will help a Windows user who is picking up
Emacs for the first time. As of 2010-02-10, that 
startup file is vital because it prevents you from hitting bugs that
make Emacs FAIL when interacting with ESS. I'm told 
future versions of Emacs will fix the problem (associated with the file
chooser).

That configuration file also has a convenient shortcut.  In a line of
code, the key combination SHIFT-Return
will send a command over to the open R buffer.

In particular, the changes I recommend for new Emacs users are intended to 
make Emacs behave like an ordinary Windows program, so it 

   - does not use horizontal splits

   - opens R in a new separate frame

   - starts R help items in separate frames

   - uses the mouse to select regions in the usual Windows way

   - uses Control-x, Control-v in the Windows way

   - blocks the use of the *buggy* windows file chooser, instead preferring the Emacs minibar at the bottom

   - stops the Emacs frame from overlapping the start menu when Emacs starts

4. Here's the *best way* to get started writing R programs in Emacs for
Windows.

Create a new folder where you want to do your work. In my systems, it is
a hierarchy like 
##C:\users\pauljohn\pols\R\examples##, but you can do whatever you like. It
is best to NOT use spaces in your names here. 
Win 2000 and XP screwed us over by putting user homes under "Documents
and Settings", so I create a folder on C where I 
keep my work.  Win7 and Vista use ##C:\Users##, which is OK, since it has no
spaces.

Download an example R file from my page and put it into the directory
you just created. I would urge you to try this one:

http://pj.freefaculty.org/stat/ps706/barplot.R

I suppose you are using the Windows Explorer to create the folder and
suppose you are looking at the folder where you 
put barplot.R.

RIGHT click on that file.  We want to open it in GNU Emacs, not with
some other program that Windows might suggest. So, 
when you RIGHT click, choose "open with" and if there is no option GNU
Emacs, then browse, go find your Emacs install 
directory, look under "bin", and choose the file "runemacs.exe".  Don't
choose "emacs.exe". DO choose "runemacs.exe".

Emacs will open with barplot.R in front of you. There are many ways to
start the R session, such as

1. Alt-x R

2. Click the big blue R in the toolbar.

3. Try to execute any line in barplot.R (Shift-Enter)

The customized emacs startup file I recommend tells R it should start in
the current working directory, so once the R 
buffer is visible, type this command to make sure:

> > getwd()
you should see that R is using your folder as its working space. That
means it will write files there and it will look 
for input files there by default.


pj

-- Paul E. Johnson email: pauljohn@ku.edu 

== ESS Remote with Screen ==
This is taken from https://stat.ethz.ch/pipermail/ess-help/2010-July/006202.html

Sometimes, you may want to work with a remote R session with Emacs and ESS using ess-remote.  However, the remote R process may be initialized in a screen session for attaching/detaching capabilities.  To get this working with emacs' shell-mode (note: there are issues with ansi-term and multi-term based on how ESS starts an R process; see above link from mailing list for more references).

1.  Place the following in .emacs:
;; used to send screen keybindings to shell in emacs
(define-key shell-mode-map (kbd "C-l") (lambda (seq) (interactive "k")
(process-send-string nil seq)))
(define-key inferior-ess-mode-map (kbd "C-l") (lambda (seq)
(interactive "k") (process-send-string nil seq)))

2.  In xterm (or the likes), ssh to the remote server and start
screen.  Detach it.  (Need to do this first as starting the initial
screen in emacs shell-mode becomes very ugly with the printing;
resuming the same screen session also becomes messy in xterm)

3.  In emacs, M-x shell.  Set:
$ TERM=xterm ## give clearing capabilities to shell-mode

4.  ssh to remote server.  screen -r to resume the screen session.
start R.  M-x ess-remote.

5.  Send R code from R source files like before!

6.  To detach or do anything screen related, precede EACH keybinding
with C-l.  For example, C-a C-d to detach will now be C-l C-a C-l C-d.
 Yes this is cumbersome, but I don't imagine screen keybinding to be
used much at this stage since we are developing and debugging R code
for say a simulation study =].

I would also like to note (for archival reasons) that ess-remote does
not work with ansi-term and multi-term because of the
inferior-ess-mode command, which stems from comint-mode and
inferior-ess-send-input.  If you remove this command in ess-remote,
you don't get an error but u can only send one line of code at a time
from the R file.
