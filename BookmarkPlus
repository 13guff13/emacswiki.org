This page is about library '''<tt>[[bookmark+.el]]</tt>''', which enhances vanilla Emacs [[bookmark]]s in many ways. 

The internal bookmark format (data structure) used by '''[::Bookmark+]''' is compatible with that of vanilla GnuEmacs. It extends that structure in new ways, to accommodate new bookmark types.

With '''Bookmark+''' you can use bookmarks that were created with any Emacs version in any other Emacs version. In particular, '''Bookmark+''' lets you use Emacs prior to release 23 with bookmarks created using Emacs 23 (or created using any older version). (See also [[#Compatibility]], below.)









[:FeatureOverview]
== Overview of Features ==

Here is an overview of the features that '''Bookmark+''' provides.  Some of
these are detailed further below.





=== Richer bookmarks.  They record more.  They are more accurate. ===

* You can ''[[#BookmarkTags|tag]]'' bookmarks, a la [[http://delicious.com|del.icio.us]].
This is perhaps the
     most important '''Bookmark+''' feature.  In effect, '''[::bookmark tag]s''' define
     bookmark ''sets''.  A bookmark can have any number of tags, and
     multiple bookmarks can have the same tag.  You can mark or
     show just the bookmarks with a given tag or a set of tags.

* Bookmark tags can in fact be more than just names.  They can
be full-fledged user-defined ''[[#TagsAsAttributes|attributes]]'', with EmacsLisp
objects as their values.

* Bookmarks record the ''number of visits'' and the ''time'' of the last
     visit.  You can sort, show/hide, or mark bookmarks based on
     this info.

* You can ''combine bookmarks'', to make composite, or [[#FunctionSequenceVarlistBookmarks|sequence]],
  bookmarks.  Invoking a sequence bookmark invokes each of its
  component bookmarks in turn.  A component bookmark can itself
  be a sequence bookmark.

* You can bookmark a ''[[region]]'' of text, not just a position.  When
     you jump to a bookmark that records a region, the region is
     activated (see [[option]] '''`bookmarkp-use-region-flag'''').  (Region
     activation is not supported for Gnus bookmarks.)

* Bookmarks are relocated better than for vanilla Emacs when the contextual text changes.  By default, when you visit a bookmark that requires relocation, the bookmark is then saved with the new, relocated position information. If you want to turn off this automatic saving, then customize user option '''`bookmark-save-new-location-flag'''' to `nil'.







[:AdditionalTypes]
=== Additional types of bookmarks. ===

* You can bookmark a [[DiredMode|Dired]] buffer, recording and restoring its
     `ls' switches, which files are marked, which subdirectories are inserted, and which (sub)directories are hidden.

* You can bookmark a [[buffer]] that is not associated with a file.

* You can bookmark the current [[DeskTop|desktop]], as defined by library
##desktop.el## -- use command '''`bookmarkp-set-desktop-bookmark''''
('''`C-x p K'''').  You can "jump" to (that is, restore) a 
saved desktop.  A desktop includes:

** Some global [[variable]]s.  To exclude variables normally saved, see option '''`bookmarkp-desktop-no-save-vars''''.

** The current set of buffers and their associated files. ''For each:'' its mode, [[point]], [[mark]], and some local variables.

* You can bookmark a [[Gnus]] article, a URL (if you use [[w3m|W3M]]), a PDF file (%%DocView%%), an image, or a UNIX manual page (from the output of Emacs
     command `[[ManMode|man]]' or `[[WoMan|woman]]').

* A bookmark can represent a function, which is invoked when
you "jump" to the bookmark.

* As mentioned above, a bookmark can represent a [[#FunctionSequenceVarlistBookmarks|sequence]] of
other bookmarks.

* A bookmark can represent a set of [[variable]]s and their values.

* You can bookmark buffer `##*Bookmark List*##' itself.  Jumping to such a
  bookmark restores the recorded [[#SortingBookmarks|sort]] order, [[#FilteringBookmarks|filter]], title, and [[#OmittingBookmarks|omit list]].





=== Type-specific jump commands. ===

* When you want to jump to a bookmark of a specific type (e.g. Dired), you can use a command that offers only such bookmarks as [[completion]] candidates.









=== Improvements for the bookmark list. ===

This is buffer `##*Bookmark List*##', aka the bookmark "menu list" (a misnomer), which you display using `C-x r l'.

* The last display state is saved (by default), and is restored
     the next time you show the list.  (''Tip:'' Use the bookmark list
     as your ''Home'' page at Emacs startup.)

* ''Marking''/unmarking is enhanced.  It is similar to [[DiredMode|Dired]]'s.

* You can easily mark or show different ''classes'' of bookmarks.

* [[Face]]s distinguish bookmarks by type:

** [[Info]] nodes
** [[Gnus]] articles
** [[w3m|W3M]] URLs
** Man pages (from `[[ManMode|man]]' or `[[WoMan|woman]]')
** local files with [[region]]s
** local files without regions
** local directories
** remote files or directories
** remote files or directories that must be accessed by `su' or `sudo' (`root')
** [[#BookmarkListViews|bookmark-list]] bookmarks
** [[DeskTop|desktop]] bookmarks
** [[#FunctionSequenceVarlistBookmarks|function]] bookmarks
** [[#FunctionSequenceVarlistBookmarks|sequence]] bookmarks
** [[#FunctionSequenceVarlistBookmarks|variable-list]] bookmarks
** non-file buffers
** buffers that don't currently exist
** possibly invalid bookmarks

* You can ''[[#SortingBookmarks|sort]]'' bookmarks in many ways.  You can easily define
     your own sort orders, even complex ones.

* You can regexp-search (`M-a') or query-replace (`M-q') the
     targets (destination files or buffers) of the marked bookmarks, in the
     current bookmark-list sort order.  For Emacs 23 and later, you can even search
     incrementally (`M-s a C-s', or `M-s a C-M-s' for [[regexp]]).

* You can save the current bookmark-list state and return to it
  later.  There are a few ways to do this, including
  bookmarking the list itself. See [[#BookmarkListViews]].

* You can use `##M-d >##' to open [[Dired]] for just the local file and
directory bookmarks that are marked (`##>##').

* If you use Emacs on Microsoft Windows, you can open bookmarks
according to Windows file associations.  (You will also need
library <tt>[[w32-browser.el]]</tt>.)

* You can use (lax) [[completion]] when you set a bookmark using `bookmark-set' (`C-x r m'),
choosing from existing bookmarks for the same buffer.  This
makes it easy to update a nearby bookmark (e.g. relocate it).  With a [[numeric prefix argument]] (or if there are no bookmarks for the buffer), you can choose from all bookmarks.

* You can edit a bookmark (its name and file name/location).

* A popup menu is available on '''`mouse-3'''', with actions for the
individual bookmark you point to.

:: [[image:BookmarkPlusThisBookmarkMenu]]

* A complete menu, '''`Bookmark+'''', is provided on the [[menu bar]].
Use it, in particular, when you don't remember a key binding.
The same menu is available on '''`C-mouse-3''''.


:: [[image:BookmarkPlusMenuBarMenu]]

: It has submenus '''Mark''', '''Omit''', '''Tags''', '''Show''', '''Sort''', '''Jump''', and '''Define Command''':

;;; '''Mark''': [[image:BookmarkPlusMenuBarMenuMark]]
;;; '''Omit''': [[image:BookmarkPlusMenuBarMenuOmit]]
;;; '''Tags''': [[image:BookmarkPlusMenuBarMenuTags]]
;;; '''Show''': [[image:BookmarkPlusMenuBarMenuShow]]
;;; '''Sort''': [[image:BookmarkPlusMenuBarMenuSort]] 
;;; '''Jump''': [[image:BookmarkPlusMenuBarMenuJump]]
;;; '''Define Command''': [[image:BookmarkPlusMenuBarMenuDefineCommand]]

* The vanilla '''Bookmarks''' menu, which is typically a submenu of the '''Edit''' menu-bar menu, is modified by adding a few items from the '''`Bookmark+'''' menu, including the '''Jump To''' submenu (called '''Jump To Bookmark''' there).








=== Multiple bookmark files. ===

Although vanilla Emacs lets you load different bookmark
files, this feature is not well supported, if not
contradictory.  With '''Bookmark+''' you can easily switch among
alternative bookmark files or load multiple files into the
same session, accumulating their bookmark definitions.







[:BookmarkPrefixKeys]
=== Dedicated prefix keys. ===

Prefix '''`C-x p'''' is used for bookmark keys, in general.  The
vanilla keys on prefix `C-x r' are still available also, but that
prefix is shared with [[register]] commands, making it less convenient for bookmarks.  Using `C-x p' lets
you focus on bookmarks.

Prefixes '''`C-x j'''' and '''`C-x 4 j'''' (for other-window) are used for bookmark jump commands. Again, a dedicated prefix key
helps you focus on one kind of action (jumping).





[:BookmarkHelp]
=== Helpful help. ===

* Information about individual bookmarks.

** Anywhere in Emacs, '''`##C-x p ?##'''' (command '''`bookmarkp-describe-bookmark'''' describes
any bookmark.  With a [[prefix argument]], it shows you the
full information that defines it (internal form).

** In the bookmark list, '''`C-h RET'''' (or '''`C-h C-RET'''') describes
the bookmark under the [[cursor]].  Again, a prefix arg means
show the full (internal) information.


* General '''Bookmark+''' documentation.

** Anywhere in Emacs, '''`##M-x bookmarkp-bmenu-mode-status-help##''''  shows detailed information about the current state of the bookmark list. Click button `##Doc in Commentary##' or button `##Doc on the Web##' to
access the complete documentation.  (Use button `Customize' to customize all '''Bookmark+''' [[face]]s and [[option]]s.)

** In the bookmark list, '''`##?##'''' and '''`C-h m'''' are the same as `M-x bookmarkp-bmenu-mode-status-help'.    (`C-h m' in the bookmark list does not show you info about minor modes. If you want that, use `M-x describe-mode'.)

** In the `bookmark-plus' group customization buffer (`M-x customize-group bookmark-plus'), click button `Commentary'.








[:Icicles]
=== Synergy with Icicles. ===

'''[[Icicles]]''' works with '''Bookmark+''' to provide enhanced bookmark jumping (visiting), setting, and help.  It gives you a
bookmark browser.  See [[#UseBookmarkPlusWithIcicles|Use Bookmark+ with Icicles]].








[:TypeSpecificJumpCommands]
== Different Types of Jump Commands ==

When you jump to a bookmark, you can use [[completion]] to specify the
bookmark name.  With '''Bookmark+''' you can easily have a large number
of bookmarks.  If you want to jump to a bookmark of a specific
type, such as Info, you can use a '''Bookmark+''' command that is
specific to bookmarks of that type: only those bookmarks are
completion candidates.

Commands '''`bookmarkp-jump-to-type'''' and
'''`bookmarkp-jump-to-type-other-window'''' prompt you first for the
type of bookmark you want to jump to, then for a bookmark of that
type (only).

In addition to these general commands, there are type-specific
commands: `##bookmarkp-##<tt>__dired__</tt>##-jump##', `##bookmarkp-##<tt>__info__</tt>##-jump##', and so
on.  Such commands are bound to keys that have the prefix '''`C-x j''''.
`bookmarkp-dired-jump' is bound to `##C-x j## <tt>__d__</tt>',
`bookmarkp-info-jump' to `##C-x j## <tt>__i__</tt>', and so on.

There are several commands for jumping to a bookmark with ''tags''.
The completion candidates can be those bookmarks that have ''all''
tags in a given ''set'', ''some'' tags in a given ''set'', ''all'' tags matching a
''regexp'', or ''some'' tags matching a ''regexp''.  You are prompted for the
set of tags or the regexp to match.  These commands all have the
[[prefix key]] '''`##C-x j## <tt>__t__</tt>'''', with the regexp-matching ones having the
prefix key '''`##C-x j## <tt>__t %__</tt>''''.  The key suffix is '''`##*##'''' for "all" and '''`##+##'''' for "some".  For example, `##C-x j t % +##' jumps to a bookmark you choose that has one or more tags that match the regexp you input.


There is an other-window version of most jump commands, and it is
bound to the same key as the same-window command, except the prefix is '''`C-x 4 j'''', not `C-x j'.  for instance, `bookmarkp-dired-jump-other-window' is bound to
`C-x 4 j d'.

These bindings round out the jump-command prefix keys:

  C-x j j    - bookmark-jump
  C-x j :    - bookmarkp-jump-to-type

  C-x 4 j j  - bookmark-jump-other-window
  C-x 4 j :  - bookmarkp-jump-to-type-other-window

The `C-x j' and `C-x 4 j' bindings are global.  In addition, in some modes '''`j'''' is
bound to the corresponding type-specific jump command.  For
example, in Info mode, `j' is bound to `bookmarkp-info-jump'.
(Dired is an exception here: '''`J'''' is used instead of `j', since `j'
is already taken for `dired-goto-file'.)  These commands are also
added to the mode's menu-bar menu.

In Dired mode, '''`C-j'''' is bound to a special Dired-specific jump
command, `bookmarkp-dired-jump-current', whose destinations all
use the current Dired directory.  The aim of `C-j' is not to
change directories but to change to a different set of markings,
switches, inserted subdirectories, or hidden subdirectories for the same Dired directory.


Finally, in addition to the predefined bookmark types, which you
can use as described above, you can define a "type"-specific jump
command for any set of bookmarks.  That is, you can use any
specific set of bookmarks as the completion candidates for a new
jump command.  Such a set is really only a pseudo-type: the actual
bookmarks can each be of any type.

You could use this feature, for example, to define a jump command
for the bookmarks that belong to a given project.

To define such a command, you first mark the bookmarks that you
want to be the completion candidates, then you use '''`M-c'''' (command
'''`bookmarkp-bmenu-define-jump-marked-command'''') in the bookmark
list.










[:BookmarkTags]
== Bookmark Tags ==

With '''Bookmark+''' you can bookmark several kinds of Emacs object.
Bookmarks record locations -- that is their primary purpose.  They
can also record annotations: general free-text descriptions of
your choosing.

'''Bookmark+''' bookmarks can also be ''tagged'', in [[http://delicious.com|del.icio.us]] style, as a
way to organize them, which also means as a way to organize the
objects that are bookmarked.  A '''[::bookmark tag]''' is a string that contains no
newline characters.

You can add as many tags as you like to any bookmark, and multiple
bookmarks can have the same tag(s).  In fact, that's the whole
idea behind using them for organizing.

This feature is unrelated to the fact that bookmarks record
locations and are useful for navigating.  You can, if you want,
use bookmarks to tag files in various ways purely for purposes of
organizing them (e.g. into projects), whether or not you ever use
the bookmarks as a way to visit them.

For example, if you use '''[[Dired+]]''' (library <tt>[[dired+.el]]</tt>), then you can use
'''`M-b'''' (`diredp-do-bookmark') in Dired to create a bookmark for each of the
marked files in the Dired buffer.  Even if you never use those
bookmarks for navigating to the files, you can use them with tags
to organize the files.  See also [[#WindowsFileAssociations|Open Bookmarks Using Windows File Associations]], below.

To make tags more useful, '''Bookmark+''' provides lots of commands: for
adding or removing tags, and for marking or unmarking bookmarks
that are tagged in various ways.  When combined with other
'''Bookmark+''' commands (e.g. search, query-replace) that apply to the
marked bookmarks in the `##*Bookmark List*##' window, you can really
do quite a lot using bookmark tags.  Use your imagination!  See [[#TagCommandsAndKeys]]), below, for more about this.







[:TagsAsAttributes]
== Bookmark Tags Can Have Values ==

Bookmark tags are simply names (strings) when you create them.  Nearly all
of the predefined operations that use tags use these names:
sorting, marking, and so on.  But you can in fact add an associated
value to each tag.  This means that a tag can act just like an object
''attribute'' or property: it can be a name/value pair.

To add a value to a tag, or to change the current value, you use
command '''`bookmarkp-set-tag-value'''', bound to '''`##T v##'''' in the bookmark
list.  You are prompted for the bookmark, the tag, and the new
value.

A tag value can be a number, [[symbol]], string, list, vector, and so
on.  It can be as complex as you like.  It can be any EmacsLisp object that has read syntax, that is, that
is readable by the Lisp reader.  (Everything that is saved as part
of a bookmark must be readable; otherwise, your bookmark file
could not be read (loaded).)

Because tag values can be pretty much anything, you are pretty
much on your own when it comes to making use of them.  '''Bookmark+'''
does not provide predefined functions for using tag values.  In general,
tag values are something you will use with home-grown Lisp code
for your own purposes.

However, you can easily make some interactive use of tag values
with little effort.  You can, for example, define a predicate that
tests whether a bookmark has a tag value that satisfies some
property (e.g. is a number greater than 3.14159265358979), and then you can
use command '''`bookmarkp-bmenu-mark-bookmarks-satisfying'''' to mark
those bookmarks.

Tags that have the prefix '''##"bookmarkp-"##''' are reserved -- do not name
your own tags using this prefix.
Currently, '''##"bookmarkp-jump"##''' is the only predefined bookmark tag.
You can give this tag a value that is a function -- it is called
whenever the tagged bookmark is visited.  Any Lisp-readable
function value is allowed: a symbol or a lambda expression.

For example, you can use `##T v (lambda () (message "Hello!"))##' to
display ##Hello!## whenever a bookmark with this tag is visited.

The function that is the value of a ##"bookmarkp-jump"## tag is called
just after the the standard hook `bookmark-after-jump-hook' is invoked.
You can use this tag to invoke functions that are specific to
individual bookmarks; bookmarks can thus have their own, extra
jump functions.








[:FunctionSequenceVarlistBookmarks]
== Function, Sequence, and Variable-List Bookmarks ==

Bookmarks are typically thought of only as recorded locations.
Invoking a bookmark, called "jumping" to it, traditionally means
just visiting its location.  '''Bookmark+''' looks at bookmarks in a
more general way than that.  A bookmark is a shortcut of some
kind -- nothing more.

A given type of bookmark is defined by its handler function,
which really could do anything you like.  We've already seen the
examples of region bookmarks, which restore the active region, and
Dired bookmarks, which restore a set of Dired markings, switches,
inserted subdirectories, and hidden (sub)directories.

A '''function bookmark''' simply invokes some function -- any function.
You can, for instance, define a window or frame configuration and
record that as a bookmark.  Then jump to the bookmark to switch
contexts.  (You can also bookmark a [[DeskTop|desktop]] and jump to that.)

Function bookmarks might not seem too interesting, since we have
other ways of invoking functions in Emacs.  But the other features
of '''Bookmark+''' combine with this feature.  You can, for instance,
tag such bookmarks.

And you can combine them, invoking the functions sequentially.
This is just a particular case of using a '''sequence bookmark''',
which simply records a sequence of bookmarks.  The bookmarks in a
sequence can be of any kind, including other sequence bookmarks.

Command '''`bookmarkp-make-function-bookmark'''' creates a function
bookmark -- you give it a function symbol or a lambda expression.
Command '''`bookmarkp-bmenu-make-sequence-from-marked'''' creates a
sequence from the marked bookmarks in the bookmark list, in their
current order.

A '''variable-list''' bookmark saves and restores the values of a set of
variables.  Command '''`bookmarkp-set-varlist-bookmark'''' prompts you
for the variables to include in the list and then sets the
bookmark.  Command `bookmarkp-jump-varlist' ('''`C-x j v'''') restores
the recorded variable values for the bookmark's buffer.

If you use library <tt>[[wide-n.el]]</tt> (see MultipleNarrowings), then you can move among multiple
restrictions (narrowings) in a buffer.  The restrictions are
stored in buffer-local variable `wide-n-restrictions'.  Command '''`bookmarkp-set-restrictions-bookmark'''' bookmarks this value
for the current buffer.  Jumping to such a bookmark restores the
saved ring/stack of restrictions.




[:BookmarkListViews]
== Bookmark-List Views - Saving and Restoring State ==

The bookmark list (buffer `##*Bookmark List*##') provides a view into
the set of bookmarks.  You can mark, sort, and hide (filter, omit)
bookmarks --- see [[#BookmarkListDisplay]].  The state of the
displayed bookmark list can thus change.

At different times, and in different contexts, different views can
be useful.  '''Bookmark+''' lets you save the current state of
the displayed list and later restore it.  There are a couple of 
different ways to do this.







[:QuittingSaves]
=== Quitting Saves the Bookmark-List State ===

If option '''`bookmarkp-bmenu-state-file'''' is non-`nil', which it is by
default, then '''Bookmark+'''
remembers the last state of the bookmark list when you quit it or
you quit Emacs, and it restores that state when you show the list
again (which could be in the next Emacs session).  You can think of
this feature as your ''Home'' page for bookmarks, giving you a
stepping stone to the files and directories you use most.

If, for example, when you quit the bookmark list you are showing only bookmarks to [[Info]] nodes and UNIX manual pages, sorted in a particular way, and with some of them marked for particular processing, then the next time you open the list the same state is restored: the same set of bookmarks is shown, in the same order, with the same markings.

You can turn off this automatic bookmark-list display state saving, if you want, by customizing option '''`bookmarkp-bmenu-state-file'''' to `nil'. And you can toggle this option at any time, using '''`M-l'''' in the bookmark list (command '''`bookmarkp-toggle-saving-menu-list-state''''). In particular, if you want your next visit to the bookmark list to start out with a ''previously'' recorded state instead of the current state, just hit `M-l' before quitting the bookmark list.








[:StateRestoration]
=== State-Restoring Commands and Bookmarks ===

In addition to automatically saving/restoring the final
bookmark-list display state, you can save this state at any time, any
number of times, for later restoration.  This gives you the
ability to create multiple persistent views of your bookmarks.

There are two ways to do this:

* Create a bookmark for the `##*Bookmark List*##' buffer itself.
* Define a command that restores the bookmark-list state.

When you use `C-x r m' (`bookmark-set') in buffer `##*Bookmark List*##' to
create a bookmark, the current sort order, filter, title, and omit
list are saved as part of the bookmark.  (These concepts are
described below --- see [[#BookmarkListDisplay]].)  Jumping to
such a bookmark restores all of these.

[:bookmarkp-bmenu-define-command]
Alternatively, you can define a command that does the same thing,
but without creating another bookmark -- use '''`c'''' (`bookmarkp-bmenu-define-command') in the bookmark
list to do this.  You are
prompted for the name of the new command.  Use the command anytime
(including in another Emacs session) to restore the bookmark list.

Define any number of such commands for the views you use.  The
file for saving the definitions (see option
'''`bookmarkp-bmenu-commands-file'''') is never overwritten, so you can
also add other code to it manually, if you want.  The file is read
the first time the bookmark list is displayed in a given Emacs
session.

The state that is saved and restored using a bookmark-list bookmark or a
command defined using `c' is only a partial state.  The current
set of markings and some other information are not saved, in order
to save disk space and save/restore time.

[:bookmarkp-bmenu-define-full-snapshot-command]
Sometimes, however, you really want to save the entire
bookmark-list state, creating a full snapshot.  You can use '''`C''''
(`bookmarkp-bmenu-define-full-snapshot-command') to do that.  This
defines a command that restores the bookmark list completely.
That is the same thing that happens automatically (by default)
whenever you quit the bookmark list (or Emacs), but defining
snapshot commands lets you have multiple saved states and switch
to them at will.

''Be aware, however'', that full-snapshot command definitions can be
quite large, since they each contain a copy of the current
bookmark list and any accessory lists (hidden and marked bookmarks
etc.).

Whether you use `c' or `C' to define a state-restoring command or
you create a bookmark-list bookmark, you can create a ''sequence
bookmark'' that combines such bookmark-list restoration with
activation of other bookmarks.  (To include a state-restoring
command in a sequence, you need to first create a function
bookmark that uses the command, and then include that bookmark in
the sequence.)









[:UsingMultipleBookmarkFiles]
== Using Multiple Bookmark Files ==

Bookmark-list views (see [[#BookmarkListViews|Bookmark-List Views]]
provide
one way to switch among various sets of bookmarks that you use.
But that feature affects only the bookmarks that you see displayed
in buffer `##*Bookmark List*##', not the actual set of available
bookmarks.

The bookmarks available to you are defined in a ''bookmark file''.  By
default, they are stored in the file named by option
'''`bookmark-default-file'''' (`##~/.emacs.bmk##', by default).  You do not
need to load or save this file manually; Emacs does that for you
automatically.

But you can also have extra, alternative bookmark files if you
want, and at any time you can change the bookmark file that is
current.  To do that, use '''`C-x p L'''' (uppercase `L'), which is
bound to command '''`bookmarkp-switch-bookmark-file''''.  You can see
which file is current by using `##?##' or `C-h m' in the buffer
`##*Bookmark List*##' (or anywhere else using `##M-x bookmarkp-bmenu-mode-status-help##').

Having multiple bookmark files gives you an added degree of
flexibility, but you must keep track of these extra bookmark files
yourself -- they are not managed for you automatically.

When bookmarks are saved automatically, or when you save them
using `bookmark-save' (`S' in the bookmark list or `C-x p s'
globally) and you don't use a [[prefix argument]], they are saved in
the current bookmark file.

You can turn off the automatic saving of the current bookmark
file, by customizing option '''`bookmark-save-flag'''' to `nil'.  And you
can toggle this option at any time, using '''`##M-~##'''' in the bookmark
list (command '''`bookmarkp-toggle-saving-bookmark-file'''').

Besides using multiple bookmark files as alternatives,
you can combine them, using them as component bookmark subsets (like modules).
To do that, use command '''`C-x p l'''' (lowercase `l'), which is bound
to '''`bookmark-load'''', and do not use a prefix argument.  (Using a
prefix argument with `C-x p l' is the same as using `C-x p L': it
''switches'' bookmark files.)

To ''create additional bookmark files'', to use as either alternatives
or component files, you can either copy an existing bookmark file
or use '''`bookmarkp-empty-file'''' ('''`C-x p 0'''') to create a new, empty
bookmark file.  If you use `C-x p 0' with an existing bookmark
file, then its bookmarks are all deleted -- it is emptied.

Instead of simply copying a bookmark file, you can use
`bookmark-save' with a prefix argument, or use `bookmark-write'
(bound to `C-x p w'), to save the currently defined bookmarks to a
different bookmark file.

However a bookmark file was created, you can switch to it and then
add or delete bookmarks selectively, to change its content.
Remember that you can delete bookmarks from the current set using
command `bookmark-delete' (`C-x p d') or, in the bookmark list,
using `d' plus `x' or marking then `D'.









[:BookmarkListDisplay]
== Bookmark List (Display) ==

'''Bookmark+''' enhances the bookmark list (aka the bookmark "menu list", a misnomer) that is displayed in buffer `##*Bookmark List*##' when you use `C-x r l' (command `bookmark-bmenu-list').

Bookmarks are highlighted to
indicate their type. You can mark and unmark bookmarks, show or
hide bookmarks of particular types, and more.  Bookmarks that have tags are marked with a '''`t''''.  Bookmarks that have an annotation are marked with an '''`a'''' (not with a `##*##' as in vanilla ##bookmark.el##).

Use `##?##' or `##C-h m##' in buffer `##*Bookmark List*##' for more
information about the bookmark list, including the following:

* The current status of sorting, filtering, and marking.
* A legend for the faces used for different bookmark types.








[:TagCommandsAndKeys]
=== Tag Commands and Keys ===

There are lots of tag-related bookmark commands, and they are all
bound to keys in buffer `##*Bookmark List*##'.  How can you keep them
straight or remember the keys?  `##C-h m##' is your friend, of course.
Beyond that, the tag-related keys are organized as follows:

They all have the prefix key '''`T''''.

* '''`m'''' means __m__ark
* '''`u'''' means __u__nmark
* '''`##>##'''' stands for the marked bookmarks
* '''`##*##'''' means AND (set intersection; all)
* '''`##+##'''' means OR  (set union; some/any)
* '''`##~##'''' means NOT (set complement)

The key `##T m *##', for instance, marks (`m') the bookmarks that are tagged
with ''all'' (`##*##' = AND) of a given set of tags.  It prompts you for one or more
tags that the bookmarks must have, and it marks all bookmarks that
have all of the tags you enter.

The key `##T u ~ +##' unmarks (`u') the bookmarks that do ''not'' (`##~##') have ''any'' (`##+##' = OR) of
the tags you specify.  And so on.  The marking and unmarking commands for tags
compare the tags a bookmark has with tags that you enter.  Any
bookmarks that have no tags are ignored -- they are neither marked
nor unmarked by these commands.

'''`##+##'''' and '''`##-##'''' can also mean ''add'' and ''remove'' tags, respectively, and
'''`##>##'''' stands for the ''marked'' bookmarks.  So `##T > +##' adds (`##+##') one or more
tags to each of the marked (`##>##') bookmarks.

In general, the tag-related commands let you enter a ''set'' of tags,
one at a time.  Thus, instead of having a command that adds a single
tag to the current bookmark, you have a command that adds any number
of tags to it.  To add just a single tag, hit `RET' twice: once
to enter the tag, and once again to indicate that it is the last (i.e., the only)
one.

If you just hit `RET' immediately, specifying an empty set of tags, 
then each of the commands does something different, but reasonable.  For `##T m *##',
for instance, an empty list of tags means to mark (only) the bookmarks
that have some tags (any at all).

Finally, for the marking/unmarking tags commands, a [[prefix argument]]
flips the sense of the command, in this way:

* "some are" --> "some are NOT", i.e., "not all are" (and vice versa)
* "all are"  --> "all are NOT",  i.e., "none are"    (and vice versa)

In other words:

  C-u T m *    =  T m ~ +  (all are NOT      = not some are)
  C-u T m ~ +  =  T m *    (not some are NOT = all are)
  C-u T m +    =  T m ~ *  (some are NOT     = not all are)
  C-u T m ~ *  =  T m +    (not all are NOT  = some are)

You'll figure it out ;-).

Remember that '''`C-h RET'''' shows you the tags that belong to the
current bookmark (under the [[cursor]]).  And '''`C-u C-h RET'''' shows you
the full internal form of the tags, that is, the name+value pairs.

You can also sort bookmarks according to how they are tagged, even
in complex ways.  See [[#SortingBookmarks]].









[:BookmarkSets]
=== Sets of Bookmarks ===

The best way to think about tags is as ''names'' of persistent ''sets''.  All
bookmarks tagged `blue' constitute the bookmark set named `blue'. The bookmarks visible in the bookmark list at any time also constitute an unnamed set. Likewise, the marked bookmarks and the unmarked bookmarks are unnamed sets. '''Bookmark+''' is all about helping you act on sets of Emacs objects. Bookmarks are named, persistent pointers to objects such as files and file sets. Bookmark tags are named, persistent sets of bookmarks (and hence of their target objects).

The marking commands make it easy to combine sets as unions or
intersections.  And you can give the result a name for quick
access later, just by adding a new tag.  In other words, do the
set-definition work only once, and name the result.  

How would you tag as `##Java IDE Projects##' the bookmarks that are already
tagged both `Java' and `ide'?

# `##T m * Java RET ide RET RET##', to mark them.

# `##T > + Java IDE Projects RET RET##, to tag them.


How would you sort your bookmarks, to show all those tagged both `blue' and `moon' first?

# `##T m * blue RET moon RET RET##', to mark them.

# `##s >##' to sort the marked bookmarks first (see [[#SortingBookmarks]], below).

If you wanted to show only the marked bookmarks, instead of sorting to put them first in the list, you would use `##>##' instead of `##s >##'.

How would you query-replace the set of files that are tagged with
''any'' of the tags `alpha', `beta', and `gamma', but are ''not'' tagged
`blue' or `moon'?

# `##F S##', to show only the file bookmarks (see [[#FilteringBookmarks]], below).

# `##T m + alpha RET beta RET gamma RET RET##', to mark the
bookmarks that have at least one of those tags.

# `##T u + blue RET moon RET RET##', to unmark those that are tagged `blue' or `moon'.

# `M-q' to query-replace the marked files.


If that were a set of files that you used often, then you would name the set by giving the files a new tag.

The point is that bookmarks, and bookmark tags in particular, let you define and manipulate sets of Emacs objects. It doesn't matter how you define such a set: regexp matching (marking, filtering), by object type, by tag combinations... Sets need not be named to act on them, but you can provide them with persistent names (tags) to avoid redefining them over and over. Manipulation of bookmarked objects includes visiting, searching, and query-replacing. And you can define your own bookmark types (using bookmark handlers) and associated manipulations.








[:bookmarkp-bmenu-dired-marked]
[:OpenDiredForMarkedFiles]
=== Open Dired for the Marked Files ===

You've seen that the bookmark list has many features that are
similar to [[Dired]] features.  But Dired is specialized for files and
directories, and it has many more features for manipulating them.
The bookmark list is not intended to replace Dired.

You can, however, use the bookmark list to take advantage of
arbitrary Dired features for file and directory bookmarks.
Command `bookmarkp-bmenu-dired-marked' ('''`##M-d >##'''') weds
'''Bookmark+''''s set-defining and set-manipulating features (tagging,
marking, filtering etc.) to Dired's file-manipulating features.

`##M-d >##' opens a Dired buffer that is specialized for just the
files and directories whose bookmarks are marked in the
bookmark list.  (Other marked bookmarks are ignored by the
command.)  The files and directories can be located anywhere; they need not be in the same directory.  They are listed
in Dired using absolute file names.

(In Emacs versions prior to release 23.2, only local files and
directories can be handled, due to Emacs bug #5478.  In such
versions, remote-file bookmarks are ignored by `##M-d >##'.)


This '''Bookmark+''' feature makes sets of files and directories
immediately amenable to all of the operations provided by Dired.

It is particularly useful in conjunction with tags.  Use bookmark
tags and marks to define a possibly complex set of file and
directory bookmarks.  Then hit `##M-d >##' to list them in a Dired
buffer.  Then use any Dired commands you want to act on any of
them.

For example, to compress bookmarked files that are tagged with
both `blue' and `moon':

# Mark them using `##T m * blue RET moon RET RET##'.
# Open Dired for them using `##M-d >##'.
# Mark them in Dired, then compress them using `Z'.

Since tags are persistent, '''Bookmark+''' gives you a good way to
define an arbitrary set of files as a project and then open them
in Dired at any time to operate on them.

If you use '''[[Dired+]]''' (library <tt>[[dired+.el]]</tt>), then a similar feature is
available for the marked files and directories: You can use
'''`##C-M-*##'''' in Dired to open a separate Dired buffer for them
only.  You can of course then bookmark that resulting Dired
buffer, if you like.

If you use '''[[Icicles]]''', then whenever you use a command
that reads a file (or directory) name, you can use '''`##M-|##'''' during
file-name [[completion]] to open Dired on the currently matching set of file
names.  That is, this is the same kind of special Dired buffer
that is provided for file and directory bookmarks by `##M-d >##' in
the bookmark list.









[:MarkingAndUnmarkingBookmarks]
=== Marking and Unmarking Bookmarks ===

'''Bookmark+''' enhances marking and unmarking of bookmarks in the bookmark list in several ways.  In
general, these enhancements are similar to features offered by
[[DiredMode|Dired]] and [[Dired X]]. You can use:

* '''`##% m##'''' to mark the bookmarks that match a [[regexp]].  The entire
line in the bookmark list is checked for a match, that
is, both the bookmark name and the file name, if shown.

* '''`M-DEL'''' (or '''`U'''') to unmark all bookmarks, or all that
   are marked `##>##', or all that are flagged `D' for deletion.

* '''`t'''' to toggle (swap) marked and unmarked bookmarks:
   those that are marked become unmarked, and vice versa.

* '''`##>##'''' to show only the marked bookmarks or '''`##<##'''' to show
   only the unmarked bookmarks.  Repeat to show them all again.

* '''`##F M##'''', '''`##I M##'''' etc. to __m__ark only the __f__ile bookmarks, __I__nfo
bookmarks etc.  (The first key here is the same as the
corresponding filter key, e.g. `F' for files -- see [[#FilteringBookmarks]], below.)









[:FilteringBookmarks]
=== Filtering: Hiding and Showing Bookmarks ===

You can hide and show different sets of bookmarks in the bookmark 
list.  There are commands to show only the bookmarks of a particular
type  -- e.g. `##I S##' to show only the Info bookmarks.  These are, in
effect, shortcuts for first marking those bookmarks and then
showing only the marked bookmarks (and then unmarking).  For
example, `##F S##' is a shortcut for `##F M >##' (and then `##U RET##').

You can also filter to show only the bookmarks that match a
[[regexp]].  There are two ways to do this:

* Use '''`##P B##'''' (for "__p__attern", "__b__ookmark") and type a regexp.  The
  bookmarks are filtered incrementally, as you type.  Only the
  bookmark name is matched (not the file name).  Hit any non-inserting key, such as
  `RET', to finish defining the pattern. Similarly, hit '''`##P F##'''' for bookmarks whose __f__ile names match a
  regexp, and '''`##P T##'''' for bookmarks with one or more __t__ags that match
  a regexp.  See [[#BookmarkTags]], above, for information about
  tags.

* Just as in [[DiredMode|Dired]], use '''`##% m##'''' to mark the bookmarks that match a
  regexp. Then use '''`##>##'''' to show only the marked bookmarks. See [[#MarkingAndUnmarkingBookmarks]], above.  This method has
  the advantage that you can show the complement: the bookmarks
  that do ''not'' match the regexp, by using '''`##<##'''' instead of `##>##'.  It
  also has the advantage that matching checks the
  combination of bookmark name and file name (use `M-t' to
 toggle showing file names).

These are the keys for hiding or showing bookmarks:

* '''`##.##'''' -- Show all bookmarks.

* '''`##B S##'''' -- Show only non-file (e.g. __b__uffer) bookmarks.

* '''`##F S##'''' -- Show only __f__ile (including directory) bookmarks. With a [[prefix argument]], hide remote-file bookmarks.

* '''`##G S##'''' -- Show only __G__nus bookmarks.

* '''`##I S##'''' -- Show only __I__nfo bookmarks.

* '''`##K S##'''' -- Show only des__K__top bookmarks (see [[#AdditionalTypes]]).

* '''`##M S##'''' -- Show only __m__an-page bookmarks.

* '''`##O S##'''' -- Show only __o__mitted bookmarks (see [[#OmittingBookmarks]]).

* '''`##R S##'''' -- Show only bookmarks with __r__egion information.

* '''`##V S##'''' -- Show only __v__ariable-list bookmarks (see [[#FunctionSequenceVarlistBookmarks|variable-list]]).

* '''`##W S##'''' -- Show only __W__3M bookmarks.

* '''`##>##'''' -- Toggle showing only marked bookmarks

* '''`##<##'''' -- Toggle showing only unmarked bookmarks






=== Only Visible Bookmarks Are Affected ===

Commands that operate on the current bookmark or on the marked or
the unmarked bookmarks ''act only on bookmarks that are displayed''
(not hidden).  This includes the commands that mark or unmark
bookmarks.  This means that you can easily define any given set of
bookmarks.

For example:

# `##F S##' -- __S__how only bookmarks associated with __f__iles.
# `##% m##' -- __M__ark those whose names match a particular [[regexp]].
# `##R S##' -- __S__how only bookmarks that have __r__egions.
# `m' -- __M__ark some of those region bookmarks individually.
# `##.##' -- Show all bookmarks.
# `t' -- __T__oggle the marked and unmarked (so unmarked are now marked)
# `D' -- __D__elete all of the marked bookmarks (after confirming)

Together, steps 1-7 delete all file bookmarks that match the regexp and all
region bookmarks that you selectively marked.









[:OmittingBookmarks]
=== Omitting Bookmarks from Display ===

In sections [[#MarkingAndUnmarkingBookmarks]] and
[[#FilteringBookmarks]] you learned how
to hide and show bookmarks in the bookmark list.  This section is
about a different kind of hiding, called '''omitting'''.

Omitted bookmarks are not shown in the bookmark list, no matter
what filtering is used.  The only way to show omitted bookmarks is
to show all of them and only them, using '''`##O S##'''', which is bound to
command '''`bookmarkp-bmenu-show-only-omitted''''.

Omitted bookmarks are still available even if they are not shown, and you can still jump to
them (e.g. using `C-x r b').  You just don't see them in the
bookmark list.  And that's the reason for this feature: to hide
those bookmarks that you don't care to see.

The most common use for this feature is to hide the component
bookmarks that make up a sequence bookmark (see [[#FunctionSequenceVarlistBookmarks]]). The default behavior when
you create a sequence bookmark is in fact to omit its component
bookmarks from the displayed list.

You can omit any bookmarks by marking them and then using '''`##O >##''''
('''`bookmarkp-bmenu-omit/unomit-marked'''').  If you are looking at the
omitted bookmarks (after using `##O S##'), then `##O >##' '''''un'''''-omits the
bookmarks marked there.  Think of two complementary spaces: the
normal bookmark list and the omitted bookmark list.  When you use
`##O >##', the marked bookmarks that are currently shown are moved to
the opposite space.

You can un-omit ''all'' of the omitted bookmarks at once, using '''`##O U##''''
('''`bookmarkp-unomit-all'''').  You can also call this command from
outside the bookmark-list display.








[:SortingBookmarks]
=== Sorting Bookmarks ===

Filtering hides certain kinds of bookmarks.  Sometimes, you want
to see bookmarks of various kinds, but you want them to be grouped
or sorted in different ways, for easy recognition, comparison, and
access.

Bookmarks shown in the bookmark list are sorted using the current
value of option '''`bookmarkp-sort-comparer''''.  (If that is `nil', they are
unsorted, which means they appear in reverse chronological
order of their creation.)

You can use '''`##s s##''''... (repeat hitting the `s' key) to cycle among
the various sort orders possible, updating the display
accordingly.  By default, you cycle among all available sort
orders, but you can shorten the cycling list by
customizing option '''`bookmarkp-sort-orders-for-cycling-alist''''.

You can also change directly to one of the main sort orders
(without cycling) using '''`##s n##'''', '''`##s f n##'''', etc.:

* '''`##s >##'''' -- Sort marked before unmarked.
* '''`##s b##'''' -- Sort by last __b__uffer or file access.
* '''`##s g##'''' -- Sort by __G__nus thread: group, article, message.
* '''`##s i##'''' -- Sort by __I__nfo manual, node, position
* '''`##s k##'''' -- Sort by bookmark type (__k__ind)
* '''`##s n##'''' -- Sort by bookmark __n__ame
* '''`##s t##'''' -- Sort by last bookmark access __t__ime
* '''`##s v##'''' -- Sort by __v__isit frequency
* '''`##s w##'''' -- Sort by __W__3M URL
* '''`##s f d##'''' -- Sort by local __f__ile type: file, symlink, __d__ir
* '''`##s f n##'''' -- Sort by __f__ile __n__ame
* '''`##s f s##'''' -- Sort by local __f__ile __s__ize
* '''`##s f t##'''' -- Sort by last local __f__ile access __t__ime
* '''`##s f u##'''' -- Sort by last local __f__ile __u__pdate (edit)

You can __r__everse the current sort direction (ascending/descending)
using '''`##s r##''''.  Also, repeating any of the main sort-order commands
(e.g. `##s n##') cycles among that order, the reverse, and
unsorted.

[For a complex sort, which involves composing several sorting
conditions, you can also use `##s C-r##' to reverse the order of
bookmark sorting groups or the order within each group (depending
on whether `##s r##' is also used).  Be aware that this can be a bit
unintuitive.  If it does not do what you expect or want, or if it
confuses you, then don't use it ;-).  (`##s C-r##' has no noticeable
effect on simple sorting.)]

Remember that you can combine sorting with filtering
different sets of bookmarks -- bookmarks of different kinds
(e.g. Info) or bookmarks that are marked or unmarked.

Finally, you can easily define your own sorting commands and sort
orders.  See macro '''`bookmarkp-define-sort-command'''' and the
documentation for option `bookmarkp-sort-comparer'.   ('''Bookmark+'''
uses option '''`bookmarkp-sort-comparer''''; it ''ignores'' vanilla Emacs
option `bookmark-sort-flag'.)

Of particular note is that you can interactively define commands
that sort by a given list of tags --- you use keys '''`##T s##'''' (command
`bookmarkp-define-tags-sort-command') to do that.  You are
prompted for the tags to sort by.  Bookmarks are sorted first
according to whether they are tagged with the first tag, then the
second tag, and so on.  Otherwise, sorting is by bookmark name.

The tags you specify are used, in order, in the name of the new
command.  For example, if you enter tags `alpha', `beta', and
`gamma', in that order, then the sorting command created is
`bookmarkp-bmenu-sort-alpha-beta-gamma'.  The new command is saved
in your bookmark commands file (`bookmarkp-bmenu-commands-file').

Note that because you can add a new tag to all bookmarks that have
some given set of tags, you can use that single (new) tag to
represent the entire tag set.  Sorting by that tag is then the
same as sorting by the tag set.  You can of course use overlapping
sets in the composite sort command.  You can, for example, sort
first according to tag `tag1', which represents the set of tags
`alpha', `beta', `gamma', `delta', and then sort according to tag
`tag2', which represents the set of tags `beta', `delta'.

See also ApplesAndOranges for more about the sorting used in '''Bookmark+'''. See also [[#UseBookmarkPlusWithIcicles|bookmark sorting in Icicles]] -- the same technique is used in '''Icicles''' for sorting bookmarks as completion candidates.







[:UseBookmarkPlusWithIcicles]
== Use Bookmark+ with Icicles ==

'''[[Icicles]]''' enhances
your use of '''Bookmark+''' in several ways.

When jumping to a bookmark, you can narrow the [[completion]]
candidates to bookmarks of a particular type (e.g. Info, using
`C-M-i'; remote, using `##C-M-@##'; region, using `C-M-r').  You can
narrow again (and again), to another bookmark type, to get the
intersection (e.g. remote Info bookmarks that define a region).

You can also narrow against different bookmark-name patterns
(e.g. regexps) -- so-called [[progressive completion]].  And take the
[[Icicles - Nutshell View#ChippingAway|complement]] (e.g., bookmarks whose names do not match
`##foo.*2010.*bar##').  (This is not special to bookmarks; it is
standard '''Icicles''' practice.)

In ''Icicle'' mode, several of the '''Bookmark+''' keys are remapped to
corresponding '''Icicles''' [[multi-command]]s.  A bookmark jump key thus
becomes a bookmarks browser.  For example, `C-x j d' browses among
any number of Dired bookmarks.

When you browse among bookmarks, visiting them, the current
destination (position) is highlighted temporarily using [[CrosshairHighlighting|crosshairs]], to make it stand out.

A single key can ''set'' a bookmark or ''visit'' bookmarks.  This key is
whatever command `bookmark-set' would normally be bound to -- e.g. `C-x r m'.  A [[prefix argument]] controls what it does.  If negative
(`M--'), jump to (browse) bookmarks.  Otherwise, set a bookmark,
as follows:

* Numeric prefix arg (non-negative): No prompt.  Use the buffer
  name plus the text of the region (if active) or the current line
  as the bookmark name.  Quickest way to set a bookmark.

* No prefix arg (as usual): Prompt for bookmark name.  But if the
  region is active, use the buffer name plus the region text as
  the default name.

* Plain `C-u' (as usual): Prompt for name; no bookmark overwrite.

During completion of a bookmark name, most features of the
bookmark-list display (see [[#BookmarkListDisplay|Bookmark List (Display)]]) are available on the fly.  Buffer `*Completions*' acts like a dynamic version of `##*Bookmark List*##':

* Candidates are highlighted in the `*Completions*' window
  according to their bookmark type.

* Candidates are '''Icicles''' [[multi-completion]]s with up to three parts: (a) the bookmark ''name'', the bookmark ''file'' or buffer name, and (c) any ''tags''.

:: You can match any or all of the parts.  For example, you can match bookmarks that have tags by typing this [[regexp]]: `##C-M-j . * C-M-j S-TAB##'.

:: Each `C-M-j' inserts `##^G\n##', which is `<tt>[[Icicles - Customization and General Tips#icicle-list-join-string|icicle-list-join-string]]</tt>',
the string used to join the parts.  This regexp says, "match the
completion candidates that have all three parts (two join
strings), hence some tags.

:: You can turn off the use of multi-completion candidates for
subsequent commands, so only bookmark names are used, by hitting
`M-m' in the [[minibuffer]].  You can think of this as similar to
using `M-t' in `##*Bookmark List*##' to toggle showing file names.
You can make not showing files and tags the default behavior by
customizing `<tt>[[Icicles - Customization and General Tips#icicle-show-multi-completion-flag|icicle-show-multi-completion-flag]]</tt>'.

* You can sort completion candidates using the '''Bookmark+''' sort
  orders.  Use '''`##C-,##'''' to cycle among sort orders.

* You can use '''Icicles''' [[Icicles - Help on Candidates|candidate-help]] keys (`C-M-RET', `C-M-down',
  etc.) to get detailed information about the current bookmark
  candidate.  `C-u C-M-RET' shows the complete, internal info
  defining the bookmark.  And without doing anything, summary info
  about the current candidate is available in the [[mode line]] of
  buffer `*Completions*'.

* You can use '''Icicles''' [[Icicles - Multi-Commands|candidate-action]] keys (`C-RET', `C-mouse-2',
  `C-down', etc.) to visit any number of bookmarks.  For example,
  holding down `C-down' cycles among the current bookmark
  candidates, opening each in turn.

* You can use '''`S-delete'''' to [[Icicles - More About Multi-Commands#DeletingObjects|delete]] the bookmark named by the current candidate.
  You can delete any number of bookmarks this way, during a single
  invocation of a bookmark command.

* You can define '''Icicles''' [[Icicles - Candidate Sets|sets of bookmarks]], persistent or not, and
  act on their members in various ways.


'''See Also:''' [[Icicles - Bookmark Enhancements]].









[:WindowsFileAssociations]
== Open Bookmarks Using Windows File Associations ==

If you use Emacs on Microsoft Windows, then you can take advantage
of Windows file associations to open bookmarks.  To do this, you
will also need library <tt>[[w32-browser.el]]</tt>.

In the bookmark list, the following keys are bound to commands
that open bookmarks using the associated Windows `Open'
applications:

  `M-RET'     -- `bookmarkp-bmenu-w32-open'
  `M-mouse-2' -- `bookmarkp-bmenu-w32-open-with-mouse'
  `M-v'       -- `bookmarkp-bmenu-w32-open-select' (like `v')

If you use '''[[Dired+]]''' (library <tt>[[dired+.el]]</tt>), then you can use '''`M-b'''' to
bookmark all of the marked files in a [[Dired]] buffer, even if you
normally do not or cannot visit those files in Emacs.  For
instance, you can bookmark music files or image files, without
ever opening them as files in Emacs.

Together with the use of bookmark tags, this gives you a handy way
to organize and access objects of any kind whose files are
recognized by Windows as being associated with a given
application.  See [[#BookmarkTags|Bookmark Tags]].





[:Compatibility]
== Bookmark Compatibility with Vanilla Emacs ==

Library <tt>[[bookmark+.el]]</tt> is generally compatible with GnuEmacs
versions 20 through 23.

1. All bookmarks created using any version of vanilla Emacs
   (library ##bookmark.el##) continue to work with ##bookmark+.el##.

2. All bookmarks created using library ##bookmark+.el## will work
   with all Emacs versions (20-23), provided you use library
   ##bookmark+.el## to access them.

3. Most bookmarks created using ##bookmark+.el## will not interfere
   with the behavior of vanilla Emacs, versions 21-23.  The new
   bookmark types are simply ignored by vanilla Emacs.  For
   example:

* A bookmark with a region is treated like a simple position
     bookmark: the destination is the region start position.

* A Gnus bookmark does not work; it is simply ignored. 

However, there are two cases in which ##bookmark+.el## bookmarks
   will raise an error in vanilla Emacs:

* You cannot use non-file (e.g. buffer-only) bookmarks with any
     version of vanilla Emacs.

* You cannot use any bookmarks created using ##bookmark+.el##
     with vanilla Emacs 20.

The Emacs bookmark data structure has changed from version to
   version.  Library ##bookmark+.el## always creates bookmarks that
   have the most recent structure (Emacs 23).  As is the case for
   any bookmarks that have the Emacs 23 structure, these bookmarks
   will not work in vanilla Emacs 20 (that is, without
   ##bookmark+.el##).

Bottom line: Use '''Bookmark+''' to access bookmarks created using
'''Bookmark+'''.


==Comments==
[new]
I am finding this very useful, but it would be nice if there was a quicker way to add tags, e.g. similar to org-mode's C-c C-c C-c method. -- JoeBloggs

[new:DrewAdams:2010-03-25 23:58 UTC]
Can you describe what you envision? -- DrewAdams

[new:JoeBloggs:2010-04-09 02:09 UTC]
In org-mode when you press C-c C-c C-c to tag a headline a buffer pops up showing you the already defined tags, with corresponding keys. You then press one of the keys to add the tag, or TAB to define a new tag.
Perhaps the effort is not worth it. However, just removing the first prompt that you get after pressing T + would speed things up a bit, since I think most people will be wanting to tag the bookmark at point in this case. -- JoeBloggs

[new:DrewAdams:2010-04-09 02:20 UTC]
I think I understand (but not sure). I think you're describing a context where the bookmark that is the target of the tag is known/implicit/obvious, and in that context there is no need to prompt users for the bookmark to tag. Is that it?

The command bound to `##T +##' is general, not specific to, say, buffer `##*Bookmark List*##", where, in effect, the current line corresponds to a specific bookmark. But in that case, the current-line's bookmark is the default value, so you need only hit `RET' to pick it up. I don't see that as a big thing, I guess, so I don't think it's worth trying to take advantage of that specific context. I suspect you disagree. ;-)

Let me know at least if I've understood the suggestion: Since in a context like the buffer list it's predictable that you want to tag the bookmark on the current line, don't bother to prompt for which bookmark to tag. -- DrewAdams


----

[new]
I would like to use bookmarks with version control (ClearCase) where i have multiple views (base directories) with the same files/directory structure. What i would like to do is to define file type bookmarks with <i>relative</i> paths where i can easily change the base directory (e.g. select it from a list or keep it stored in a global variable). Is something like this already possible (and i've just not found it)?

I have thought about it a bit and came up with the following ideas:

# Define a new bookmark type. But this use case is maybe not enough to justify another bookmark type.
# Provide a way to call function type bookmarks with an argument. The argument would then contain the fixed relative path and the function could add the variable base path. Or more general, 
# if a bookmark function could access its own meta data i.e. its tags, the relative path could be stored in a tag.

Actually 3. sounds like it would provide a very flexible way to extend the built-in functionality of bookmark+.

What do you think? -- KaiTetzlaff

[new:DrewAdams:2010-04-07 16:43 UTC]
Hi Kai. Each bookmark associated with a file has a ##(filename . "/the/file/name")## entry, where the file name is absolute. Take a look at `C-h v bookmark-alist' to get an idea. Since this info is already part of the bookmark, you don't need to also save such info using tags. And inside every absolute file name (e.g. `##/a/b/c##') hides a relative file name (e.g. `c')! ;-) All you need to do is abstract from the absolute file names to relative names, and for that you have function `file-name-non-directory'.

1. I think what you want is a command that (a) collects all bookmarks whose `filename' entries have files whose relative names match some input pattern, then (b) presents these bookmarks as [[completion]] candidates and (c) jumps to the chosen bookmark. For example:

<pre>
(defun bookmark-jump-relative-file (relfile &optional localp)
  "Jump to a bookmark whose file has relative name RELFILE.
With a prefix arg, only local files are candidates."
  (interactive "sFile: \nP")
  (setq relfile  (file-name-nondirectory relfile))
  (bookmark-jump-other-window
   (bookmark-completing-read "Jump to bookmark" nil
                             (if localp
                                 (bookmarkp-local-file-alist-only)
                               (bookmarkp-file-alist-only))
</pre>

2. You can also do something along the lines of what you're looking for without any coding. You can see all of the bookmarks that have a particular relative file name, and choose among them. In the `##*Bookmark List*##':

* You can use `##P F##' to show only the bookmarks whose file names match some [[regexp]], which could be the target relative file name -- e.g. `##foo.el##' (or `##/foo.el$##' if you're worried about excluding extra matches in the same line). You can mark all of these bookmarks using `M-m'.

* Or you can mark all bookmarks with matching file names using `##% m##'. The regexp for `##% m##' matches the entire line, bookmark name plus file name (if you are not yet showing file names, use `M-t'), so use a regexp that also matches the bookmark name (e.g. `##.*/foo.el$##').

After you've marked the bookmarks that have the same relative file name, you can act on that set of bookmarks in various ways. You can save the set or bookmark it (e.g. creating a `bookmark-list' bookmark). Returning to the saved set is like using a multiple-choice command for the files in the set. You can search+replace the marked bookmarks (`M-a', `M-q'). You can open [[Dired]] for just those bookmarked files, which can be in different directories (`##M-d >##'). After `##M-d >##', you can bookmark that Dired buffer -- that's another way to come back to this set of files.

HTH -- DrewAdams

----
CategoryHypermedia CategoryPersistence 
CategoryProgramming CategoryRegion CategoryWThirtyTwo
CategoryProgrammerUtils SessionManagement CategoryDirectories



