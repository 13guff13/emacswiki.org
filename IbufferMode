[[zh:ibuffer模式]]
Ibuffer is an advanced replacement for BufferMenu, which lets you operate on buffers much in the same manner as [[DiredMode|Dired]].  The most important Ibuffer features are highlighting and various alternate layouts. Ibuffer is part of Emacs 22.

If you don't have Ibuffer, you can get it from CVS:ibuffer.el (there's also a probably out-of-date [http://gna.org/projects/ibuffer project] at gna.org).  Here's how to install it:

    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (autoload 'ibuffer "ibuffer" "List buffers." t)

See also: BufferMenuPlus, which also provides highlighting and other enhancements of BufferMenu.


== Search all marked buffers ==

* '''`M-s a C-s'''' - Do incremental search in the marked buffers.
* '''`M-s a C-M-s'''' - Isearch for regexp in the marked buffers.
* '''`U'''' - Replace by regexp in each of the marked buffers.
* '''`Q'''' - Query replace in each of the marked buffers.
* '''`I'''' - As above, with a regular expression.


== Search All Marked Buffers with Icicles ==

With [[Icicles]], you can use '''`M-s i'''' in Ibuffer to search all marked buffers  and possibly replace search hits.  You have
available all of the [[Icicles - Search Commands, Overview|Icicles Search]] features, including accessing search hits directly, in any order.


== Hide certain buffers ==

Here's how to hide all buffers starting with an asterisk.

    (add-to-list 'ibuffer-never-show-regexps "^\\*")

== View subsets of buffers ==

Also try ibuffer's "limiting" feature (`/'), which allows you to just view a subset of your buffers.

== Diff ==

Ibuffer can show you the differences between an unsaved buffer and the file on disk with `='.

== Gnus-style grouping ==

Ibuffer has an excellent implementation of Gnus-style grouping. Try this:

    (setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("dired" (mode . dired-mode))
                   ("perl" (mode . cperl-mode))
                   ("erc" (mode . erc-mode))
                   ("planner" (or
                               (name . "^\\*Calendar\\*$")
                               (name . "^diary$")
                               (mode . muse-mode)))
                   ("emacs" (or
                             (name . "^\\*scratch\\*$")
                             (name . "^\\*Messages\\*$")))
                   ("gnus" (or
                            (mode . message-mode)
                            (mode . bbdb-mode)
                            (mode . mail-mode)
                            (mode . gnus-group-mode)
                            (mode . gnus-summary-mode)
                            (mode . gnus-article-mode)
                            (name . "^\\.bbdb$")
                            (name . "^\\.newsrc-dribble")))))))

    (add-hook 'ibuffer-mode-hook
              (lambda ()
                (ibuffer-switch-to-saved-filter-groups "default")))

Then ##M-x dired## then ##M-x ibuffer## and you should see your dired buffer in a group. Open more of them and they all endup in there. This means that when browsing buffers you can skip over the items you are used to seeing. Anything not grouped goes at the bottom of the ibuffer buffer. -- PhilJackson


It looks as though the default filterings are as follows:


    predicate
    content
    size-lt
    size-gt
    filename
    name
    used-mode
    mode

Since filename can work for any part of the path, if you filter on a partial (or complete) directory, anything you have open from the directory is now grouped:

    ("journal" (filename . "/personal/journal/"))

I'm not familiar with gnus, and have been unsuccessful tracking written docs on filtering -- I extracted the above from a reading of ##ibuf-ext.el## and then onto the contents of ##ibuffer-filtering-alist##. If there is anything out there, somebody please add it in, and edit this note. --OtherMichael


== Get rid of title and summary ==

The last two lines of the ibuffer provide some information about each column. 
These two lines may be hidden by setting the <code>ibuffer-display-summary</code> variable to nil. The first two lines of the ibuffer are headers describing
the contents of the columns. I don't find these headers so useful and didn't
find a quick way to turn them off. So here is an advice that does the trick:

  (defadvice ibuffer-update-title-and-summary (after remove-column-titles)
   (save-excursion
      (set-buffer "*Ibuffer*")
      (toggle-read-only 0)
      (goto-char 1)
      (search-forward "-\n" nil t)
      (delete-region 1 (point))
      (let ((window-min-height 1)) 
        ;; save a little screen estate
        (shrink-window-if-larger-than-buffer))
      (toggle-read-only)))
  
  (ad-activate 'ibuffer-update-title-and-summary)


== Sort by pathname ==

I'm not quite sure where to add this, but to be able to sort by pathname (thereby grouping file buffers with dired buffers). PeterMielke

Ibuffer should now use `dired-directory' when appropriate. If you are able/willing to sign an assignment (see LegalMatters) then please send a patch defining an Ibuffer `filename' sorter that falls back to `dired-directory' for dired buffers -- JohnPaulWallington.

Was it eventually added to Emacs? -- DianeMurray

     (defun my-ibuffer-hook ()
    
      ;; add another sorting method for ibuffer (allow the grouping of
      ;; filenames and dired buffers
    
      (ibuffer-define-sorter pathname
         (:documentation
          "Sort the buffers by their pathname."
          :description "path")
         (string-lessp (with-current-buffer (car a)
                         (or buffer-file-name
                             (if (eq major-mode 'dired-mode)
                                 (expand-file-name dired-directory))
                             ;; so that all non pathnames are at the end
                             "~"))
                       (with-current-buffer (car b)
                         (or buffer-file-name
                             (if (eq major-mode 'dired-mode)
                                 (expand-file-name dired-directory))
                             ;; so that all non pathnames are at the end
                             "~"))))
    
      ;; add key binding
    
      (define-key ibuffer-mode-map (kbd "s p") 'ibuffer-do-sort-by-pathname))
    
    (add-hook 'ibuffer-mode-hooks 'my-ibuffer-hook)

----
I modified the above, works with GNU Emacs 22.0.92.1, should this work? --DavidBoon

    (define-ibuffer-sorter filename-or-dired
      "Sort the buffers by their pathname."
      (:description "filenames plus dired")
      (string-lessp 
       (with-current-buffer (car a)
         (or buffer-file-name
             (if (eq major-mode 'dired-mode)
                 (expand-file-name dired-directory))
             ;; so that all non pathnames are at the end
             "~"))
       (with-current-buffer (car b)
         (or buffer-file-name
             (if (eq major-mode 'dired-mode)
                 (expand-file-name dired-directory))
             ;; so that all non pathnames are at the end
             "~"))))
    (define-key ibuffer-mode-map (kbd "s p")     'ibuffer-do-sort-by-filename-or-dired)

== Questions ==
[new]
Is there any way to configure ibuffer so that switching to ibuffer puts the cursor on the most recent buffer? I'm finding that the cursor stays on the same line it was on the previous time ibuffer was invoked, which is a bit confusing when the buffers are sorted in visited order.

Thanks - dab

[new]
: This works for me

  (defun my-ibuffer ()
    "Open ibuffer with cursour pointed to most recent buffer name"
    (interactive)
    (let ((recent-buffer-name (buffer-name)))
      (ibuffer)
      (ibuffer-jump-to-buffer recent-buffer-name)))
  (global-set-key [(f12)] 'my-ibuffer)

-- Alexander Litvinov

----

[new]
I set ibuffer-filter-groups like this:
    (setq ibuffer-filter-groups '(("Dired" ((mode . dired-mode)))))
 
but it doesn't work. Is there an example to show how to set the varibale involved?

-- YeWenbin
[new]
: I found this works:

    (require 'ibuf-ext nil t)
    (when (featurep 'ibuf-ext)
      (add-hook 'ibuffer-mode-hook (lambda ()
                                     (setq ibuffer-filter-groups '(
                                                                   ("*buffer*" (name . "\\*.*\\*"))
                                                                   ("TAGS" (name . "^TAGS\\(<[0-9]+>\\)?$"))
                                                                   ("dired" (mode . dired-mode))
                                                                   )))))

But How to move the Default group to display first?

[new]
Hi, see above (my original group suggestion) for the answer -- PhilJackson

----

: Use this to reverse the order of groups:

    (defadvice ibuffer-generate-filter-groups (after reverse-ibuffer-groups ()
                                                     activate)
      (setq ad-return-value (nreverse ad-return-value)))


----

When used with ElScreen, Ibuffer tends to remove it's header line with tabs. 

To prevent it, set <code>ibuffer-use-header-line</code> to nil and use the following:

  (defadvice ibuffer-update (around ibuffer-preserve-prev-header activate)
    "Preserve line-header used before Ibuffer if it doesn't set one"
    (let ((prev-line-header header-line-format))
      ad-do-it
      (unless header-line-format
        (setq header-line-format prev-line-header))))


IvanKorotkov

----
CategoryBufferSwitching
