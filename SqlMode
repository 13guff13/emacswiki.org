 sql.el --- specialized comint.el for SQL interpreters

This page is home of SQL mode for Emacs and XEmacs.  SQL mode is part
of both Emacs and XEmacs.  You can get the latest versions here.

The interactive SQL mode is based on ComintMode.  The following
interpreters are supported:

* psql by '''<nowiki>PostgreSQL</nowiki>'''
* mysql by '''<nowiki>MySQL</nowiki>'''
* sqlite or sqlite3 for [[SQLite]]
* solsql by '''Solid'''
* SQL*Plus by '''Oracle'''
* dbaccess by '''Informix'''
* isql by '''<nowiki>SyBase</nowiki>'''
* sql by '''Ingres'''
* osql by '''MS SQL Server'''
* isql by '''Interbase'''
* db2 by '''DB2''' (IBM)
* inl by '''RELEX'''

Type M-x sql-help RET to read the online help.
The latest version is available from Emacs's source control:

* GIT:progmodes/sql.el

The current maintainer of sql.el is MichaelMauger.

Starting with version 21.4-a, sql.el is included in the regular sources of Emacs.  The CVS version linked above depends on functions
that haven't made it out of CVS, so don't use the latest version if you're not running a bleeding edge Emacs from CVS.

If those with pre-22.1 versions of Emacs can identify changes needed to run on older releases, send them to MichaelMauger for consideration.  However, the emphasis is on improving future versions of Emacs.

==  Prompt for "as sysdba" or "as sysoper" ==

TomPopovich modified sql-mode.el so users are able to specify as-sysdba prompt so you can log in as "as sysdba"  or "as sysoper".  Code changes
were [http://lists.gnu.org/archive/html/help-gnu-emacs/2008-04/msg00094.html posted] to [[help-gnu-emacs]] on 4/3/08.
 
== Related Pages ==

* PlsqlMode -- support for writing PL/SQL code. This was inspired by the old and sadly unsupported Oracle PL/SQL mode.
* ImenuMode -- has an example for SQL and PL/SQL support
* SqlIndent (sql-indent.el) -- indentation of SQL statements
* SqlTransform (sql-transform.el) -- transform select statements into update statements and more
* MasterMode (master-mode.el) -- remote control one buffer from another
* ComintPatched (comint.el) -- retrieve multi-line commands from the history of SQL statements
* SqlSendHistory -- store SQL statements you sent from the SQL to the SQLi buffer in your history
* SqlPlusNukeLineNo -- get rid of the junk line numbers SQL*Plus emits
* SqlPlus -- Facilitates interaction with Oracle via SQL*Plus
* SqlComplete -- experimental completion for columns and tables
* SqlSwitchBuffer -- switch-to-buffer instead of pop-to-buffer
* SqlRenameBuffer -- renaming the buffer
* SqlReplace -- replace bind variables before sending a statement
* SqlWithPlaceholders -- process SQL statements with placeholders embodied within them

== Miscellaneous Settings ==

If you don't like window splittings related to the *SQL* buffer, try
the following, per [[Manual:Force Same Window]].

    (add-to-list 'same-window-buffer-names "*SQL*")

If you only work on one database, you might prefer not to confirm the
default user, password, database, etc. settings.  In that case, load
sql.el, and disable sql-get-login in your ~/.emacs:

    (require 'sql)
    (defalias 'sql-get-login 'ignore)

To interact with the interpreter from a window already in SQL mode, execute the following:

    M-x sql-set-sqli-buffer RET *SQL* RET

Want to save you history between sessions?  Consider adding this hook to your [[.emacs]].  It saves the history in a separate file for each SQL "product".  You'll need to run `##M-x make-directory RET ~/.emacs.d/sql/ RET##'

  (defun my-sql-save-history-hook ()
    (let ((lval 'sql-input-ring-file-name)
          (rval 'sql-product))
      (if (symbol-value rval)
          (let ((filename 
                 (concat "~/.emacs.d/sql/"
                         (symbol-name (symbol-value rval))
                         "-history.sql")))
            (set (make-local-variable lval) filename))
        (error
         (format "SQL history will not be saved because %s is nil"
                 (symbol-name rval))))))
 
  (add-hook 'sql-interactive-mode-hook 'my-sql-save-history-hook)

When using sql-send-region to execute a query in a SQLi buffer, the table formatting is off because the column names are printed on the same row as the the prompt. By adding a newline before the comint output we can make sure everything lines up nice. This will add a preceding newline to every comint output, even queries run at the prompt - though the extra line isn't too noticeable.

  (defvar sql-last-prompt-pos 1
    "position of last prompt when added recording started")
  (make-variable-buffer-local 'sql-last-prompt-pos)
  (put 'sql-last-prompt-pos 'permanent-local t)
 
  (defun sql-add-newline-first (output)
    "Add newline to beginning of OUTPUT for `comint-preoutput-filter-functions'
    This fixes up the display of queries sent to the inferior buffer
    programatically."
    (let ((begin-of-prompt
           (or (and comint-last-prompt-overlay
                    ;; sometimes this overlay is not on prompt
                    (save-excursion
                      (goto-char (overlay-start comint-last-prompt-overlay))
                      (looking-at-p comint-prompt-regexp)
                      (point)))
               1)))
      (if (> begin-of-prompt sql-last-prompt-pos)
          (progn
            (setq sql-last-prompt-pos begin-of-prompt)
            (concat "\n" output))
        output)))
 
  (defun sqli-add-hooks ()
    "Add hooks to `sql-interactive-mode-hook'."
    (add-hook 'comint-preoutput-filter-functions
              'sql-add-newline-first))
 
  (add-hook 'sql-interactive-mode-hook 'sqli-add-hooks)

== Emacs 19 ==

If you are using GNU Emacs 19.34, you will need two additional things:

* http://www.mit.edu/afs/athena.mit.edu/project/ptest/emacs/emacs-20.5/lisp/emacs-lisp/
* http://www.dina.kvl.dk/~abraham/custom/

Once you completed installation, type M-x load-library RET sql RET to load sql.el.  Then, type M-x sql-help RET to read the online help.

== Other SQL modes ==

* RobRiepel's mode based on a mode by LynnSlater with support for SQL*Plus by Oracle and isql by Sybase: http://www.stanford.edu/people/riepel/SQL-mode.html
* KarelSprenger's mode based on a mode by JimLange with support for SQL*Plus by Oracle and exhaustive highlighting: http://paddington.ic.uva.nl/public/sql-modes.zip
* Peter D. Pezaris' huge mode with extensive XEmacs support: http://www.dwwc.com/sql-mode/ (doesn't work, use this: http://www.pezaris.com/sql-mode/)
[RR] Warning - there have not been any updates since v0.922 and this doesn't work on the recent XEmacs (uses obsolete functions). I can only imagine that it is not under active development.

* Oracle's PL/SQL pls-mode. It used to be on the Oracle web site.  Contact the author: DmitryNizhegorodov <mailto:Dmitry.Nizhegorodov@oracle.com> or get a download from his site: http://www.dmitrynizh.com
Older sql-modes such as the one by JimLange can be found in the ElispArchive.

* Oracle 10g Documentation: http://www.oracle-10g.de/oracle_10g_documentation

* oracle-wiki: http://www.orawiki.com/ and http://www.oracle-doku.de/oracle-wiki

There is a useful tutorial style article on using sql-mode (targeted at DB2 but 
more broadly applicable) by RoyMathew at 
http://www.ibm.com/developerworks/data/library/techarticle/0206mathew/0206mathew.html
Also check out the Oracle FAQ at http://www.orafaq.com/

== MS SQL server with ms-sql ==

If you're trying to use MS SQL Server in sql-mode, and the Microsoft command-line query processors osql and isql are not available to you, try jisql, a free, Java-based "workalike" provided by the clever (and generous) folks at Xigole Systems, Inc. http://www.xigole.com/software/jisql.jsp. Apache license.

Another option for users lacking access to osql/isql is sqsh, another Java-based command-line SQL client. The primary advantage to sqsh is that it is in the Debian/Ubuntu repositories (I can't speak for Fedora, etc.) making it easier to install. When using sqsh to connect to SQL Server, use M-x sql-sybase, not sql-ms. Otherwise, Emacs won't pass the right command-line parameters and it won't connect.

----
The different command line terminals that come with MS SQL server can give you
some troubles:
* '''isql''' goes back to SQL Server 2000 and is removed with Server 2008
* '''osql''' is the terminal for which ''ms-sql'' is configured by default, but it is marked as depricated by Microsoft http://msdn.microsoft.com/en-us/library/ms162806.aspx
* '''sqlcmd''' is the one that Microsoft recommends to use as it is likely to be available for the next 5 years

I use this command line tools on a German MS Windows 7 (and GNU Emacs 24.3).
Compared to what I am used from ''sql-oracle'' or ''sql-mysql'' (on Linux)
working with ''sql-ms'' is a pain. The first 5 or 6 times I connected to a
local MS SQL Express and a SQL-Server on a remote machine my sql-mode buffer
was empty. I thought it is stuck somewhere and killed the ''sqlcmd.exe'' process
with the Task-Manager and started another connect attempt. Unfortunately there
is also no banner as it is displayed in ''sql-oracle'' with ''sqlplus''.

At some point I realized that the comint-buffer is waiting for my input, it
just doesn't show a prompt. Both ''osql'' and ''sqlcmd'' have <code>1></code>
and it seems like this is not recognized as prompt by the underlying
''comint-mode''.  Thankfully ''sqlcmd'' supports ''colon'' commands like <code>:help</code>
that are not send to the server but directly respond with output. This brought
me on the right track. So my next step was <code>SELECT 10+20</code> followed by
<code>Enter</code> in order to get into the next line to add the <code>GO</code>
for sending the query to the server. But *stuck again*, the wait cursor
appears and won't let me type the <code>GO</code>.

The usual brute force method to kill the ''sqlcmd'' process brought me out and
after some time I also realized that a simple <code>C-g</code> will also help with the
advantage that the connection to the server is kept alive. It seems like the
lisp code is in some infinite loop waiting for a prompt or feedback that never
comes. But as it is in lisp code it can be interrupted with <code>C-g</code>.

So here is what I had to do:

  SELECT 10+20 AS thirty      (Ctrl-j  brings you in the next line)
  GO                          (Enter   sends this to the server)
  thirty     
  -----------
           30
  
  (1 Zeilen betroffen)

These works for SELECTs and UPDATEs, but it won't work for ALTER TABLE or
CREATE VIEW. For these commands the wait cursor raises its ugly head again.
Thankfully <code>C-g</code> can help us here, as well.
So the sequence your fingers have to get trained for is:
'''C-j .. GO .. Enter .. C-g'''. That's really difficult if you have used
semicolon and Enter with all the other database clients, so far.

And there is another catch: sqlcmd supports special characters like Umlauts,
but it doesn't use Latin1 or windows-1252. Instead it is based on the old
DOS code pages. So you'd better change the input mode for the comint process
to cp850 or cp437: <code>C-x RET p</code> followed by <code>cp850</code>.

The first thought that I had when working with ''sql-ms'' was: "How could this
have ever been released at this state where nothing is working." Which is a
bit strange because I haven't found any other voices on the internet complaining
about the bad quality of the implementation. Maybe it is only related to my
German environment which forces ''sql-ms'' to stumble? Any attempts to change
the language of ''sqlcmd'' were without success. Only in an ideal world
Microsoft tools would respect environment settings like '''set lang=C'''

-- RolfUnger

----
CategoryModes
CategorySql

