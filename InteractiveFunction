A Lisp function becomes a [[command]] when its body contains, at top
level, a form that calls the special form `<code>(interactive...)</code>'.   This special form does nothing when executed, but
its presence in the function definition indicates that interactive calling is
permitted.  Its argument controls the reading of the function arguments in an
interactive call.

See also UniversalArgument, InteractiveKeybinding, LambdaExpression.


Here is a simple example defining a command that displays a message:

    (defun hello ()
      "Hello World and you can call it via M-x hello."
      (interactive)
      (message "Hello World!"))

; `M-x hello' calls command `hello' interactively.

Example of a command that reads a string argument:

    (defun hello (someone)
      "Say hello to SOMEONE via M-x hello."
      (interactive "sWho do you want to say hello to? ")
      (message "Hello %s!" someone))

For a complete list of arguments to `interactive', see `C-h f interactive' or the "Defining Commands" section of the EmacsLispManual (`C-h i m elisp RET m Defining SPC Commands RET').

To use multiple arguments, separate their `interactive' entries with a newline:

    (defun multiple-hello (someone num)
      "Say hello to SOMEONE via M-x hello, for NUM times."
      (interactive "sWho do you want to say hello to? \nnHow many times? ")
      (dotimes (i num)
        (insert (format "Hello %s!\n" someone))))

For an example of passing a Lisp form to `interactive' rather than a string, see the example command at TrabbPardoKnuth.

----
CategoryCode
CategoryGlossary
