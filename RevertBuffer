This page is about returning the current buffer to a state prior to changes you have made to it.  Command `revert-buffer' replaces the current buffer text with the text before your changes.  In the case of a buffer visiting a file, this means your unsaved changes.

== Variable `revert-buffer-function' for Mode-Specific Behavior ==

If variable `revert-buffer-function' is bound to a function then `revert-buffer' just calls it.  This feature is used to implement different behaviors for `revert-buffer' in different modes.

For example, in DiredMode `revert-buffer' revisits the directory display, updating its list of files according to the file status on disk, but it does not change Dired markings or other Dired-specific features.  Similarly for BufferMenu and other modes.

== Revisiting a Directory ==

I you want to revisit a directory in Dired, but you do not want to keep your Dired-specific changes (markings etc.) then use `C-x C-v RET'.  That is, use `find-alternate-file' and just accept the default value, which is the same directory.  This reads the directory from disk, starting anew.

== Reverting without Confirmation ==

You can bind this command to a key (e.g. `##<F5>##' which is the MS Windows key for syncing things) to revert the current buffer without asking for confirmation.  (This command is in library <tt>[[misc-cmds.el]]</tt>.)

  (defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive) (revert-buffer t t))

== Reverting Automatically ==

You can enable minor mode `auto-revert-mode' to automatically revert the current buffer whenever the file it is visiting changes (e.g. outside Emacs).

You can enable global minor mode `global-auto-revert-mode' to do the same thing for all buffers visiting files.  Be aware, however, that when many users visit multiple files across the network with `global-auto-revert-mode' enabled it can increase network traffic considerably.

If [[option]] `global-auto-revert-non-file-buffers' is non-`nil', then `global-auto-revert-mode' can revert some non-file buffers as well.  See the documentation for this option.

See also: AutoRevertMode.


== Reverting All File Buffers ==

This function reverts all buffers that are visiting files:

  (defun revert-all-file-buffers ()
    "Refreshes all buffers that are visiting files."
    (interactive)
    (dolist (buf (buffer-list))
      (with-current-buffer buf
        (when (and (buffer-file-name) (not (buffer-modified-p)))
          (revert-buffer t t t) )))
    (message "Refreshed open files.") )



== Undoing vs Reverting ==

When a buffer is reverted, all of your changes and their history (the undo history), are lost.  If you want only to undo all of your unsaved changes, you can use this command.

{{{
(defun undo-unsaved-edits ()
  "Undo all edits until the buffer is unmodified."
  (interactive)
  (when (buffer-modified-p) (undo))
  (while (buffer-modified-p) (undo-more 1))
  (message "Buffer was undone until no longer modified"))
}}}


----
CategoryFiles
CategoryUndo
