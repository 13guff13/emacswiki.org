Is there a quick way or re-visiting the file in current buffer? This is useful when it was modified by an external program.
 From: MichaelSlassto
 Subject: Re: revisit-file
 Newsgroups: comp.emacs
 Date: Tue, 22 May 2001 20:13:45 GMT

# M-x revert-buffer RET yes RET
# C-x C-v RET
# (global-set-key [(control c) r] 'revert-buffer)

The second one is a sleazy trick, calling find-alternate-file - that prompts you for a file name, but fills in the name of the current buffer's filename as a default, so you can hit RET to re-read the file from disk.  Before I knew about find-alternate-file, I wanted something faster for reverting buffers (mainly due to the problem [[XEmacs]] has with hard links; see the WishList).  That's why I bound revert-buffer into the C-c keymap.


 From: RaymondZeitler
 Subject: Re: revisit-file
 Newsgroups: comp.emacs
 Date: Thu, 24 May 2001 18:00:49 GMT

In addition to doing this manually, which was explained by other posters, you can tell Emacs to do it automatically by putting this in your .emacs file:

 (global-auto-revert-mode 1)

we have found that an awful lot of our network traffic can be people visiting multiple files across the network and having global-auto-revert-mode on so no longer use it all the time

See AutoRevertMode.

== No confirmation ==

In <tt>[[misc-cmds.el]]</tt> you will find this extremely complex command definition:

  (defun revert-buffer-no-confirm ()
    "Revert buffer without confirmation."
    (interactive) (revert-buffer t t))

I bind it to `##<F5>##'. -- DrewAdams

== Revert all buffers that are visiting a file ==

This is a litte function that is useful when editing several files that might for any reason change on disk (update from VersionControl).  It reverts all buffers that are visiting a file.

  (defun revert-all-buffers ()
    "Refreshes all open buffers from their respective files."
    (interactive)
    (dolist (buf (buffer-list))
      (with-current-buffer buf
        (when (and (buffer-file-name) (not (buffer-modified-p)))
          (revert-buffer t t t) )))
    (message "Refreshed open files.") )

== Reverting, but protecting undo ==

There's no way to save the undo history if the file is changed behind Emacs's back.   Emacs needs to re-read the file from disk and reverting a buffer with `revert-buffer' or reopening the file with `C-x C-v RET' will lose the undo history.  If you only want to revert the buffer to undo your own changes, you can hit the UndoCommands repeatedly until the buffer is no longer modified.  In addition to preserving the UndoList, it uses `undo' to revert the command as far as possible until the last time the file was saved.

{{{
(defun undo-until-reverted ()
  "Undo all edits until the buffer is unmodified."
  (interactive)
  (when (buffer-modified-p)
    (undo))
  (while (buffer-modified-p)
    (undo-more 1))
  (message "Buffer was undone until no longer modified"))
}}}

It can even undo changes to a buffer that was modified and not even associated with a file.

----
CategoryFiles
CategoryUndo
