== How can I prevent WL from splitting large attachments into many messages? ==

Add the following to your ##.wl## file:

{{{
(setq mime-edit-split-message nil)
}}}

== If I add folders to an access group outside of Wanderlust, how do I make Wanderlust pick up those changes? ==

In the folder manager, close the access group, then use ##C-u <RET>## to open it again. Wanderlust will scan the access group for new folders.

== How can I get WL's mail composition mode to do completion from aliases in my ~/.mailrc file? ==

In your .wl:

{{{
;; Use ~/.mailrc
(setq wl-address-init-function 'my-wl-address-init)
(defun my-wl-address-init ()
  (wl-local-address-init)
  (setq wl-address-completion-list
        (append wl-address-completion-list (build-mail-aliases))))
}}}

== Offline ==

=== How do I force Wanderlust to pre-fetch all messages in a folder for offline access? ==

First:
{{{
(setq wl-summary-incorporate-marks '("N" "U" "!" "A" "F" "$"))
}}}

Now, from the ##Folder## buffer, use the command ##wl-folder-prefetch-current-entity## (bound to ##I##) on any entity that you wish to prefetch all messages of.

== Speed ==

=== When I update, Wanderlust is slow and spends a long time with the message "Updating marks..." ===

If you only use Wanderlust to access a mailbox, you can set
##wl-summary-auto-sync-marks## to ##nil## in your ##.wl## file.

=== I want a configuration that only shows/downloads threads with new posts within the last N hours (e.g. the last 24).  ===

Create a filter folder,

{{{
/since:yesterday/%INBOX
}}}

== Unicode ==

Release 2.14 was created before emacs23 was released. As a consequence, there may occur some problems with unicode
support. They can be fixed by using a snapshot from the CVS repository. For a working variant, please see
[http://permalink.gmane.org/gmane.mail.wanderlust.general/2768] .

== How can I change which headers wl displays when viewing a message? ==

The headers wl displays when viewing and editing a message are
controlled by two variables: `wl-message-ignored-field-list' and
`wl-message-visible-field-list'.  Both are lists whose elements are
regular expressions that are used to determine which headers are
displayed and which are not.

If you for instance only want a basic set of headers like From:, To:,
Cc:, Subject: and Date: to be displayed you could set these variables
as followed:

{{{
;; ignore  all fields
(setq wl-message-ignored-field-list '("^.*:"))

;; ..but these five
(setq wl-message-visible-field-list
'("^To:"
  "^Cc:"
  "^From:"
  "^Subject:"
  "^Date:"))
}}}

In addition you can control the order of these headers using the
variable `wl-message-sort-field-list':

{{{
(setq wl-message-sort-field-list
 '("^From:"
   "^Subject:"
   "^Date:"
   "^To:"
   "^Cc:"))
}}}

== Can I send html messages? ==

If you have to or it is appropriate: Yes, code below does the trick of
converting the message body into html before sending.  It requires
[OrgMode] to be installed because the conversion is done by Org mode's
html export function.

Org is shipped with Emacs since 22.1 (iirc); you might also profit of
the minor modes orgstruc-mode, orgstruc++-mode and orgtbl-mode for
editing messages even if you don't want to send html messages: these
minor modes give the power of Org's outlining features (headlines,
bullet lists) and the table editor.  For information on these minor
modes see
[http://orgmode.org/manual/Orgstruct-mode.html#Orgstruct-mode here]
and [http://orgmode.org/manual/Orgtbl-mode.html#Orgtbl-mode here].

Back to sending html messages: Putting code below in your startup file
adds following four functions:

   - dmj/wl-send-html-message

     Function that does the job: Convert everything between "--text
     follows this line--" and first mime entity (read: attachment) or
     end of buffer into html markup using `org-export-region-as-html'
     and replaces original body with a multipart MIME entity with the
     plain text version of body and the html markup version.  Thus a
     recipient that prefers html messages can see the html markup,
     recipients that prefer or depend on plain text can see the plain
     text.

     Line breaks in the signature are preserved.

     Cannot be called interactively: It is hooked into SEMI's
     `mime-edit-translate-hook' if message should be html message.

   - dmj/wl-send-html-message-draft-init

     Cannot be called interactively: It is hooked into WL's
     `wl-mail-setup-hook' and `wl-draft-reedit-hook' and provides a
     buffer local variable to toggle.

   - dmj/wl-send-html-message-draft-maybe

     Cannot be called interactively: It is hooked into WL's
     `wl-draft-send-hook' and hooks `dmj/wl-send-html-message' into
     `mime-edit-translate-hook' depending on whether html message is
     toggled on or off

   - dmj/wl-send-html-message-toggle

     Toggles sending of html message.  If toggled on, the letters
     "HTML" appear in the mode line.

     Call it interactively!  Or bind it to a key in `wl-draft-mode'.

Everything besides a keybinding of `dmj/wl-send-html-message-toggle'
is done upon loading the code.  If you have to send html messages
regularily you can set a global variable
`dmj/wl-send-html-message-toggled-p' to the string "HTML" to enable
html messages by default.

{{{
(defun dmj/wl-send-html-message ()
  "Send message as html message.
  Convert body of message to html using
  `org-export-region-as-html'."
  (require 'org)
  (save-excursion
    (let (beg end html text)
      (goto-char (point-min))
      (re-search-forward "^--text follows this line--$")
      ;; move to beginning of next line
      (beginning-of-line 2)
      (setq beg (point))
      (if (not (re-search-forward "^--\\[\\[" nil t))
          (setq end (point-max))
        ;; line up
        (end-of-line 0)
        (setq end (point)))
      ;; grab body
      (setq text (buffer-substring-no-properties beg end))
      ;; convert to html
      (with-temp-buffer
        (org-mode)
        (insert text)
        ;; handle signature
        (when (re-search-backward "^-- \n" nil t)
          ;; preserve link breaks in signature
          (insert "\n#+BEGIN_VERSE\n")
          (goto-char (point-max))
          (insert "\n#+END_VERSE\n")
          ;; grab html
          (setq html (org-export-region-as-html
                      (point-min) (point-max) t 'string))))
      (delete-region beg end)
      (insert
       (concat
	"--" "<<alternative>>-{\n"
	"--" "[[text/plain]]\n" text
        "--" "[[text/html]]\n"  html
	"--" "}-<<alternative>>\n")))))

(defun dmj/wl-send-html-message-toggle ()
  "Toggle sending of html message."
  (interactive)
  (setq dmj/wl-send-html-message-toggled-p
        (if dmj/wl-send-html-message-toggled-p
            nil "HTML"))
  (message "Sending html message toggled %s"
           (if dmj/wl-send-html-message-toggled-p
               "on" "off")))

(defun dmj/wl-send-html-message-draft-init ()
  "Create buffer local settings for maybe sending html message."
  (unless (boundp 'dmj/wl-send-html-message-toggled-p)
    (setq dmj/wl-send-html-message-toggled-p nil))
  (make-variable-buffer-local 'dmj/wl-send-html-message-toggled-p)
  (add-to-list 'global-mode-string
               '(:eval (if (eq major-mode 'wl-draft-mode)
                           dmj/wl-send-html-message-toggled-p))))

(defun dmj/wl-send-html-message-maybe ()
  "Maybe send this message as html message.

If buffer local variable `dmj/wl-send-html-message-toggled-p' is
non-nil, add `dmj/wl-send-html-message' to
`mime-edit-translate-hook'."
  (if dmj/wl-send-html-message-toggled-p
      (add-hook 'mime-edit-translate-hook 'dmj/wl-send-html-message)
    (remove-hook 'mime-edit-translate-hook 'dmj/wl-send-html-message)))

(add-hook 'wl-draft-reedit-hook dmj/wl-send-html-message-draft-init)
(add-hook 'wl-mail-setup-hook 'dmj/wl-send-html-message-draft-init)
(add-hook 'wl-draft-send-hook 'dmj/wl-send-html-message-maybe)
}}}

== When I open a multifolder I get an error: Wrong type argument: arrayp, nil ==

It might be that you've hit the default limit of messages in a
multifolder that WL will handle properly.  The current limit is 100000
Messages -- you might have to adjust this limit by setting the
variable `elmo-multi-divide-number' to an appropriate value.

{{{
(setq elmo-multi-divide-number 1000000)
}}}

== WL hangs when I wake from hibernation ==

The problem seems to be that elmo doesn't realize that the connection its IMAP or other connection has timed out on the other side, and so keeps trying it.
You can work around it if you use emacs-server by issuing an emacsclient command approximately like this before hibernation:

{{{
    /usr/bin/emacsclient --socket-name /tmp/emacs1000/server --eval "(wl-toggle-plugged 'off)"
}}}

and then toggle back on after resume.

Since hibernation/suspend-to-ram sometiems happen in ways you can't control -- e.g., if you leave your laptop on somewhere and run out of battery power -- it's best to havethis doen automatically.

If you use the hibernate script for hibernation/suspend, you can add a scriptlet /etc/hibernate/scriptlets.d/wanderlust that will
do this for you automatically; here's a very simple example:

{{{
AddConfigHandler WanderlustOptions

WanderlustSuspend() {
    /usr/bin/emacsclient --socket-name /tmp/emacs1000/server --eval "(wl-toggle-plugged 'off)"
}

WanderlustResume() {
    /usr/bin/emacsclient --socket-name /tmp/emacs1000/server --eval "(wl-toggle-plugged 'on)"
}

WanderlustOptions() {
    case $1 in
        *)
            return 1
    esac

    if [ -z "$WANDERLUST_HOOKED" ] ; then
        AddSuspendHook 01 WanderlustSuspend
        AddResumeHook 01 WanderlustResume
        WANDERLUST_HOOKED=1
    fi
    return 0
}
}}}

A better way to do this would be to check each running emacsserver instance. In any case I found this didn't always solve the problem, possibly because plugging back in after resume may occur before your new internet connection has been negotiated, which would give you the same issue.

I now use pm-utils instead, and have this in /etc/pm/sleep.d/09_wl_fix:

{{{
. "${PM_FUNCTIONS}"

suspend_wl()
{
	# Get WL to go offline
        /usr/bin/emacsclient --socket-name /tmp/emacs1000/server --eval "(wl-toggle-plugged 'off)"
}

resume_wl()
{
	# Wake up NetworkManager and make it do a new connection
        echo "waking up -- wl is plugged off"
}

case "$1" in
	hibernate|suspend)
		suspend_wl
		;;
	thaw|resume)
		resume_wl
		;;
	*) exit $NA
		;;
esac

}}}


for now it's doing the trick!

== How can I stop [[CategoryBBDB|BBDB]] checking for name mismatches? ==

By default BBDB checks for possible mismatches of a message's author
name and the corresponding BBDB entry.  To disable this feature you
have to remove the responsible function form WL's message redisplay
hook:

{{{
(remove-hook 'wl-message-redisplay-hook 'bbdb-wl-get-update-record)
}}}

== If I receive a message with an encoded header field, WL does not decode it ==

Simply tell SEMI to accept encoded sequences in header fields.

{{{
(setq mime-header-accept-quoted-encoded-words t)
}}}

== Integration with Offline IMAP and fast searches ==

Integration with [https://github.com/nicolas33/offlineimap offlineimap] is simple and easy since wanderlust understands the [http://en.wikipedia.org/wiki/Maildir MailDir] format.  Storing emails locally improves the speed of reading messages significantly even compared to using Wanderlusts native facility for caching messages.

Using the [http://en.wikipedia.org/wiki/Maildir MailDir] format also has the advantage of being able to use native text-based search for all messages.  By default wanderlust is designed to use Namazu, but you can easily replace it with [http://www.djcbsoftware.nl/code/mu/ mu search].  Once you have mu setup you can integrate it into wanderlust with the following in either your init.el or .wl :


{{{

(elmo-search-register-engine
 'mu 'local-file
 :prog "mu"
 :args '("find" pattern "-o" "plain" "-f" "l")
 :charset 'utf-8)

(setq elmo-search-default-engine 'mu)

}}}

